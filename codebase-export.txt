./tsconfig.json:
{
{
    "compilerOptions": {
        "jsx": "react-jsx",
        "esModuleInterop": true,
        "target": "ES2020",
        "module": "ESNext",
        "lib": ["ES2020", "DOM", "DOM.Iterable"],
        "strict": true,
        "skipLibCheck": true,
        "moduleResolution": "bundler",
        "isolatedModules": true,
        "noEmit": true
    },
    "include": ["src", "tests/__mocks__/fileMock.js"],
    "references": [
        { "path": "./tsconfig.jest.json" },
        { "path": "./tsconfig.app.json" },
        { "path": "./tsconfig.node.json" }
    ]
}
}

./README.md:
{
# PhotoComp--React-Cypress
Would hold PhotoComp's Frontend Development

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```

}

./package.json:
{
{
    "name": "photocomp-frontend",
    "private": true,
    "version": "0.0.0",
    "type": "module",
    "scripts": {
        "dev": "vite",
        "test": "jest",
        "coverage": "coverage",
        "build": "tsc -b && vite build",
        "lint": "eslint .",
        "preview": "vite preview",
        "format": "prettier . --write"
    },
    "dependencies": {
        "@popperjs/core": "^2.11.8",
        "axios": "^1.8.4",
        "bootstrap": "^5.3.3",
        "bootstrap-icons": "^1.11.3",
        "react": "^19.0.0",
        "react-bootstrap": "^2.10.9",
        "react-bootstrap-icons": "^1.11.5",
        "react-dom": "^19.0.0"
    },
    "devDependencies": {
        "@eslint/js": "^9.21.0",
        "@testing-library/dom": "^10.4.0",
        "@testing-library/jest-dom": "^6.6.3",
        "@testing-library/react": "^16.2.0",
        "@types/jest": "^29.5.14",
        "@types/react": "^19.0.12",
        "@types/react-dom": "^19.0.4",
        "@vitejs/plugin-react": "^4.3.4",
        "cypress": "^14.2.0",
        "eslint": "^9.21.0",
        "eslint-plugin-react-hooks": "^5.1.0",
        "eslint-plugin-react-refresh": "^0.4.19",
        "globals": "^15.15.0",
        "identity-obj-proxy": "^3.0.0",
        "jest": "^29.7.0",
        "jest-environment-jsdom": "^29.7.0",
        "prettier": "^3.5.3",
        "react-router-dom": "^7.4.1",
        "sass": "^1.86.0",
        "ts-jest": "^29.3.0",
        "ts-node": "^10.9.2",
        "typescript": "~5.7.2",
        "typescript-eslint": "^8.24.1",
        "vite": "^6.2.0"
    }
}
}

./cypress.config.ts:
{
import { defineConfig } from 'cypress';
import customViteConfig from './vite.config';

export default defineConfig({
    component: {
        devServer: {
            framework: 'react',
            bundler: 'vite',
            viteConfig: customViteConfig,
        },
    },

    e2e: {
        setupNodeEvents(on, config) {
            // implement node event listeners here
        },
    },
});
}

./jest.config.ts:
{
import type { Config } from '@jest/types';

const config: Config.InitialOptions = {
    testEnvironment: 'jsdom',
    preset: 'ts-jest',
    moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json'],
    transform: {
        '^.+\\.tsx?$': 'ts-jest',
    },
    setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
    moduleNameMapper: {
        '\\.(css|less|sass|scss)$': 'identity-obj-proxy',
        '\\.(gif|ttf|eot|svg|png)$': '<rootDir>/tests/__mocks__/fileMock.js',
    },
};

export default config;
}

./jest.setup.ts:
{
import '@testing-library/jest-dom';

// Add TextEncoder polyfill
if (typeof global.TextEncoder === 'undefined') {
    const { TextEncoder, TextDecoder } = require('util');
    global.TextEncoder = TextEncoder;
    global.TextDecoder = TextDecoder;
}
}

./eslint.config.js:
{
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
    { ignores: ['dist'] },
    {
        extends: [js.configs.recommended, ...tseslint.configs.recommended],
        files: ['**/*.{ts,tsx}'],
        languageOptions: {
            ecmaVersion: 2020,
            globals: globals.browser,
        },
        plugins: {
            'react-hooks': reactHooks,
            'react-refresh': reactRefresh,
        },
        rules: {
            ...reactHooks.configs.recommended.rules,
            'react-refresh/only-export-components': ['warn', { allowConstantExport: true }],
            '@typescript-eslint/no-explicit-any': 'off',
            '@typescript-eslint/no-empty-object-type': 'off',
        },
    }
);
}

./index.html:
{
<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <link rel="icon" type="image/svg+xml" href="/vite.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>PhotoComp</title>
    </head>

    <body>
        <div id="root"></div>
        <script type="module" src="/src/main.tsx"></script>
    </body>
</html>
}

./vite.config.ts:
{
import { defineConfig, loadEnv } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig(({ mode }) => {
    const env = loadEnv(mode, process.cwd(), '');
    return {
        plugins: [react()],
        define: {
            'process.env': env,
        },
        test: {
            globals: true,
            environment: 'jsdom',
            alias: {
                '^.+\\.(jpg|jpeg|png|gif|svg)$': '/tests/__mocks__/fileMock.ts',
            },
        },
    };
});
}

./tsconfig.app.json:
{
{
    "compilerOptions": {
        "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
        "target": "ES2020",
        "useDefineForClassFields": true,
        "lib": ["ES2020", "DOM", "DOM.Iterable"],
        "module": "ESNext",
        "skipLibCheck": true,

        /* Bundler mode */
        "moduleResolution": "bundler",
        "allowImportingTsExtensions": true,
        "isolatedModules": true,
        "moduleDetection": "force",
        "noEmit": true,
        "jsx": "react-jsx",

        /* Linting */
        "strict": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noFallthroughCasesInSwitch": true,
        "noUncheckedSideEffectImports": true
    },
    "include": ["src", "tests/__mocks__/fileMock.js"]
}
}

./tsconfig.jest.json:
{
{
    "extends": "./tsconfig.json",
    "compilerOptions": {
        "target": "ES2020",
        "module": "CommonJS",
        "noEmit": true,
        "types": [
            "node",
            "cypress",
            "@testing-library/cypress",
            "jest",
            "@testing-library/jest-dom"
        ]
    },
    "include": ["src", "tests", "jest.setup.ts", "src/types"]
}
}

./tsconfig.node.json:
{
{
    "compilerOptions": {
        "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
        "target": "ES2022",
        "lib": ["ES2023"],
        "module": "ESNext",
        "skipLibCheck": true,

        /* Bundler mode */
        "moduleResolution": "bundler",
        "allowImportingTsExtensions": true,
        "isolatedModules": true,
        "moduleDetection": "force",
        "noEmit": true,

        /* Linting */
        "strict": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noFallthroughCasesInSwitch": true,
        "noUncheckedSideEffectImports": true
    },
    "include": ["vite.config.ts"]
}
}

src/App.tsx:
{
import { Routes, Route } from 'react-router-dom';

import Home from './pages/Home';
import Register from './pages/Register/Register';
import Login from './pages/Login/Login';
import ProtectedRoute from './components/routes/ProtectedRoute/ProtectedRoute';
import Footer from './components/bars/Footer/Footer'

function App() {
    return (
        <>
            <Routes>
                <Route path="/register" element={<Register />} />
                <Route path="/login" element={<Login />} />
                <Route
                    path="/"
                    element={
                        <ProtectedRoute>
                            <Home />
                        </ProtectedRoute>
                    }
                />
            </Routes>
            <Footer/>
        </>
    );
}

export default App;
}

src/components/bars/Footer/Footer.test.tsx:
{
import React from 'react';
import { screen } from '@testing-library/react';
import Footer from './Footer';
import { renderWithRouter } from '../../../utils/test-utils';

jest.mock('react-bootstrap', () => ({
  Container: ({ 
    children, 
    fluid,
    className 
  }: { 
    children: React.ReactNode, 
    fluid: boolean,
    className: string 
  }) => (
    <div 
      data-testid="mock-container" 
      data-fluid={fluid}
      className={className}
    >
      {children}
    </div>
  )
}));

describe('Footer Component', () => {
  test('renders with copyright text', () => {
    renderWithRouter(<Footer />);
    
    const currentYear = new Date().getFullYear().toString();
    expect(screen.getByText(/all rights reserved/i)).toBeInTheDocument();
    expect(screen.getByText(new RegExp(`© ${currentYear} PHOTOCOMP`, 'i'))).toBeInTheDocument();
  });

  test('renders content policy link', () => {
    renderWithRouter(<Footer />);
    
    const link = screen.getByText(/content policy/i);
    expect(link).toBeInTheDocument();
    expect(link.closest('a')).toHaveAttribute('href', '/content-policy');
  });

  test('applies custom class name', () => {
    renderWithRouter(<Footer className="custom-class" />);
    
    const footer = screen.getByRole('contentinfo');
    expect(footer).toHaveClass('custom-class');
    expect(footer).toHaveClass('footer');
  });

  test('renders inside a fluid container', () => {
    renderWithRouter(<Footer />);
    
    const container = screen.getByTestId('mock-container');
    expect(container).toHaveAttribute('data-fluid', 'true');
    expect(container).toHaveClass('d-flex');
    expect(container).toHaveClass('justify-content-between');
  });
});
}

src/components/bars/Footer/Footer.tsx:
{
import React from 'react';
import { Container } from 'react-bootstrap';
import { Link } from 'react-router-dom';

interface FooterProps {
  className?: string;
}

const Footer: React.FC<FooterProps> = ({ className = '' }) => {
  return (
    <footer className={`footer bg-dark text-light py-3 ${className}`}>
      <Container fluid className="d-flex justify-content-between align-items-center">
        <div className="footer-copyright">
          © {new Date().getFullYear()} PHOTOCOMP. All rights reserved.
        </div>
        <div className="footer-links">
          <Link to="/content-policy" className="text-light">Content Policy</Link>
        </div>
      </Container>
    </footer>
  );
};

export default Footer;
}

src/components/bars/SearchBar/SearchBar.test.tsx:
{
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import SearchBar from './SearchBar';

// Mock react-bootstrap components and icons
jest.mock('react-bootstrap', () => {
  const InputGroup: React.FC<{children: React.ReactNode}> = ({ children }) => {
    return <div data-testid="mock-input-group">{children}</div>;
  };

  (InputGroup as any).Text = ({ children, className }: { 
    children: React.ReactNode; 
    className?: string 
  }) => {
    return (
      <div 
        data-testid="mock-input-group-text"
        className={className}
      >
        {children}
      </div>
    );
  };
  
  const Form: React.FC<{
    children: React.ReactNode;
    onSubmit?: (e:React.FormEvent<HTMLFormElement>)=>void;
    className?:string
  }> = ({ children, onSubmit, className }) => {
    return (
      <form 
        data-testid="mock-form" 
        onSubmit={onSubmit}
        className={className}
      >
        {children}
      </form>
    );
  };
  
  (Form as any).Control = ({ 
    id,
    type,
    placeholder,
    value,
    onChange,
    className,
    'aria-label': ariaLabel
  }: { 
    id?: string;
    type?: string;
    placeholder?: string;
    value?: string;
    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
    className?: string;
    'aria-label'?: string;
  }) => {
    return (
      <input 
        data-testid="mock-form-control"
        id={id}
        type={type}
        placeholder={placeholder}
        value={value}
        onChange={onChange}
        className={className}
        aria-label={ariaLabel}
      />
    );
  };
  
  return {
    Form,
    InputGroup
  };
});

jest.mock('react-bootstrap-icons', () => ({
  Search: () => <span data-testid="search-icon" />
}));

describe('SearchBar Component', () => {
  const defaultProps = {
    value: '',
    onChange: jest.fn()
  };

  test('renders with default props', () => {
    render(<SearchBar {...defaultProps} />);
    
    const form = screen.getByTestId('mock-form');
    expect(form).toHaveClass('search-bar-form');
    
    const input = screen.getByTestId('mock-form-control');
    expect(input).toHaveAttribute('placeholder', 'Search...');
    expect(input).toHaveAttribute('id', 'topBarSearch');
    expect(input).toHaveAttribute('type', 'text');
    expect(input).toHaveClass('form-input');
    expect(input).toHaveClass('search-input');
    
    const icon = screen.getByTestId('search-icon');
    expect(icon).toBeInTheDocument();
  });

  test('renders with custom placeholder', () => {
    render(<SearchBar {...defaultProps} placeholder="Find organizations..." />);
    
    const input = screen.getByTestId('mock-form-control');
    expect(input).toHaveAttribute('placeholder', 'Find organizations...');
  });

  test('applies custom class name', () => {
    render(<SearchBar {...defaultProps} className="custom-class" />);
    
    const form = screen.getByTestId('mock-form');
    expect(form).toHaveClass('custom-class');
    expect(form).toHaveClass('search-bar-form');
  });

  test('applies custom id', () => {
    render(<SearchBar {...defaultProps} id="customSearchId" />);
    
    const input = screen.getByTestId('mock-form-control');
    expect(input).toHaveAttribute('id', 'customSearchId');
  });

  test('calls onChange when input changes', () => {
    const handleChange = jest.fn();
    render(<SearchBar value="" onChange={handleChange} />);
    
    const input = screen.getByTestId('mock-form-control');
    fireEvent.change(input, { target: { value: 'search term' } });
    
    expect(handleChange).toHaveBeenCalledTimes(1);
  });

  test('calls onSubmit when form is submitted', () => {
    const handleSubmit = jest.fn(e => e.preventDefault());
    render(<SearchBar value="" onChange={jest.fn()} onSubmit={handleSubmit} />);
    
    const form = screen.getByTestId('mock-form');
    fireEvent.submit(form);
    
    expect(handleSubmit).toHaveBeenCalledTimes(1);
  });

  test('displays current value', () => {
    render(<SearchBar value="test search" onChange={jest.fn()} />);
    
    const input = screen.getByTestId('mock-form-control');
    expect(input).toHaveAttribute('value', 'test search');
  });
});
}

src/components/bars/SearchBar/SearchBar.tsx:
{
import React from 'react';
import { Form, InputGroup } from 'react-bootstrap';
import { Search } from 'react-bootstrap-icons';

interface SearchBarProps {
  placeholder?: string;
  value: string;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  onSubmit?: (e: React.FormEvent<HTMLFormElement>) => void;
  className?: string;
  id?: string;
}

const SearchBar: React.FC<SearchBarProps> = ({
  placeholder = 'Search...',
  value,
  onChange,
  onSubmit,
  className = '',
  id = 'topBarSearch'
}) => {
  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (onSubmit) {
      onSubmit(e);
    }
  };

  return (
    <Form onSubmit={handleSubmit} className={`search-bar-form ${className}`}>
      <InputGroup>
        <Form.Control
          id={id}
          type="text"
          placeholder={placeholder}
          value={value}
          onChange={onChange}
          className="form-input bg-dark border-dark text-light search-input"
          aria-label="Search"
        />
        <InputGroup.Text className="bg-dark border-dark text-light">
          <Search />
        </InputGroup.Text>
      </InputGroup>
    </Form>
  );
};

export default SearchBar;
}

src/components/bars/SideBar.test.tsx:
{
import React from 'react';
import { render, screen } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom'; // Import BrowserRouter
import Sidebar from './SideBar';

// Wrap the component with BrowserRouter in render function
const renderWithRouter = (ui: React.ReactElement) => {
    return render(<BrowserRouter>{ui}</BrowserRouter>); // Render with BrowserRouter
};

// Test for Sidebar navigation links
describe('Sidebar Component', () => {
    // Test for image
    it('renders image with alt text', () => {
        renderWithRouter(<Sidebar />); // Use renderWithRouter to wrap Sidebar
        const img = screen.getByAltText('Logo') as HTMLImageElement;
        expect(img).toBeInTheDocument();
        expect(img.src).toContain('test-file-stub'); // Match the mocked path, not 'mocked-image-path'
    });

    it('renders sidebar with nav links', () => {
        renderWithRouter(<Sidebar />);

        // Check navigation links
        expect(screen.getByText('Home')).toBeInTheDocument();
        expect(screen.getByText('Organizations')).toBeInTheDocument();
        expect(screen.getByText('Events')).toBeInTheDocument();
        expect(screen.getByText('Photos')).toBeInTheDocument();
    });

    it('renders toggle button', () => {
        renderWithRouter(<Sidebar />);
        const toggle = screen.getByRole('button');
        expect(toggle).toBeInTheDocument();
        expect(toggle).toHaveAttribute('aria-controls', 'responsive-navbar-nav');
    });
});
}

src/components/bars/SideBar.tsx:
{
import React from 'react';
import { Navbar, Nav } from 'react-bootstrap';
import * as icon from 'react-bootstrap-icons';
import { NavLink } from 'react-router-dom';
import logo from '../../assets/PhotoCompLogo.png';
import '../../styles/SideBar.css';

const Sidebar: React.FC = () => {
    return (
        <Navbar
            collapseOnSelect
            data-bs-theme="dark"
            bg="dark"
            variant="dark"
            className="flex-column sidebar"
        >
            <Navbar.Brand className="mx-auto sidebar-brand">
                <img src={logo} alt="Logo" />
            </Navbar.Brand>
            <Navbar.Toggle aria-controls="responsive-navbar-nav" />
            <Navbar.Collapse id="responsive-navbar-nav">
                <Nav className="flex-column">
                    <NavLink
                        to="/"
                        end
                        className={({ isActive }) =>
                            `nav-link d-flex align-items-center gap-2 sidebar-link ${
                                isActive ? 'active' : ''
                            }`
                        }
                    >
                        <icon.HouseDoor /> Home
                    </NavLink>

                    <NavLink
                        to="/organizations"
                        className={({ isActive }) =>
                            `nav-link d-flex align-items-center gap-2 sidebar-link ${
                                isActive ? 'active' : ''
                            }`
                        }
                    >
                        <icon.Grid3x3Gap /> Organizations
                    </NavLink>

                    <NavLink
                        to="/:id/events"
                        className={({ isActive }) =>
                            `nav-link d-flex align-items-center gap-2 sidebar-link ${
                                isActive ? 'active' : ''
                            }`
                        }
                    >
                        <icon.Window /> Events
                    </NavLink>

                    <NavLink
                        to="/:id/events/:eid"
                        className={({ isActive }) =>
                            `nav-link d-flex align-items-center gap-2 sidebar-link ${
                                isActive ? 'active' : ''
                            }`
                        }
                    >
                        <icon.Images /> Photos
                    </NavLink>
                </Nav>
            </Navbar.Collapse>
        </Navbar>
    );
};

export default Sidebar;
}

src/components/bars/TopBar/TopBar.test.tsx:
{
import React from 'react';
import { render, screen } from '@testing-library/react';
import TopBar from './TopBar';

jest.mock('react-bootstrap', () => ({
  Navbar: ({ children, bg, variant, className, 'data-bs-theme': theme, expand }: { 
    children: React.ReactNode, 
    bg: string, 
    variant: string, 
    className: string,
    'data-bs-theme': string,
    expand: string
  }) => (
    <nav 
      data-testid="mock-navbar" 
      data-bg={bg} 
      data-variant={variant}
      data-theme={theme}
      data-expand={expand}
      className={className}
    >
      {children}
    </nav>
  ),
  Container: ({ children, fluid }: { 
    children: React.ReactNode, 
    fluid: boolean 
  }) => (
    <div 
      data-testid="mock-container" 
      data-fluid={fluid}
    >
      {children}
    </div>
  ),
  Row: ({ children, className }: { 
    children: React.ReactNode, 
    className: string 
  }) => (
    <div 
      data-testid="mock-row" 
      className={className}
    >
      {children}
    </div>
  ),
  Col: ({ children, xs, md, className }: { 
    children?: React.ReactNode, 
    xs: number, 
    md: number, 
    className: string 
  }) => (
    <div 
      data-testid="mock-col" 
      data-xs={xs} 
      data-md={md} 
      className={className}
    >
      {children}
    </div>
  )
}));

describe('TopBar Component', () => {
  const searchComponent = <div data-testid="search-component">Search Component</div>;
  const rightComponents = <div data-testid="right-components">Right Components</div>;

  test('renders with default props', () => {
    render(<TopBar />);
    
    const navbar = screen.getByTestId('mock-navbar');
    expect(navbar).toHaveAttribute('data-bg', 'dark');
    expect(navbar).toHaveAttribute('data-variant', 'dark');
    expect(navbar).toHaveAttribute('data-theme', 'dark');
    expect(navbar).toHaveClass('py-2');
    
    const container = screen.getByTestId('mock-container');
    expect(container).toHaveAttribute('data-fluid', 'true');
    
    const row = screen.getByTestId('mock-row');
    expect(row).toHaveClass('w-100');
    expect(row).toHaveClass('align-items-center');
    
    const cols = screen.getAllByTestId('mock-col');
    expect(cols).toHaveLength(2);
    expect(cols[0]).toHaveAttribute('data-xs', '12');
    expect(cols[0]).toHaveAttribute('data-md', '9');
    expect(cols[1]).toHaveAttribute('data-xs', '12');
    expect(cols[1]).toHaveAttribute('data-md', '3');
    expect(cols[1]).toHaveClass('d-flex');
    expect(cols[1]).toHaveClass('justify-content-end');
  });

  test('renders search component', () => {
    render(<TopBar searchComponent={searchComponent} />);
    
    expect(screen.getByTestId('search-component')).toBeInTheDocument();
  });

  test('renders right components', () => {
    render(<TopBar rightComponents={rightComponents} />);
    
    expect(screen.getByTestId('right-components')).toBeInTheDocument();
  });

  test('renders both search and right components', () => {
    render(
      <TopBar 
        searchComponent={searchComponent} 
        rightComponents={rightComponents} 
      />
    );
    
    expect(screen.getByTestId('search-component')).toBeInTheDocument();
    expect(screen.getByTestId('right-components')).toBeInTheDocument();
  });

  test('applies custom class name', () => {
    render(<TopBar className="custom-class" />);
    
    const navbar = screen.getByTestId('mock-navbar');
    expect(navbar).toHaveClass('custom-class');
  });

  test('applies custom background and variant', () => {
    render(<TopBar bg="light" variant="light" />);
    
    const navbar = screen.getByTestId('mock-navbar');
    expect(navbar).toHaveAttribute('data-bg', 'light');
    expect(navbar).toHaveAttribute('data-variant', 'light');
    expect(navbar).toHaveAttribute('data-theme', 'light');
  });
});
}

src/components/bars/TopBar/TopBar.tsx:
{
import React from 'react';
import { Navbar, Container, Row, Col } from 'react-bootstrap';

interface TopBarProps {
  searchComponent?: React.ReactNode;
  rightComponents?: React.ReactNode;
  className?: string;
  bg?: string;
  variant?: string;
}

const TopBar: React.FC<TopBarProps> = ({
  searchComponent,
  rightComponents,
  className = '',
  bg = 'dark',
  variant = 'dark'
}) => {
  return (
    <Navbar
      bg={bg}
      variant={variant}
      className={`py-2 ${className}`}
      data-bs-theme={variant}
      expand="lg"
    >
      <Container fluid>
        <Row className="w-100 align-items-center">
          <Col xs={12} md={9} className="px-0">
            {searchComponent}
          </Col>
          <Col xs={12} md={3} className="px-0 d-flex justify-content-end">
            {rightComponents}
          </Col>
        </Row>
      </Container>
    </Navbar>
  );
};

export default TopBar;
}

src/components/cards/galleryCard/GalleryCard.test.tsx:
{
import React from 'react';
import { fireEvent, screen } from '@testing-library/react';
import GalleryCard from './GalleryCard';
import { renderWithRouter } from '../../../utils/test-utils';

// Mock react-bootstrap Card component
jest.mock('react-bootstrap', () => ({
  Card: ({ 
    children, 
    className, 
    onClick, 
    style 
  }: { 
    children: React.ReactNode, 
    className: string, 
    onClick: () => void,
    style: React.CSSProperties
  }) => (
    <div 
      data-testid="mock-card" 
      className={className}
      onClick={onClick}
      style={style}
    >
      {children}
    </div>
  )
}));

// Mock useNavigate
const mockNavigate = jest.fn();
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: () => mockNavigate
}));

describe('GalleryCard Component', () => {
  beforeEach(() => {
    mockNavigate.mockClear();
  });

  // Organization card tests
  test('renders organization card correctly', () => {
    const organization = {
      id: '123',
      name: 'Test Organization',
      description: 'This is a test organization',
      logoUrl: 'https://example.com/logo.jpg',
      PK: 'ORG#TESTORG'
    };

    renderWithRouter(
      <GalleryCard 
        item={organization} 
        className="organization-card" 
      />
    );
    
    const card = screen.getByTestId('mock-card');
    expect(card).toHaveClass('organization-card');
    expect(screen.getByText('Test Organization')).toBeInTheDocument();
    expect(screen.getByText('This is a test organization')).toBeInTheDocument();
    expect(card).toHaveStyle(`background-image: url(${organization.logoUrl})`);
  });

  test('navigates to organization page when organization card is clicked', () => {
    const organization = {
      id: '123',
      name: 'Test Organization',
      PK: 'ORG#TESTORG'
    };

    renderWithRouter(
      <GalleryCard 
        item={organization} 
        className="organization-card" 
      />
    );
    
    const card = screen.getByTestId('mock-card');
    fireEvent.click(card);
    
    expect(mockNavigate).toHaveBeenCalledWith('/organizations/testorg');
  });

  // Event card tests
  test('renders event card correctly', () => {
    const event = {
      id: '456',
      title: 'Test Event',
      description: 'This is a test event',
      GSI2PK: 'ORG#TESTORG'
    };

    renderWithRouter(
      <GalleryCard 
        item={event} 
        className="event" 
      />
    );
    
    const card = screen.getByTestId('mock-card');
    expect(card).toHaveClass('event');
    expect(screen.getByText('Test Event')).toBeInTheDocument();
    expect(screen.getByText('This is a test event')).toBeInTheDocument();
    
    // Check organization badge is displayed
    expect(screen.getByText('TESTORG')).toBeInTheDocument();
  });

  test('navigates to event page when event card is clicked', () => {
    const event = {
      id: '456',
      title: 'Test Event',
      GSI2PK: 'ORG#TESTORG'
    };

    renderWithRouter(
      <GalleryCard 
        item={event} 
        className="event" 
      />
    );
    
    const card = screen.getByTestId('mock-card');
    fireEvent.click(card);
    
    expect(mockNavigate).toHaveBeenCalledWith('/organizations/testorg/events/456');
  });

  // Photo card tests
  test('renders photo card correctly', () => {
    const photo = {
      id: '789',
      url: 'https://example.com/photo.jpg'
    };

    renderWithRouter(
      <GalleryCard 
        item={photo} 
        className="photo" 
      />
    );
    
    const card = screen.getByTestId('mock-card');
    expect(card).toHaveClass('photo');
    
    // Photo card should not display title or description
    expect(screen.queryByTestId('card-title')).not.toBeInTheDocument();
    expect(screen.queryByTestId('card-description')).not.toBeInTheDocument();
    
    // Check background image is set correctly
    expect(card).toHaveStyle(`background-image: url(${photo.url})`);
  });

  test('truncates long descriptions', () => {
    const longDescription = 'This is a very long description that should be truncated. It has more than 100 characters to ensure the truncation works correctly in all cases.';
    const organization = {
      id: '123',
      name: 'Test Organization',
      description: longDescription
    };

    renderWithRouter(
      <GalleryCard 
        item={organization} 
        className="organization-card" 
      />
    );
    
    // Expected truncated text with ellipsis
    const truncatedText = longDescription.substring(0, 97) + '...';
    expect(screen.getByText(truncatedText)).toBeInTheDocument();
  });

  test('uses fallback image when no image URL is provided', () => {
    const organization = {
      id: '123',
      name: 'Test Organization'
    };

    renderWithRouter(
      <GalleryCard 
        item={organization} 
        className="organization-card" 
      />
    );
    
    const card = screen.getByTestId('mock-card');
    expect(card).toHaveStyle(`background-image: url(https://picsum.photos/400/350?random=123)`);
  });
});
}

src/components/cards/galleryCard/GalleryCard.tsx:
{
import React from 'react';
import { Card } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';

interface Organization {
  id: string;
  name: string;
  description?: string;
  logoUrl?: string;
  PK?: string;
}

interface Event {
  id: string;
  title: string;
  description?: string;
  imageUrl?: string;
  date?: string;
  GSI2PK?: string; 
  organizationName?: string; 
}

interface Photo {
  id: string;
  url: string;
  title?: string;
}

type CardItem = Organization | Event | Photo;

interface GalleryCardProps {
  item: CardItem;
  className: string;
}

const GalleryCard: React.FC<GalleryCardProps> = ({ item, className }) => {
  const navigate = useNavigate();
  
  const isOrganization = className.includes('organization');
  const isEvent = className.includes('event');
  const isPhoto = className.includes('photo');
  
  const isOrganizationItem = (item: CardItem): item is Organization => 'name' in item && !('title' in item && !('organizationName' in item));
  const isEventItem = (item: CardItem): item is Event => 'title' in item;
  const isPhotoItem = (item: CardItem): item is Photo => 'url' in item;
  
  const getBackgroundImage = () => {
    if (isOrganizationItem(item) && item.logoUrl) {
      return item.logoUrl;
    } else if (isEventItem(item) && item.imageUrl) {
      return item.imageUrl;
    } else if (isPhotoItem(item)) {
      return item.url;
    }
    return ``;
  };
  
  const getTitle = () => {
    if (isOrganizationItem(item)) {
      return item.name;
    } else if (isEventItem(item)) {
      return item.title;
    } else if (isPhotoItem(item) && item.title) {
      return item.title;
    }
    return '';
  };
  
  const getDescription = () => {
    let description = '';
    
    if (isOrganizationItem(item) && item.description) {
      description = item.description;
    } else if (isEventItem(item) && item.description) {
      description = item.description;
    }
    
    if (description.length > 100) {
      return description.substring(0, 97) + '...';
    }
    
    return description;
  };
  
  const getOrganizationName = () => {
    if (isEventItem(item)) {
      if (item.organizationName) {
        return item.organizationName;
      } else if (item.GSI2PK) {
        const match = item.GSI2PK.match(/^ORG#(.+)$/);
        return match ? match[1] : '';
      }
    }
    return '';
  };
  
  const handleCardClick = () => {
    if (isOrganizationItem(item)) {
      const orgId = item.PK ? 
        item.PK.replace('ORG#', '') : 
        item.id;
      navigate(`/organizations/${orgId.toLowerCase()}`);
    } else if (isEventItem(item)) {
      const orgId = item.GSI2PK ? 
        item.GSI2PK.replace('ORG#', '').toLowerCase() : 
        '';
      
      navigate(`/organizations/${orgId}/events/${item.id}`);
    } else if (isPhotoItem(item)) {
      navigate(`/photos/${item.id}`);
    }
  };
  
  return (
    <Card 
      className={`gallery-card ${className}`}
      onClick={handleCardClick}
      style={{ 
        width: '350px', 
        height: '250px',
        backgroundImage: `url(${getBackgroundImage()})`,
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        position: 'relative',
        cursor: 'pointer'
      }}
    >
      <div className="card-overlay"></div>
      
      {isEvent && (
        <div className="organization-badge">
          {getOrganizationName()}
        </div>
      )}
      
      {!isPhoto && (
        <div className="card-content">
          <h5 className="card-title">{getTitle()}</h5>
          
          {getDescription() && (
            <p className="card-description">
              {getDescription()}
            </p>
          )}
        </div>
      )}
    </Card>
  );
};

export default GalleryCard;
}

src/components/forms/AuthForm/AuthForm.test.tsx:
{
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import AuthForm from './AuthForm';

// Mock react-bootstrap
jest.mock('react-bootstrap', () => ({
    Form: ({ children, onSubmit }: { children: React.ReactNode; onSubmit: any }) => (
        <form data-testid="form" onSubmit={onSubmit}>
            {children}
        </form>
    ),
    Alert: ({ children, variant }: { children: React.ReactNode; variant: string }) => (
        <div data-testid="alert" className={`alert alert-${variant}`}>
            {children}
        </div>
    ),
}));

describe('AuthForm Component', () => {
    const mockProps = {
        title: 'Test Title',
        onSubmit: jest.fn(e => e.preventDefault()),
        error: null,
        children: <div data-testid="form-children">Form fields</div>,
    };

    test('renders the form with title', () => {
        render(<AuthForm {...mockProps} />);

        expect(screen.getByText('Test Title')).toBeInTheDocument();
        expect(screen.getByTestId('form')).toBeInTheDocument();
        expect(screen.getByTestId('form-children')).toBeInTheDocument();
    });

    test('does not render alert when no error', () => {
        render(<AuthForm {...mockProps} />);

        expect(screen.queryByTestId('alert')).not.toBeInTheDocument();
    });

    test('renders alert when error is provided', () => {
        render(<AuthForm {...mockProps} error="Test error message" />);

        const alert = screen.getByTestId('alert');
        expect(alert).toBeInTheDocument();
        expect(alert).toHaveClass('alert-danger');
        expect(alert).toHaveTextContent('Test error message');
    });

    test('calls onSubmit when form is submitted', () => {
        render(<AuthForm {...mockProps} />);

        const form = screen.getByTestId('form');
        fireEvent.submit(form);

        expect(mockProps.onSubmit).toHaveBeenCalledTimes(1);
    });

    test('renders children inside the form', () => {
        const customChildren = <button data-testid="custom-button">Submit</button>;
        render(
            <AuthForm title="Test Form" onSubmit={mockProps.onSubmit} error={null}>
                {customChildren}
            </AuthForm>
        );

        const form = screen.getByTestId('form');
        expect(form).toContainElement(screen.getByTestId('custom-button'));
    });
});
}

src/components/forms/AuthForm/AuthForm.tsx:
{
import React from 'react';
import { Form, Alert } from 'react-bootstrap';

interface AuthFormProps {
    title: string;
    onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;
    error: string | null;
    children: React.ReactNode;
}

const AuthForm: React.FC<AuthFormProps> = ({ title, onSubmit, error, children }) => {
    return (
        <div className="auth-form">
            <h1 className="auth-title">{title}</h1>
            {error && <Alert variant="danger">{error}</Alert>}
            <Form onSubmit={onSubmit}>{children}</Form>
        </div>
    );
};

export default AuthForm;
}

src/components/forms/AuthForm.tsx:
{
import React from 'react';
import { Form, Alert } from 'react-bootstrap';

interface AuthFormProps {
    title: string;
    onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;
    error: string | null;
    children: React.ReactNode;
}

const AuthForm: React.FC<AuthFormProps> = ({ title, onSubmit, error, children }) => {
    return (
        <div className="auth-form">
            <h1 className="auth-title">{title}</h1>
            {error && <Alert variant="danger">{error}</Alert>}
            <Form onSubmit={onSubmit} >
                {children}
            </Form>
        </div>
    );
};

export default AuthForm;
}

src/components/forms/FormButton/FormButton.test.tsx:
{
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import FormButton from './FormButton';

// Mock react-bootstrap Button
jest.mock('react-bootstrap', () => ({
    Button: ({
        children,
        variant,
        type,
        className,
        onClick,
    }: {
        children: React.ReactNode;
        variant: string;
        type: 'submit' | 'reset' | 'button' | undefined;
        className: string;
        onClick?: () => void;
    }) => (
        <button
            data-testid="mock-button"
            data-variant={variant}
            type={type}
            className={className}
            onClick={onClick}
        >
            {children}
        </button>
    ),
}));

describe('FormButton Component', () => {
    test('renders with default props', () => {
        render(<FormButton type="button">Click Me</FormButton>);

        const button = screen.getByTestId('mock-button');
        expect(button).toHaveTextContent('Click Me');
        expect(button).toHaveAttribute('data-variant', 'primary');
        expect(button).toHaveAttribute('type', 'button');
        expect(button).toHaveAttribute('class', expect.stringContaining('mb-3'));
    });

    test('applies custom class names', () => {
        render(
            <FormButton type="submit" className="custom-class">
                Submit
            </FormButton>
        );

        const button = screen.getByTestId('mock-button');
        expect(button).toHaveAttribute('class', expect.stringContaining('custom-class'));
        expect(button).toHaveAttribute('class', expect.stringContaining('mb-3'));
    });

    test('applies custom variant', () => {
        render(
            <FormButton type="button" variant="success">
                Success Button
            </FormButton>
        );

        const button = screen.getByTestId('mock-button');
        expect(button).toHaveAttribute('data-variant', 'success');
    });

    test('applies inverted styles', () => {
        render(
            <FormButton type="button" inverted>
                Inverted Button
            </FormButton>
        );

        const button = screen.getByTestId('mock-button');
        expect(button).toHaveAttribute('data-variant', 'light');
        expect(button).toHaveAttribute('class', expect.stringContaining('text-dark'));
    });

    test('calls onClick when clicked', () => {
        const handleClick = jest.fn();
        render(
            <FormButton type="button" onClick={handleClick}>
                Clickable
            </FormButton>
        );

        const button = screen.getByTestId('mock-button');
        fireEvent.click(button);

        expect(handleClick).toHaveBeenCalledTimes(1);
    });

    test('renders as submit button', () => {
        render(<FormButton type="submit">Submit Form</FormButton>);

        const button = screen.getByTestId('mock-button');
        expect(button).toHaveAttribute('type', 'submit');
    });
});
}

src/components/forms/FormButton/FormButton.tsx:
{
import React from 'react';
import { Button } from 'react-bootstrap';

interface FormButtonProps {
    type: 'submit' | 'button' | 'reset';
    className?: string;
    variant?: string;
    onClick?: () => void;
    children: React.ReactNode;
    inverted?: boolean;
}

const FormButton: React.FC<FormButtonProps> = ({
    type,
    className = '',
    variant = 'primary',
    onClick,
    children,
    inverted = false,
}) => {
    // Use inverted styles if specified
    const buttonVariant = inverted ? 'light' : variant;
    const buttonClasses = `${className} ${inverted ? 'text-dark' : ''}`;

    return (
        <Button
            variant={buttonVariant}
            type={type}
            className={`mb-3 ${buttonClasses}`}
            onClick={onClick}
        >
            {children}
        </Button>
    );
};

export default FormButton;
}

src/components/forms/FormButton.tsx:
{
import React from 'react';
import { Button } from 'react-bootstrap';

interface FormButtonProps {
    type: 'submit' | 'button' | 'reset';
    className?: string;
    variant?: string;
    onClick?: () => void;
    children: React.ReactNode;
    inverted?: boolean;
}

const FormButton: React.FC<FormButtonProps> = ({
    type,
    className = '',
    variant = 'primary',
    onClick,
    children,
    inverted = false
}) => {
    // Use inverted styles if specified
    const buttonVariant = inverted ? 'light' : variant;
    const buttonClasses = `${className} ${inverted ? 'text-dark' : ''}`;
    
    return (
        <Button
            variant={buttonVariant}
            type={type}
            className={`mb-2 ${buttonClasses}`}
            onClick={onClick}
        >
            {children}
        </Button>
    );
};

export default FormButton;
}

src/components/forms/FormContainer/FormContainer.test.tsx:
{
import React from 'react';
import { render, screen } from '@testing-library/react';
import FormContainer from './FormContainer';

// Mock react-bootstrap components
jest.mock('react-bootstrap', () => ({
    Container: ({
        children,
        fluid,
        className,
    }: {
        children: React.ReactNode;
        fluid: boolean;
        className: string;
    }) => (
        <div data-testid="mock-container" data-fluid={fluid} className={className}>
            {children}
        </div>
    ),
    Row: ({ children, className }: { children: React.ReactNode; className: string }) => (
        <div data-testid="mock-row" className={className}>
            {children}
        </div>
    ),
    Col: ({
        children,
        xs,
        className,
    }: {
        children: React.ReactNode;
        xs: number;
        className: string;
    }) => (
        <div data-testid="mock-col" data-xs={xs} className={className}>
            {children}
        </div>
    ),
}));

describe('FormContainer Component', () => {
    test('renders container with fluid and proper classes', () => {
        const testContent = <div data-testid="test-content">Test Content</div>;
        render(<FormContainer>{testContent}</FormContainer>);

        const container = screen.getByTestId('mock-container');
        expect(container).toHaveAttribute('data-fluid', 'true');
        expect(container).toHaveClass('form-container');
        expect(container).toHaveClass('d-flex');
        expect(container).toHaveClass('align-items-center');
        expect(container).toHaveClass('justify-content-center');
        expect(container).toHaveClass('min-vh-100');
    });

    test('renders row with centered content', () => {
        render(
            <FormContainer>
                <div>Content</div>
            </FormContainer>
        );

        const row = screen.getByTestId('mock-row');
        expect(row).toHaveClass('justify-content-center');
    });

    test('renders column with proper xs value and classes', () => {
        render(
            <FormContainer>
                <div>Content</div>
            </FormContainer>
        );

        const col = screen.getByTestId('mock-col');
        expect(col).toHaveAttribute('data-xs', '12');
        expect(col).toHaveClass('d-flex');
        expect(col).toHaveClass('justify-content-center');
    });

    test('renders children inside the container structure', () => {
        const testContent = <div data-testid="test-content">Test Content</div>;
        render(<FormContainer>{testContent}</FormContainer>);

        expect(screen.getByTestId('test-content')).toBeInTheDocument();
        const col = screen.getByTestId('mock-col');
        expect(col).toContainElement(screen.getByTestId('test-content'));
    });
});
}

src/components/forms/FormContainer/FormContainer.tsx:
{
import React from 'react';
import { Container, Row, Col } from 'react-bootstrap';

interface FormContainerProps {
    children: React.ReactNode;
}

const FormContainer: React.FC<FormContainerProps> = ({ children }) => {
    return (
        <Container
            fluid
            className="form-container d-flex align-items-center justify-content-center min-vh-100 p-0"
        >
            <Row className="justify-content-center">
                <Col xs={12} className="d-flex justify-content-center">
                    {children}
                </Col>
            </Row>
        </Container>
    );
};

export default FormContainer;
}

src/components/forms/FormContainer.tsx:
{
import React from 'react';
import { Container, Row, Col } from 'react-bootstrap';

interface FormContainerProps {
    children: React.ReactNode;
}

const FormContainer: React.FC<FormContainerProps> = ({ children }) => {
    return (
        <Container fluid className="form-container d-flex align-items-center justify-content-center min-vh-100 p-0">
            <Row className="justify-content-center">
                <Col xs={12} className="d-flex justify-content-center">
                    {children}
                </Col>
            </Row>
        </Container>
    );
};

export default FormContainer;
}

src/components/forms/FormInput/FormInput.test.tsx:
{
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import FormInput from './FormInput';

// Mock react-bootstrap Form components
jest.mock('react-bootstrap', () => ({
    Form: {
        Group: ({
            children,
            controlId,
            className,
        }: {
            children: React.ReactNode;
            controlId: string;
            className: string;
        }) => (
            <div data-testid="form-group" data-control-id={controlId} className={className}>
                {children}
            </div>
        ),
        Control: ({
            type,
            placeholder,
            value,
            onChange,
            required,
            className,
        }: {
            type: string;
            placeholder: string;
            value: string;
            onChange: (e: any) => void;
            required: boolean;
            className: string;
        }) => (
            <input
                data-testid="form-control"
                type={type}
                placeholder={placeholder}
                value={value}
                onChange={onChange}
                required={required}
                className={className}
            />
        ),
    },
}));

describe('FormInput Component', () => {
    const defaultProps = {
        id: 'testInput',
        type: 'text',
        placeholder: 'Enter value',
        value: '',
        onChange: jest.fn(),
    };

    test('renders with default props', () => {
        render(<FormInput {...defaultProps} />);

        const formGroup = screen.getByTestId('form-group');
        const input = screen.getByTestId('form-control');

        expect(formGroup).toHaveAttribute('data-control-id', 'testInput');
        expect(input).toHaveAttribute('type', 'text');
        expect(input).toHaveAttribute('placeholder', 'Enter value');
        expect(input).toHaveAttribute('value', '');
        expect(input).not.toHaveAttribute('required');
        expect(input).toHaveClass('form-input');
    });

    test('renders as required input', () => {
        render(<FormInput {...defaultProps} required />);

        const input = screen.getByTestId('form-control');
        expect(input).toHaveAttribute('required');
    });

    test('applies custom class name', () => {
        render(<FormInput {...defaultProps} className="custom-class" />);

        const formGroup = screen.getByTestId('form-group');
        expect(formGroup).toHaveClass('custom-class');
    });

    test('renders with different input types', () => {
        const { rerender } = render(<FormInput {...defaultProps} type="email" />);

        expect(screen.getByTestId('form-control')).toHaveAttribute('type', 'email');

        rerender(<FormInput {...defaultProps} type="password" />);
        expect(screen.getByTestId('form-control')).toHaveAttribute('type', 'password');
    });

    test('calls onChange when input changes', () => {
        render(<FormInput {...defaultProps} />);

        const input = screen.getByTestId('form-control');
        fireEvent.change(input, { target: { value: 'new value' } });

        expect(defaultProps.onChange).toHaveBeenCalledTimes(1);
    });

    test('displays current value', () => {
        render(<FormInput {...defaultProps} value="current value" />);

        const input = screen.getByTestId('form-control');
        expect(input).toHaveAttribute('value', 'current value');
    });
});
}

src/components/forms/FormInput/FormInput.tsx:
{
import React from 'react';
import { Form } from 'react-bootstrap';

interface FormInputProps {
    id: string;
    type: string;
    placeholder: string;
    value: string;
    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    required?: boolean;
    className?: string;
}

const FormInput: React.FC<FormInputProps> = ({
    id,
    type,
    placeholder,
    value,
    onChange,
    required = false,
    className = '',
}) => {
    return (
        <Form.Group controlId={id} className={`${className}`}>
            <Form.Control
                type={type}
                placeholder={placeholder}
                value={value}
                onChange={onChange}
                required={required}
                className="form-input"
            />
        </Form.Group>
    );
};

export default FormInput;
}

src/components/forms/FormInput.tsx:
{
import React from 'react';
import { Form } from 'react-bootstrap';

interface FormInputProps {
    id: string;
    type: string;
    placeholder: string;
    value: string;
    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    required?: boolean;
}

const FormInput: React.FC<FormInputProps> = ({
    id,
    type,
    placeholder,
    value,
    onChange,
    required = false
}) => {
    return (
        <Form.Group controlId={id} className="w-100 mb-2">
            <Form.Control
                type={type}
                placeholder={placeholder}
                value={value}
                onChange={onChange}
                required={required}
                className="form-input"
            />
        </Form.Group>
    );
};

export default FormInput;
}

src/components/forms/FormRow/FormRow.test.tsx:
{
import React from 'react';
import { render, screen } from '@testing-library/react';
import FormRow from './FormRow';

// Mock react-bootstrap components
jest.mock('react-bootstrap', () => ({
    Row: ({ children, className }: { children: React.ReactNode; className: string }) => (
        <div data-testid="mock-row" className={className}>
            {children}
        </div>
    ),
    Col: ({ children, className }: { children: React.ReactNode; className: string }) => (
        <div data-testid="mock-col" className={className}>
            {children}
        </div>
    ),
}));

describe('FormRow Component', () => {
    test('renders with proper row classes', () => {
        render(
            <FormRow>
                <div>Child 1</div>
            </FormRow>
        );

        const row = screen.getByTestId('mock-row');
        expect(row).toHaveClass('form-row');
        expect(row).toHaveClass('mb-2');
        expect(row).toHaveClass('w-100');
        expect(row).toHaveClass('mx-0');
    });

    test('wraps each child in a column', () => {
        render(
            <FormRow>
                <div>Child 1</div>
                <div>Child 2</div>
                <div>Child 3</div>
            </FormRow>
        );

        // Check that we have 3 columns
        const cols = screen.getAllByTestId(/mock-col/);
        expect(cols).toHaveLength(3);

        // Check each column has px-0 class
        cols.forEach(col => {
            expect(col).toHaveClass('px-0');
        });
    });

    test('handles single child correctly', () => {
        render(
            <FormRow>
                <div data-testid="single-child">Single Child</div>
            </FormRow>
        );

        const cols = screen.getAllByTestId(/mock-col/);
        expect(cols).toHaveLength(1);
        expect(screen.getByTestId('single-child')).toBeInTheDocument();
    });

    test('renders children correctly', () => {
        render(
            <FormRow>
                <div data-testid="child-1">Child 1</div>
                <div data-testid="child-2">Child 2</div>
            </FormRow>
        );

        expect(screen.getByTestId('child-1')).toBeInTheDocument();
        expect(screen.getByTestId('child-2')).toBeInTheDocument();
    });
});
}

src/components/forms/FormRow/FormRow.tsx:
{
import React from 'react';
import { Row, Col } from 'react-bootstrap';

interface FormRowProps {
    children: React.ReactNode;
}

const FormRow: React.FC<FormRowProps> = ({ children }) => {
    return (
        <Row className="form-row mb-2 w-100 mx-0">
            {React.Children.map(children, (child, index) => (
                <Col className="px-0" key={index}>
                    {child}
                </Col>
            ))}
        </Row>
    );
};

export default FormRow;
}

src/components/Gallery.tsx:
{
import React from 'react';
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import GalleryCard from './cards/galleryCard/GalleryCard';
import OrganizationCard from './OrganizationCard';

interface GalleryProps {
    items: any[];
    type?: 'organization' | 'event' | 'photo';
    useNewCard?: boolean;
}
const Gallery: React.FC<GalleryProps> = ({ 
    items, 
    type = 'organization',
    useNewCard = true 
}) => {
    return (
        <Container fluid className="py-4">
            <Row className="g-4">
                {items.map((item) => (
                    <Col key={item.id} xs={12} sm={6} md={4} lg={4} className="d-flex justify-content-center">
                        {useNewCard ? (
                            <GalleryCard 
                                item={item} 
                                className={`${type}-card`} 
                            />
                        ) : (
                            <OrganizationCard index={item.id} />
                        )}
                    </Col>
                ))}
            </Row>
        </Container>
    );
};

export default Gallery;
}

src/components/navButton/NavButton.test.tsx:
{
import React from 'react';
import { fireEvent, screen } from '@testing-library/react';
import NavButton from './NavButton';
import { renderWithRouter } from '../../utils/test-utils';

jest.mock('react-bootstrap', () => ({
    Button: ({ 
        children, 
        variant, 
        className, 
        onClick 
    }: { 
        children: React.ReactNode, 
        variant: string, 
        className: string, 
        onClick: () => void 
    }) => (
        <button 
            data-testid="mock-button" 
            data-variant={variant} 
            className={className}
            onClick={onClick}
        >
            {children}
        </button>
    )
}));

jest.mock('react-bootstrap-icons', () => ({
    ArrowLeft: () => <span data-testid="arrow-left-icon" />
}));

const mockNavigate = jest.fn();
jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    useNavigate: () => mockNavigate
}));

describe('BackButton Component', () => {
    beforeEach(() => {
        mockNavigate.mockClear();
    });

    test('renders with default props', () => {
        renderWithRouter(<NavButton />);
        
        const button = screen.getByTestId('mock-button');
        expect(button).toHaveTextContent('Back');
        expect(button).toHaveAttribute('data-variant', 'primary');
    });

    test('renders with custom text', () => {
        renderWithRouter(<NavButton>Go Home</NavButton>);
        
        const button = screen.getByTestId('mock-button');
        expect(button).toHaveTextContent('Go Home');
    });

    test('applies custom class names', () => {
        renderWithRouter(<NavButton className="custom-class">Back</NavButton>);
        
        const button = screen.getByTestId('mock-button');
        expect(button).toHaveClass('custom-class');
    });

    test('applies custom variant', () => {
        renderWithRouter(<NavButton variant="outline-dark">Back</NavButton>);
        
        const button = screen.getByTestId('mock-button');
        expect(button).toHaveAttribute('data-variant', 'outline-dark');
    });

    test('navigates to specified route when clicked', () => {
        const { rerender } = renderWithRouter(<NavButton to="/dashboard">Back to dashboard</NavButton>);
        
        const button = screen.getByTestId('mock-button');
        fireEvent.click(button);
        
        expect(mockNavigate).toHaveBeenCalledWith('/dashboard');
        
        mockNavigate.mockClear(); 
        rerender(<NavButton>Back</NavButton>);
        
        const defaultButton = screen.getByTestId('mock-button');
        fireEvent.click(defaultButton);
        
        expect(mockNavigate).toHaveBeenCalledWith('/');
    });
});
}

src/components/navButton/NavButton.tsx:
{
import React from 'react';
import { Button } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';

interface BackButtonProps {
    to?: string;
    className?: string;
    variant?: string;
    children?: React.ReactNode;
}

const BackButton: React.FC<BackButtonProps> = ({
    to = '/',
    className = '',
    variant = 'primary',
    children
}) => {
    const navigate = useNavigate();

    const handleClick = () => {
        navigate(to);
    };

    return (
        <Button 
            variant={variant}
            className={`${className}`}
            onClick={handleClick}
        >
            {children || 'Back'}
        </Button>
    );
};

export default BackButton;
}

src/components/OrganizationCard.tsx:
{
import React from 'react';
import Card from 'react-bootstrap/Card';
import Button from 'react-bootstrap/Button';

interface OrgCardProps {
    index: number;
}

const OrganizationCard: React.FC<OrgCardProps> = ({ index }) => {
    return (
        <Card className="mb-3">
            <Card.Img
                variant="top"
                src={`https://picsum.photos/200?random=${index}`}
                alt={`Random ${index}`}
            />
            <Card.Body>
                <Card.Title>Organization {index}</Card.Title>
                <Card.Text>
                    This is a short description of the organization. More details can be added here.
                </Card.Text>
                <Button variant="primary">Learn More</Button>
            </Card.Body>
        </Card>
    );
};

export default OrganizationCard;
}

src/components/routes/ProtectedRoute/ProtectedRoute.test.tsx:
{
import React from 'react';
import { render, screen } from '@testing-library/react';
import { MemoryRouter } from 'react-router-dom';
import ProtectedRoute from './ProtectedRoute';
import AuthContext, { AuthContextType, User } from '../../../context/AuthContext';

// Mock Navigate component
jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    Navigate: ({ to }: { to: string }) => <div data-testid="navigate" data-to={to} />,
}));

const MockChildComponent = () => <div data-testid="protected-child">Protected Content</div>;

describe('ProtectedRoute Component', () => {
    const mockUser: User = {
        id: '1',
        email: 'test@example.com',
        firstName: 'Test',
        lastName: 'User',
        role: 'user',
    };

    const renderComponent = (authContextValue: Partial<AuthContextType>) => {
        return render(
            <MemoryRouter initialEntries={['/']}>
                <AuthContext.Provider value={authContextValue as AuthContextType}>
                    <ProtectedRoute>
                        <MockChildComponent />
                    </ProtectedRoute>
                </AuthContext.Provider>
            </MemoryRouter>
        );
    };

    test('renders child component when user is authenticated', () => {
        const authContextValue: Partial<AuthContextType> = {
            user: mockUser,
            token: 'valid-token',
            setUser: jest.fn(),
            setToken: jest.fn(),
            logout: jest.fn(),
        };

        renderComponent(authContextValue);

        expect(screen.getByTestId('protected-child')).toBeInTheDocument();
        expect(screen.queryByTestId('navigate')).not.toBeInTheDocument();
    });

    test('redirects to login when user is not authenticated', () => {
        const authContextValue: Partial<AuthContextType> = {
            user: null,
            token: null,
            setUser: jest.fn(),
            setToken: jest.fn(),
            logout: jest.fn(),
        };

        renderComponent(authContextValue);

        expect(screen.queryByTestId('protected-child')).not.toBeInTheDocument();
        const navigate = screen.getByTestId('navigate');
        expect(navigate).toBeInTheDocument();
        expect(navigate).toHaveAttribute('data-to', '/login');
    });

    test('redirects to login when token is missing even if user exists', () => {
        const authContextValue: Partial<AuthContextType> = {
            user: mockUser,
            token: null, // Token is missing
            setUser: jest.fn(),
            setToken: jest.fn(),
            logout: jest.fn(),
        };

        renderComponent(authContextValue);

        expect(screen.queryByTestId('protected-child')).not.toBeInTheDocument();
        const navigate = screen.getByTestId('navigate');
        expect(navigate).toBeInTheDocument();
        expect(navigate).toHaveAttribute('data-to', '/login');
    });
});
}

src/components/routes/ProtectedRoute/ProtectedRoute.tsx:
{
import { JSX, useContext } from 'react';
import { Navigate } from 'react-router-dom';
import AuthContext from '../../../context/AuthContext';

interface ProtectedRouteProps {
    children: JSX.Element;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
    const authContext = useContext(AuthContext);

    if (!authContext || !authContext.token) {
        const storedToken = localStorage.getItem('token');
        if (!storedToken) {
            return <Navigate to="/login" replace />;
        }
        console.log('Token found in localStorage but not in context');
    }
    return children;
};

export default ProtectedRoute;
}

src/components/routes/ProtectedRoute.tsx:
{
import { JSX, useContext } from 'react';
import { Navigate } from 'react-router-dom';
import AuthContext from '../../context/AuthContext';

interface ProtectedRouteProps {
    children: JSX.Element;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
    const authContext = useContext(AuthContext);
    
    if (!authContext?.token) {
        // Redirect to login if there is no token
        return <Navigate to="/login" replace />;
    }
    
    return children;
};

export default ProtectedRoute;
}

src/context/AuthContext.tsx:
{
import { createContext } from 'react';

export interface User {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
    role: string;
}

export interface AuthContextType {
    user: User | null;
    token: string | null;
    setUser: (user: User | null) => void;
    setToken: (token: string | null) => void;
    logout: () => void;
}

// Create a default value for the context to avoid null checks
const defaultContext: AuthContextType = {
    user: null,
    token: null,
    setUser: () => {},
    setToken: () => {},
    logout: () => {},
};

const AuthContext = createContext<AuthContextType>(defaultContext);

export default AuthContext;
}

src/context/AuthProvider.tsx:
{
import { useState, useEffect, ReactNode } from 'react';
import AuthContext, { User } from './AuthContext';

const AuthProvider = ({ children }: { children: ReactNode }) => {
    const [user, setUser] = useState<User | null>(null);
    const [token, setToken] = useState<string | null>(null);
    const [isInitialized, setIsInitialized] = useState(false);

    useEffect(() => {
        const initializeAuth = () => {
            const storedUser = localStorage.getItem('user');
            const storedToken = localStorage.getItem('token');

            if (storedUser && storedToken) {
                try {
                    setUser(JSON.parse(storedUser));
                    setToken(storedToken);
                } catch (error) {
                    console.error('Error parsing stored user data:', error);
                    localStorage.removeItem('user');
                    localStorage.removeItem('token');
                }
            }

            setIsInitialized(true);
        };

        initializeAuth();
    }, []);

    const updateUser = (newUser: User | null) => {
        setUser(newUser);
        if (newUser) {
            localStorage.setItem('user', JSON.stringify(newUser));
        } else {
            localStorage.removeItem('user');
        }
    };

    const updateToken = (newToken: string | null) => {
        setToken(newToken);
        if (newToken) {
            localStorage.setItem('token', newToken);
        } else {
            localStorage.removeItem('token');
        }
    };

    const logout = () => {
        setUser(null);
        setToken(null);
        localStorage.removeItem('user');
        localStorage.removeItem('token');
    };

    if (!isInitialized) {
        // TODO: Add some loading state (?)
        return null;
    }

    return (
        <AuthContext.Provider
            value={{
                user,
                token,
                setUser: updateUser,
                setToken: updateToken,
                logout,
            }}
        >
            {children}
        </AuthContext.Provider>
    );
};

export default AuthProvider; 
}

src/context/AuthService.tsx:
{
import { noAuthInstance } from '../utils/axios';

export const registerUser = async (data: {
    email: string;
    password: string;
    firstName: string;
    lastName: string;
}) => {
    return noAuthInstance.post('/api/auth/register', data);
};

export const loginUser = async (data: { email: string; password: string }) => {
    return noAuthInstance.post('/api/auth/login', data);
};
}

src/context/OrgService.tsx:
{
import axiosInstance, { noAuthInstance } from '../utils/axios';

export interface Organization {
  id: string;
  name: string;
  description?: string;
  logoUrl?: string;
  PK: string;
  isPublic: boolean;
  createdAt: string;
  updatedAt: string;
  GSI1PK: string;
  GSI1SK: string;
  SK: string;
  createdBy: string;
  type: string;
}

export interface OrganizationsResponse {
  message: string;
  data: {
    organizations: Organization[];
  };
  lastEvaluatedKey: string | null;
}

export interface Event {
  id: string;
  title: string;
  description?: string;
  GSI2PK: string;
  GSI2SK: string;
  PK: string;
  SK: string;
  date: string;
  isPublic: boolean;
  createdAt: string;
  updatedAt: string;
  imageUrl?: string;
}

export interface EventsResponse {
  status: string;
  data: {
    events: Event[];
  };
  lastEvaluatedKey: string | null;
}

export const getPublicOrganizations = async (lastEvaluatedKey?: string, limit: number = 9) => {
  try {
    const response = await noAuthInstance.get<OrganizationsResponse>('/guests', {
      params: {
        lastEvaluatedKey,
        limit
      }
    });
    return response.data;
  } catch (error) {
    console.error('Error fetching public organizations:', error);
    throw error;
  }
};

export const getPublicOrganizationEvents = async (
  organizationId: string, 
  lastEvaluatedKey?: string, 
  limit: number = 9
) => {
  try {
    const response = await noAuthInstance.get<EventsResponse>(
      `/guests/organizations/${organizationId}/events`,
      {
        params: {
          lastEvaluatedKey,
          limit
        }
      }
    );
    return response.data;
  } catch (error) {
    console.error(`Error fetching events for organization ${organizationId}:`, error);
    throw error;
  }
};
}

src/main.tsx:
{
import 'bootstrap/dist/css/bootstrap.css';
import 'bootstrap-icons/font/bootstrap-icons.css';
import './styles/global.css'; 
import './styles/footer.css'; 
import './styles/auth.css'; 
import './styles/galleryCard.css'

import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';

import AuthProvider from './context/AuthProvider';

createRoot(document.getElementById('root')!).render(
    <StrictMode>
        <BrowserRouter>
            <AuthProvider>
                <App />
            </AuthProvider>
        </BrowserRouter>
    </StrictMode>
);
}

src/pages/Home.tsx:
{
import React, { useState } from 'react';
import { Col, Row } from 'react-bootstrap';
import { BellFill, PersonCircle } from 'react-bootstrap-icons';

import Gallery from '../components/Gallery';
import Sidebar from '../components/bars/SideBar';
import TopBar from '../components/bars/TopBar/TopBar';
import SearchBar from '../components/bars/SearchBar/SearchBar';
import NavButton from '../components/navButton/NavButton'

const items = [
  {

    id: "NAME",
    name: "name",
    description: "Some random description",
    logoUrl: "https://picsum.photos/300/200",
    PK: "ORG#NAME"
  },
  {

    id: "NAME",
    name: "name",
    description: "Some random description",
    logoUrl: "https://picsum.photos/300/200",
    PK: "ORG#NAME"
  },
  {

    id: "NAME",
    name: "name",
    description: "Some random description",
    logoUrl: "https://picsum.photos/300/200",
    PK: "ORG#NAME"
  },
  {

    id: "NAME",
    name: "name",
    description: "Some random description",
    logoUrl: "https://picsum.photos/300/200",
    PK: "ORG#NAME"
  },
  {

    id: "NAME",
    name: "name",
    description: "Some random description",
    logoUrl: "https://picsum.photos/300/200",
    PK: "ORG#NAME"
  },
  {

    id: "NAME",
    name: "name",
    description: "Some random description",
    logoUrl: "https://picsum.photos/300/200",
    PK: "ORG#NAME"
  },
  {

    id: "NAME",
    name: "name",
    description: "Some random description",
    logoUrl: "https://picsum.photos/300/200",
    PK: "ORG#NAME"
  },
  {

    id: "NAME",
    name: "name",
    description: "Some random description",
    logoUrl: "https://picsum.photos/300/200",
    PK: "ORG#NAME"
  },
  {

    id: "NAME",
    name: "name",
    description: "Some random description",
    logoUrl: "https://picsum.photos/300/200",
    PK: "ORG#NAME"
  },
];



const Home = () => {
    const [searchTerm, setSearchTerm] = useState('');

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        console.log('Search submitted:', searchTerm);
        // Implement your search logic here organizations
    };

    /* Components to be injected into the TopBar*/
    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search organizations..."
        />
    );

    /* Components to be injected into the TopBar*/
    const rightComponents = (
        <>
            <NavButton to='/register' variant="outline-light" className="mx-2 top-bar-element" >
            Register
            </NavButton>
            <NavButton to='/login' variant="outline-light" className="top-bar-element" >
            Login
            </NavButton>
            <BellFill className="text-light m-2 top-bar-element" size={24} />
            <PersonCircle className="text-light m-2 top-bar-element" size={24} />
        </>
    );

    return (
        <>
            <Row className="g-0">
                <Col md="auto">
                    <Sidebar />
                </Col>
                <Col style={{ flex: 1, marginLeft: '200px' }}>
                    <TopBar 
                        searchComponent={searchComponent}
                        rightComponents={rightComponents}
                    />
                    <div className="p-3">
                        <h1 className="mb-4">Organizations</h1>
                        <Gallery items={items} />
                    </div>
                </Col>
            </Row>
        </>
    );
};

export default Home;
}

src/pages/Login/Login.test.tsx:
{
import { fireEvent, screen, waitFor } from '@testing-library/react';
import Login from './Login';
import { loginUser } from '../../context/AuthService';
import { renderWithRouter } from '../../utils/test-utils';

// Mock AuthService
jest.mock('../../context/AuthService', () => ({
    loginUser: jest.fn(),
}));

// Mock Form components to expose the error state
jest.mock('../../components/forms/AuthForm/AuthForm', () => {
    return function MockAuthForm({ title, onSubmit, error, children }: any) {
        return (
            <div className="auth-form">
                <h1 className="auth-title">{title}</h1>
                {error && <div data-testid="error-message">{error}</div>}
                <form role="form" onSubmit={onSubmit}>
                    {children}
                </form>
            </div>
        );
    };
});

// Mock useNavigate
const mockNavigate = jest.fn();
jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    useNavigate: () => mockNavigate,
}));

describe('Login Component', () => {
    let consoleErrorMock: jest.SpyInstance;

    beforeEach(() => {
        consoleErrorMock = jest.spyOn(console, 'error').mockImplementation(() => {});
        mockNavigate.mockClear();
    });

    afterEach(() => {
        consoleErrorMock.mockRestore();
        jest.clearAllMocks();
    });

    test('renders form fields', () => {
        renderWithRouter(<Login />);

        expect(screen.getByPlaceholderText(/email/i)).toBeInTheDocument();
        expect(screen.getByPlaceholderText(/password/i)).toBeInTheDocument();
        expect(screen.getByRole('button', { name: /login/i })).toBeInTheDocument();
    });

    test('shows an error when fields are empty', async () => {
        renderWithRouter(<Login />);

        // Need to prevent the default form submission to allow the error check to work
        const form = screen.getByRole('form');
        fireEvent.submit(form);

        // Use waitFor instead of findByText to allow time for state updates
        await waitFor(() => {
            expect(screen.getByText(/please fill in all fields/i)).toBeInTheDocument();
        });
    });

    test('calls loginUser api on form submit', async () => {
        const mockResponse = {
            data: {
                data: {
                    token: 'test-token',
                    user: { id: 1, email: 'test@example.com' },
                },
            },
        };

        (loginUser as jest.Mock).mockResolvedValue(mockResponse);

        renderWithRouter(<Login />);
        const email = 'test@example.com';
        const password = '1234567890';

        // Mock the input fields
        const emailInput = screen.getByPlaceholderText(/email/i);
        const passwordInput = screen.getByPlaceholderText(/password/i);

        fireEvent.change(emailInput, { target: { value: email } });
        fireEvent.change(passwordInput, { target: { value: password } });

        // Submit the form directly
        const form = screen.getByRole('form');
        fireEvent.submit(form);

        await waitFor(() => {
            expect(loginUser).toHaveBeenCalledWith({
                email: email,
                password: password,
            });
        });

        await waitFor(() => {
            expect(mockNavigate).toHaveBeenCalledWith('/');
        });
    });

    test('shows error message on failed login', async () => {
        (loginUser as jest.Mock).mockRejectedValue(new Error('mocked error'));

        renderWithRouter(<Login />);

        const email = 'test@example.com';
        const password = '1234567890';

        // Mock the input fields
        const emailInput = screen.getByPlaceholderText(/email/i);
        const passwordInput = screen.getByPlaceholderText(/password/i);

        fireEvent.change(emailInput, { target: { value: email } });
        fireEvent.change(passwordInput, { target: { value: password } });

        // Submit the form directly
        const form = screen.getByRole('form');
        fireEvent.submit(form);

        await waitFor(() => {
            expect(screen.getByTestId('error-message')).toHaveTextContent(/login failed/i);
        });
    });
});
}

src/pages/Login/Login.tsx:
{
// import '../../styles/auth.css';
import AuthContext from '../../context/AuthContext';
import { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { loginUser } from '../../context/AuthService';
import { ArrowLeft } from 'react-bootstrap-icons';

import FormContainer from '../../components/forms/FormContainer/FormContainer';
import AuthForm from '../../components/forms/AuthForm/AuthForm';
import FormInput from '../../components/forms/FormInput/FormInput';
import FormButton from '../../components/forms/FormButton/FormButton';
import NavButton from '../../components/navButton/NavButton';

const Login: React.FC = () => {
    const context = useContext(AuthContext);
    const navigate = useNavigate();

    const [credentials, setCredentials] = useState({
        email: '',
        password: '',
    });

    const [error, setError] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { id, value } = e.target;
        setCredentials(prev => ({
            ...prev,
            [id.replace('form', '').toLowerCase()]: value,
        }));
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        const { email, password } = credentials;

        if (!email || !password) {
            setError('Please fill in all fields');
            return;
        }
        setError(null);

        try {
            const response = await loginUser({ email, password });
            const token = response.data.data.token;
            const user = response.data.data.user;

            localStorage.setItem('token', token);
            localStorage.setItem('user', JSON.stringify(user));

            context?.setToken(token);
            context?.setUser(user);
            navigate('/');
        } catch (error) {
            console.error(error);
            setError('Login Failed.');
        }
    };

    return (
        <FormContainer>
            <NavButton to="/" className='back-button'> 
              <ArrowLeft className="me-1" />
              Back to home 
            </NavButton>
            <AuthForm 
                title="PHOTOCOMP" 
                onSubmit={handleSubmit} 
                error={error}
            >
                <FormInput
                    id="formEmail"
                    type="email"
                    placeholder="Email"
                    value={credentials.email}
                    onChange={handleChange}
                    className="w-100 mb-3"
                    required
                />

                <FormInput
                    id="formPassword"
                    type="password"
                    placeholder="Password"
                    value={credentials.password}
                    onChange={handleChange}
                    className="w-100 mb-3"
                    required
                />

                <FormButton type="submit" variant="light">
                    Login
                </FormButton>

                <FormButton type="button" onClick={() => navigate('/register')}>
                    Don't have an account? Register
                </FormButton>
            </AuthForm>
        </FormContainer>
    );
};

export default Login;
}

src/pages/Login.tsx:
{
import '../styles/auth.css';
import AuthContext from '../context/AuthContext';
import { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { loginUser } from '../context/AuthService';

import FormContainer from '../components/forms/FormContainer';
import AuthForm from '../components/forms/AuthForm';
import FormInput from '../components/forms/FormInput';
import FormButton from '../components/forms/FormButton';

const Login: React.FC = () => {
    const context = useContext(AuthContext);
    const navigate = useNavigate();

    const [credentials, setCredentials] = useState({
        email: '',
        password: ''
    });

    const [error, setError] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { id, value } = e.target;
        setCredentials(prev => ({
            ...prev,
            [id.replace('form', '').toLowerCase()]: value
        }));
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        const { email, password } = credentials;

        if (!email || !password) {
            setError('Please fill in all fields');
            return;
        }
        setError(null);

        try {
            const response = await loginUser({ email, password });
            const token = response.data.data.token;
            const user = response.data.data.user;
            
            localStorage.setItem('token', token);
            localStorage.setItem('user', JSON.stringify(user));

            context?.setToken(token);
            context?.setUser(user);
            navigate('/');
        } catch (error) {
            console.error(error);
            setError('Login Failed.');
        }
    };

    return (
        <FormContainer>
            <AuthForm 
                title="PHOTOCOMP" 
                onSubmit={handleSubmit} 
                error={error}
            >
                <FormInput
                    id="formEmail"
                    type="email"
                    placeholder="Email"
                    value={credentials.email}
                    onChange={handleChange}
                    required
                />
                
                <FormInput
                    id="formPassword"
                    type="password"
                    placeholder="Password"
                    value={credentials.password}
                    onChange={handleChange}
                    required
                />

                <FormButton type="submit" variant="light">
                    Login
                </FormButton>
                
                <FormButton 
                    type="button" 
                    onClick={() => navigate('/register')}
                >
                    Don't have an account? Register
                </FormButton>
            </AuthForm>
        </FormContainer>
    );
};

export default Login;
}

src/pages/Register/Register.test.tsx:
{
import { fireEvent, screen, waitFor } from '@testing-library/react';
import Register from './Register';
import { registerUser } from '../../context/AuthService';
import { renderWithRouter } from '../../utils/test-utils';

jest.mock('../../context/AuthService', () => ({
    registerUser: jest.fn(),
}));

// Mock Form components to expose the error state
jest.mock('../../components/forms/AuthForm/AuthForm', () => {
    return function MockAuthForm({ title, onSubmit, error, children }: any) {
        return (
            <div className="auth-form">
                <h1 className="auth-title">{title}</h1>
                {error && <div data-testid="error-message">{error}</div>}
                <form role="form" onSubmit={onSubmit}>
                    {children}
                </form>
            </div>
        );
    };
});

const mockNavigate = jest.fn();
jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    useNavigate: () => mockNavigate,
}));

describe('Register Component', () => {
    let consoleErrorMock: jest.SpyInstance;

    beforeEach(() => {
        consoleErrorMock = jest.spyOn(console, 'error').mockImplementation(() => {});
        mockNavigate.mockClear();
    });

    afterEach(() => {
        consoleErrorMock.mockRestore();
        jest.clearAllMocks();
    });

    test('renders form fields', () => {
        renderWithRouter(<Register />);

        expect(screen.getByPlaceholderText(/email/i)).toBeInTheDocument();
        expect(screen.getByPlaceholderText(/password/i)).toBeInTheDocument();
        expect(screen.getByPlaceholderText(/first name/i)).toBeInTheDocument();
        expect(screen.getByPlaceholderText(/last name/i)).toBeInTheDocument();
        expect(screen.getByRole('button', { name: /register/i })).toBeInTheDocument();
    });

    test('shows an error when fields are empty', async () => {
        renderWithRouter(<Register />);

        // Submit the form directly
        const form = screen.getByRole('form');
        fireEvent.submit(form);

        await waitFor(() => {
            expect(screen.getByTestId('error-message')).toHaveTextContent(
                /please fill in all fields/i
            );
        });
    });

    test('calls registerUser api on form submit', async () => {
        const mockResponse = {
            data: {
                data: {
                    token: 'test-token',
                    user: { id: 1, email: 'test@example.com' },
                },
            },
        };

        (registerUser as jest.Mock).mockResolvedValue(mockResponse);

        renderWithRouter(<Register />);
        const email = 'test@example.com';
        const password = '1234567890';
        const firstName = 'John';
        const lastName = 'Doe';

        fireEvent.change(screen.getByPlaceholderText(/email/i), { target: { value: email } });
        fireEvent.change(screen.getByPlaceholderText(/password/i), { target: { value: password } });
        fireEvent.change(screen.getByPlaceholderText(/first name/i), {
            target: { value: firstName },
        });
        fireEvent.change(screen.getByPlaceholderText(/last name/i), {
            target: { value: lastName },
        });

        // Submit the form directly
        const form = screen.getByRole('form');
        fireEvent.submit(form);

        await waitFor(() => {
            expect(registerUser).toHaveBeenCalledWith({
                email: email,
                password: password,
                firstName: firstName,
                lastName: lastName,
            });
        });

        await waitFor(() => {
            expect(mockNavigate).toHaveBeenCalledWith('/');
        });
    });

    test('shows error message on failed registration', async () => {
        (registerUser as jest.Mock).mockRejectedValue(new Error('mocked error'));

        renderWithRouter(<Register />);

        const email = 'test@example.com';
        const password = '1234567890';
        const firstName = 'John';
        const lastName = 'Doe';

        fireEvent.change(screen.getByPlaceholderText(/email/i), { target: { value: email } });
        fireEvent.change(screen.getByPlaceholderText(/password/i), { target: { value: password } });
        fireEvent.change(screen.getByPlaceholderText(/first name/i), {
            target: { value: firstName },
        });
        fireEvent.change(screen.getByPlaceholderText(/last name/i), {
            target: { value: lastName },
        });

        // Submit the form directly
        const form = screen.getByRole('form');
        fireEvent.submit(form);

        await waitFor(() => {
            expect(screen.getByTestId('error-message')).toHaveTextContent(/registration failed/i);
        });
    });
});
}

src/pages/Register/Register.tsx:
{
// import '../../styles/auth.css';
import AuthContext from '../../context/AuthContext';
import { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { registerUser } from '../../context/AuthService';
import { ArrowLeft } from 'react-bootstrap-icons';

import FormContainer from '../../components/forms/FormContainer/FormContainer';
import AuthForm from '../../components/forms/AuthForm/AuthForm';
import FormInput from '../../components/forms/FormInput/FormInput';
import FormButton from '../../components/forms/FormButton/FormButton';
import FormRow from '../../components/forms/FormRow/FormRow';
import NavButton from '../../components/navButton/NavButton';

const Register: React.FC = () => {
    const context = useContext(AuthContext);
    const navigate = useNavigate();

    const [userData, setUserData] = useState({
        email: '',
        password: '',
        firstName: '',
        lastName: '',
    });

    const [error, setError] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { id, value } = e.target;
        setUserData(prev => ({
            ...prev,
            [id.replace('form', '')]: value,
        }));
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        const { email, password, firstName, lastName } = userData;

        if (!email || !password || !firstName || !lastName) {
            setError('Please fill in all fields');
            return;
        }
        setError(null);

        try {
            const response = await registerUser({ email, password, firstName, lastName });
            const token = response.data.data.token;
            const user = response.data.data.user;

            localStorage.setItem('token', token);
            localStorage.setItem('user', JSON.stringify(user));

            context?.setToken(token);
            context?.setUser(user);
            navigate('/');
        } catch (error) {
            console.error(error);
            setError('Registration Failed.');
        }
    };

    return (
        <FormContainer>
            <NavButton to="/" className='back-button'> 
              <ArrowLeft className="me-1" />
              Back to home 
            </NavButton>
            <AuthForm 
                title="PHOTOCOMP" 
                onSubmit={handleSubmit} 
                error={error}
            >
                <FormRow>
                    <FormInput
                        id="formfirstName"
                        type="text"
                        placeholder="First Name"
                        value={userData.firstName}
                        onChange={handleChange}
                        required
                        className="mb-2"
                    />
                    <FormInput
                        id="formlastName"
                        type="text"
                        placeholder="Last Name"
                        value={userData.lastName}
                        onChange={handleChange}
                        required
                        className="mb-2"
                    />
                </FormRow>

                <FormInput
                    id="formemail"
                    type="email"
                    placeholder="Email"
                    value={userData.email}
                    onChange={handleChange}
                    required
                    className="w-100 mb-3"
                />

                <FormInput
                    id="formpassword"
                    type="password"
                    placeholder="Password"
                    value={userData.password}
                    onChange={handleChange}
                    required
                    className="w-100 mb-3"
                />

                <FormButton type="submit" variant="light" className="w-100">
                    Register
                </FormButton>

                <FormButton type="button" onClick={() => navigate('/login')} className="w-100">
                    Already have an account? Login
                </FormButton>
            </AuthForm>
        </FormContainer>
    );
};

export default Register;
}

src/pages/Register.tsx:
{
import '../styles/auth.css';
import AuthContext from '../context/AuthContext';
import { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { registerUser } from '../context/AuthService';

// Import our custom components
import FormContainer from '../components/forms/FormContainer';
import AuthForm from '../components/forms/AuthForm';
import FormInput from '../components/forms/FormInput';
import FormButton from '../components/forms/FormButton';

const Register: React.FC = () => {
    const context = useContext(AuthContext);
    const navigate = useNavigate();

    const [userData, setUserData] = useState({
        email: '',
        password: '',
        username: '',
        firstName: '',
        lastName: ''
    });

    const [error, setError] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { id, value } = e.target;
        setUserData(prev => ({
            ...prev,
            [id.replace('form', '').toLowerCase()]: value
        }));
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        const { email, password, username, firstName, lastName } = userData;

        if (!email || !password || !username || !firstName || !lastName) {
            setError('Please fill in all fields');
            return;
        }
        setError(null);

        try {
            const response = await registerUser({ email, password, username, firstName, lastName });
            const token = response.data.data.token;
            const user = response.data.data.user;
            
            localStorage.setItem('token', token);
            localStorage.setItem('user', JSON.stringify(user));

            context?.setToken(token);
            context?.setUser(user);
            navigate('/');
        } catch (error) {
            console.error(error);
            setError('Registration Failed.');
        }
    };

    return (
        <FormContainer>
            <AuthForm 
                title="PHOTOCOMP" 
                onSubmit={handleSubmit} 
                error={error}
            >
                <FormInput
                    id="formEmail"
                    type="email"
                    placeholder="Email"
                    value={userData.email}
                    onChange={handleChange}
                    required
                />
                
                <FormInput
                    id="formPassword"
                    type="password"
                    placeholder="Password"
                    value={userData.password}
                    onChange={handleChange}
                    required
                />

                <FormInput
                    id="formUsername"
                    type="text"
                    placeholder="Username"
                    value={userData.username}
                    onChange={handleChange}
                    required
                />

                <FormInput
                    id="formFirstName"
                    type="text"
                    placeholder="First Name"
                    value={userData.firstName}
                    onChange={handleChange}
                    required
                />

                <FormInput
                    id="formLastName"
                    type="text"
                    placeholder="Last Name"
                    value={userData.lastName}
                    onChange={handleChange}
                    required
                />

                <FormButton type="submit" variant="light">
                    Register
                </FormButton>
                
                <FormButton 
                    type="button" 
                    onClick={() => navigate('/login')}
                >
                    Already have an account? Login
                </FormButton>
            </AuthForm>
        </FormContainer>
    );
};

export default Register;
}

src/types/images.d.ts:
{
// src/types/images.d.ts
declare module '*.png' {
    const value: string;
    export default value;
}
}

src/utils/axios.tsx:
{
import axios from 'axios';

const BASE_URL = process.env.BASE_URL;

const AXIOS_DEFAULTS = {
    baseURL: BASE_URL,
    headers: {
        'Content-Type': 'application/json',
    },
};

export const noAuthInstance = axios.create(AXIOS_DEFAULTS);

const axiosInstance = axios.create(AXIOS_DEFAULTS);

axiosInstance.interceptors.request.use(
    config => {
        const token = localStorage.getItem('token');
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
    },
    error => Promise.reject(error)
);

axiosInstance.interceptors.response.use(
    response => response,
    error => {
        console.error('API error:', error);
        return Promise.reject(error);
    }
);

export default axiosInstance;
}

src/utils/test-utils.tsx:
{
import React, { ReactElement } from 'react';
import { render, RenderOptions } from '@testing-library/react';
import { MemoryRouter } from 'react-router-dom';

// Mock AuthContext
import AuthContext from '../context/AuthContext';

const mockAuthContext = {
    user: null,
    token: null,
    setUser: jest.fn(),
    setToken: jest.fn(),
    logout: jest.fn(),
};

interface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {
    route?: string;
    authContext?: typeof mockAuthContext;
}

/**
 * Custom render function that wraps components with MemoryRouter and AuthContext
 *
 * Used to allow components to route in the tests in the case a component uses
 * react-router-dom with some auth context (protected routes).
 *
 */
export function renderWithRouter(
    ui: ReactElement,
    { route = '/', authContext = mockAuthContext, ...renderOptions }: CustomRenderOptions = {}
) {
    return render(
        <MemoryRouter initialEntries={[route]}>
            <AuthContext.Provider value={authContext}>{ui}</AuthContext.Provider>
        </MemoryRouter>,
        renderOptions
    );
}
}

src/vite-env.d.ts:
{
/// <reference types="vite/client" />
declare module '*.png';
}

tests/__mocks__/fileMock.js:
{
// tests/__mocks__/fileMock.js
module.exports = 'test-file-stub';
}

