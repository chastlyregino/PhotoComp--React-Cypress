./tsconfig.json:
{
{
    "compilerOptions": {
        "jsx": "react-jsx",
        "esModuleInterop": true,
        "target": "ES2020",
        "module": "ESNext",
        "lib": ["ES2020", "DOM", "DOM.Iterable"],
        "strict": true,
        "skipLibCheck": true,
        "moduleResolution": "bundler",
        "isolatedModules": true,
        "noEmit": true
    },
    "include": ["src", "tests/__mocks__/fileMock.js"],
    "references": [
        { "path": "./tsconfig.jest.json" },
        { "path": "./tsconfig.app.json" },
        { "path": "./tsconfig.node.json" }
    ]
}
}

./README.md:
{
# PhotoComp--React-Cypress
Would hold PhotoComp's Frontend Development

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```

}

./package.json:
{
{
    "name": "photocomp-frontend",
    "private": true,
    "version": "0.0.0",
    "type": "module",
    "scripts": {
        "dev": "vite",
        "test": "jest",
        "coverage": "jest --coverage",
        "build": "tsc -b && vite build",
        "lint": "eslint .",
        "preview": "vite preview",
        "format": "prettier . --write",
        "cypress:open": "cypress open --config-file cypress-config.ts",
        "cypress:run": "cypress run --config-file cypress-config.ts"
    },
    "dependencies": {
        "@popperjs/core": "^2.11.8",
        "axios": "^1.8.4",
        "bootstrap": "^5.3.3",
        "bootstrap-icons": "^1.11.3",
        "photocomp-frontend": "file:",
        "react": "^19.0.0",
        "react-bootstrap": "^2.10.9",
        "react-bootstrap-icons": "^1.11.5",
        "react-dom": "^19.0.0"
    },
    "devDependencies": {
        "@eslint/js": "^9.21.0",
        "@testing-library/dom": "^10.4.0",
        "@testing-library/jest-dom": "^6.6.3",
        "@testing-library/react": "^16.2.0",
        "@types/jest": "^29.5.14",
        "@types/react": "^19.0.12",
        "@types/react-dom": "^19.0.4",
        "@vitejs/plugin-react": "^4.3.4",
        "cypress": "^14.2.0",
        "eslint": "^9.21.0",
        "eslint-plugin-react-hooks": "^5.1.0",
        "eslint-plugin-react-refresh": "^0.4.19",
        "globals": "^15.15.0",
        "identity-obj-proxy": "^3.0.0",
        "jest": "^29.7.0",
        "jest-environment-jsdom": "^29.7.0",
        "prettier": "^3.5.3",
        "react-router-dom": "^7.4.1",
        "sass": "^1.86.0",
        "ts-jest": "^29.3.0",
        "ts-node": "^10.9.2",
        "typescript": "~5.7.2",
        "typescript-eslint": "^8.24.1",
        "vite": "^6.2.0"
    },
    "overrides": {
        "@cypress/react18": {
            "@types/react-dom": "$@types/react-dom"
        }
    }
}
}

./cypress.config.ts:
{
import { defineConfig } from 'cypress';

export default defineConfig({
    e2e: {
        baseUrl: 'http://localhost:5173',
        setupNodeEvents(on, config) {
            // implement node event listeners here
        },
    },
    component: {
        devServer: {
            framework: 'react',
            bundler: 'vite',
        },
        indexHtmlFile: 'cypress/support/component-index.html',
        setupNodeEvents(on, config) {
            // implement node event listeners here
        },
    },
});
}

./jest.config.ts:
{
import type { Config } from '@jest/types';

const config: Config.InitialOptions = {
    testEnvironment: 'jsdom',
    preset: 'ts-jest',
    moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json'],
    transform: {
        '^.+\\.tsx?$': 'ts-jest',
    },
    setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
    moduleNameMapper: {
        '\\.(css|less|sass|scss)$': 'identity-obj-proxy',
        '\\.(gif|ttf|eot|svg|png)$': '<rootDir>/tests/__mocks__/fileMock.js',
    },
};

export default config;
}

./jest.setup.ts:
{
import '@testing-library/jest-dom';

// Add TextEncoder polyfill
if (typeof global.TextEncoder === 'undefined') {
    const { TextEncoder, TextDecoder } = require('util');
    global.TextEncoder = TextEncoder;
    global.TextDecoder = TextDecoder;
}
}

./eslint.config.js:
{
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
    { ignores: ['dist'] },
    {
        extends: [js.configs.recommended, ...tseslint.configs.recommended],
        files: ['**/*.{ts,tsx}'],
        languageOptions: {
            ecmaVersion: 2020,
            globals: globals.browser,
        },
        plugins: {
            'react-hooks': reactHooks,
            'react-refresh': reactRefresh,
        },
        rules: {
            ...reactHooks.configs.recommended.rules,
            'react-refresh/only-export-components': ['warn', { allowConstantExport: true }],
            '@typescript-eslint/no-explicit-any': 'off',
            '@typescript-eslint/no-empty-object-type': 'off',
        },
    }
);
}

./index.html:
{
<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <link rel="icon" type="image/svg+xml" href="/vite.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>PhotoComp</title>
    </head>

    <body>
        <div id="root"></div>
        <script type="module" src="/src/main.tsx"></script>
    </body>
</html>
}

./vite.config.ts:
{
import { defineConfig, loadEnv } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig(({ mode }) => {
    const env = loadEnv(mode, process.cwd(), '');
    return {
        plugins: [react()],
        define: {
            'process.env': env,
        },
        test: {
            globals: true,
            environment: 'jsdom',
            alias: {
                '^.+\\.(jpg|jpeg|png|gif|svg)$': '/tests/__mocks__/fileMock.ts',
            },
        },
    };
});
}

./tsconfig.app.json:
{
{
    "compilerOptions": {
        "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
        "target": "ES2020",
        "useDefineForClassFields": true,
        "lib": ["ES2020", "DOM", "DOM.Iterable"],
        "module": "ESNext",
        "skipLibCheck": true,

        /* Bundler mode */
        "moduleResolution": "bundler",
        "allowImportingTsExtensions": true,
        "isolatedModules": true,
        "moduleDetection": "force",
        "noEmit": true,
        "jsx": "react-jsx",

        /* Linting */
        "strict": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noFallthroughCasesInSwitch": true,
        "noUncheckedSideEffectImports": true
    },
    "include": ["src", "tests/__mocks__/fileMock.js"]
}
}

./tsconfig.jest.json:
{
{
    "extends": "./tsconfig.json",
    "compilerOptions": {
        "target": "ES2020",
        "module": "CommonJS",
        "noEmit": true,
        "types": [
            "node",
            "cypress",
            "@testing-library/cypress",
            "jest",
            "@testing-library/jest-dom"
        ]
    },
    "include": ["src", "tests", "jest.setup.ts", "src/types"]
}
}

./tsconfig.node.json:
{
{
    "compilerOptions": {
        "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
        "target": "ES2022",
        "lib": ["ES2023"],
        "module": "ESNext",
        "skipLibCheck": true,

        /* Bundler mode */
        "moduleResolution": "bundler",
        "allowImportingTsExtensions": true,
        "isolatedModules": true,
        "moduleDetection": "force",
        "noEmit": true,

        /* Linting */
        "strict": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noFallthroughCasesInSwitch": true,
        "noUncheckedSideEffectImports": true
    },
    "include": ["vite.config.ts"]
}
}

src/App.tsx:
{
import { Routes, Route } from 'react-router-dom';

import Home from './pages/Home/Home';
import Register from './pages/Register/Register';
import Login from './pages/Login/Login';
import Members from './pages/Members/Members'
import Membership from './pages/Membership/Membership'
import Organizations from './pages/Organizations/ViewOrganizations';
import SingleEvents from './pages/Events/SingleEvents';
import Events from './pages/Events/ViewEvents';
import Photos from './pages/Photos/viewPhotos';
import ProtectedRoute from './components/routes/ProtectedRoute/ProtectedRoute';
import Footer from './components/bars/Footer/Footer';
import AccountSettings from './pages/AccountSettings/AccountSettings';
import CreateOrganization from './pages/Organizations/CreateOrganization/CreateOrganization';
import Logout from "./pages/Logout"
import UploadEventPhoto from './pages/Events/UploadEventPhoto';
import CreateEvent from './pages/Events/CreateEvent';



function App() {
    return (
        <>
            <Routes>
                <Route path="/register" element={<Register />} />
                <Route path="/login" element={<Login />} />
                <Route path="/logout" element={<Logout />} />
                <Route path="/" element={<Home />} />
                <Route path="/organizations" element={<Organizations />} />
                <Route
                    path="/organizations/:id/events"
                    element={<Events />}
                />
                <Route
                    path="/organizations/create"
                    element={
                        <ProtectedRoute>
                            <CreateOrganization />
                        </ProtectedRoute>
                    }
                />
                <Route path="/organizations/:id/events" element={<SingleEvents />} />
                <Route path="/account-settings" element={<AccountSettings />} />
                <Route
                    path="/organizations/:orgId/members/requests"
                    element={
                        <ProtectedRoute>
                            <Membership />
                        </ProtectedRoute>
                    }
                />
                <Route
                    path="/organizations/:id/events/create"
                    element={
                        <ProtectedRoute>
                            <CreateEvent />
                        </ProtectedRoute>
                    }
                />
                <Route
                    path="/organizations/:orgId/members"
                    element={
                        <ProtectedRoute>
                            <Members />
                        </ProtectedRoute>
                    }
                />
                <Route
                    path="/organizations/:id/events/:eid/photos"
                    element={
                        <ProtectedRoute>
                            <Photos />
                        </ProtectedRoute>
                    }
                />
                <Route
                    path="/organizations/:id/events/:eid/photos/upload"
                    element={
                        <ProtectedRoute>
                            <UploadEventPhoto />
                        </ProtectedRoute>
                    }
                />
            </Routes>
            <Footer />
        </>
    );
}

export default App;}

src/components/bars/Footer/Footer.test.tsx:
{
import React from 'react';
import { screen } from '@testing-library/react';
import Footer from './Footer';
import { renderWithRouter } from '../../../utils/test-utils';

jest.mock('react-bootstrap', () => ({
    Container: ({
        children,
        fluid,
        className,
    }: {
        children: React.ReactNode;
        fluid: boolean;
        className: string;
    }) => (
        <div data-testid="mock-container" data-fluid={fluid} className={className}>
            {children}
        </div>
    ),
}));

describe('Footer Component', () => {
    test('renders with copyright text', () => {
        renderWithRouter(<Footer />);

        const currentYear = new Date().getFullYear().toString();
        expect(screen.getByText(/all rights reserved/i)).toBeInTheDocument();
        expect(
            screen.getByText(new RegExp(`© ${currentYear} PHOTOCOMP`, 'i'))
        ).toBeInTheDocument();
    });

    test('renders content policy link', () => {
        renderWithRouter(<Footer />);

        const link = screen.getByText(/content policy/i);
        expect(link).toBeInTheDocument();
        expect(link.closest('a')).toHaveAttribute('href', '/content-policy');
    });

    test('applies custom class name', () => {
        renderWithRouter(<Footer className="custom-class" />);

        const footer = screen.getByRole('contentinfo');
        expect(footer).toHaveClass('custom-class');
        expect(footer).toHaveClass('footer');
    });

    test('renders inside a fluid container', () => {
        renderWithRouter(<Footer />);

        const container = screen.getByTestId('mock-container');
        expect(container).toHaveAttribute('data-fluid', 'true');
        expect(container).toHaveClass('d-flex');
    });
});
}

src/components/bars/Footer/Footer.tsx:
{
import React from 'react';
import { Container } from 'react-bootstrap';
import { Link } from 'react-router-dom';

interface FooterProps {
    className?: string;
}

const Footer: React.FC<FooterProps> = ({ className = '' }) => {
    return (
        <footer className={`footer bg-dark text-light py-3 text-center ${className}`}>
            <Container fluid className="d-flex justify-content-center align-items-center">
                <div className="d-flex gap-3 text-center">
                    <div className="footer-copyright">
                        © {new Date().getFullYear()} PHOTOCOMP. All rights reserved.
                    </div>
                    <div className="footer-links">
                        <Link to="/content-policy" className="text-light">
                            Content Policy
                        </Link>
                    </div>
                </div>
            </Container>
        </footer>
    );
};

export default Footer;
}

src/components/bars/SearchBar/SearchBar.test.tsx:
{
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import SearchBar from './SearchBar';

// Mock react-bootstrap components and icons
jest.mock('react-bootstrap', () => {
    const InputGroup: React.FC<{ children: React.ReactNode }> = ({ children }) => {
        return <div data-testid="mock-input-group">{children}</div>;
    };

    (InputGroup as any).Text = ({
        children,
        className,
    }: {
        children: React.ReactNode;
        className?: string;
    }) => {
        return (
            <div data-testid="mock-input-group-text" className={className}>
                {children}
            </div>
        );
    };

    const Form: React.FC<{
        children: React.ReactNode;
        onSubmit?: (e: React.FormEvent<HTMLFormElement>) => void;
        className?: string;
    }> = ({ children, onSubmit, className }) => {
        return (
            <form data-testid="mock-form" onSubmit={onSubmit} className={className}>
                {children}
            </form>
        );
    };

    (Form as any).Control = ({
        id,
        type,
        placeholder,
        value,
        onChange,
        className,
        'aria-label': ariaLabel,
    }: {
        id?: string;
        type?: string;
        placeholder?: string;
        value?: string;
        onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
        className?: string;
        'aria-label'?: string;
    }) => {
        return (
            <input
                data-testid="mock-form-control"
                id={id}
                type={type}
                placeholder={placeholder}
                value={value}
                onChange={onChange}
                className={className}
                aria-label={ariaLabel}
            />
        );
    };

    return {
        Form,
        InputGroup,
    };
});

jest.mock('react-bootstrap-icons', () => ({
    Search: () => <span data-testid="search-icon" />,
}));

describe('SearchBar Component', () => {
    const defaultProps = {
        value: '',
        onChange: jest.fn(),
    };

    test('renders with default props', () => {
        render(<SearchBar {...defaultProps} />);

        const form = screen.getByTestId('mock-form');
        expect(form).toHaveClass('search-bar-form');

        const input = screen.getByTestId('mock-form-control');
        expect(input).toHaveAttribute('placeholder', 'Search...');
        expect(input).toHaveAttribute('id', 'topBarSearch');
        expect(input).toHaveAttribute('type', 'text');
        expect(input).toHaveClass('form-input');
        expect(input).toHaveClass('search-input');

        const icon = screen.getByTestId('search-icon');
        expect(icon).toBeInTheDocument();
    });

    test('renders with custom placeholder', () => {
        render(<SearchBar {...defaultProps} placeholder="Find organizations..." />);

        const input = screen.getByTestId('mock-form-control');
        expect(input).toHaveAttribute('placeholder', 'Find organizations...');
    });

    test('applies custom class name', () => {
        render(<SearchBar {...defaultProps} className="custom-class" />);

        const form = screen.getByTestId('mock-form');
        expect(form).toHaveClass('custom-class');
        expect(form).toHaveClass('search-bar-form');
    });

    test('applies custom id', () => {
        render(<SearchBar {...defaultProps} id="customSearchId" />);

        const input = screen.getByTestId('mock-form-control');
        expect(input).toHaveAttribute('id', 'customSearchId');
    });

    test('calls onChange when input changes', () => {
        const handleChange = jest.fn();
        render(<SearchBar value="" onChange={handleChange} />);

        const input = screen.getByTestId('mock-form-control');
        fireEvent.change(input, { target: { value: 'search term' } });

        expect(handleChange).toHaveBeenCalledTimes(1);
    });

    test('calls onSubmit when form is submitted', () => {
        const handleSubmit = jest.fn(e => e.preventDefault());
        render(<SearchBar value="" onChange={jest.fn()} onSubmit={handleSubmit} />);

        const form = screen.getByTestId('mock-form');
        fireEvent.submit(form);

        expect(handleSubmit).toHaveBeenCalledTimes(1);
    });

    test('displays current value', () => {
        render(<SearchBar value="test search" onChange={jest.fn()} />);

        const input = screen.getByTestId('mock-form-control');
        expect(input).toHaveAttribute('value', 'test search');
    });
});
}

src/components/bars/SearchBar/SearchBar.tsx:
{
import React from 'react';
import { Form, InputGroup } from 'react-bootstrap';
import { Search } from 'react-bootstrap-icons';

interface SearchBarProps {
    placeholder?: string;
    value: string;
    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    onSubmit?: (e: React.FormEvent<HTMLFormElement>) => void;
    className?: string;
    id?: string;
}

const SearchBar: React.FC<SearchBarProps> = ({
    placeholder = 'Search...',
    value,
    onChange,
    onSubmit,
    className = '',
    id = 'topBarSearch',
}) => {
    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (onSubmit) {
            onSubmit(e);
        }
    };

    return (
        <Form onSubmit={handleSubmit} className={`search-bar-form ${className}`}>
            <InputGroup>
                <Form.Control
                    id={id}
                    type="text"
                    placeholder={placeholder}
                    value={value}
                    onChange={onChange}
                    className="form-input bg-dark border-dark text-light search-input"
                    aria-label="Search"
                />
                <InputGroup.Text className="bg-dark border-dark text-light">
                    <Search />
                </InputGroup.Text>
            </InputGroup>
        </Form>
    );
};

export default SearchBar;
}

src/components/bars/SideBar/SideBar.test.tsx:
{
import React from 'react';
import { render, screen } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom'; // Import BrowserRouter
import Sidebar from './SideBar';

// Wrap the component with BrowserRouter in render function
const renderWithRouter = (ui: React.ReactElement) => {
    return render(<BrowserRouter>{ui}</BrowserRouter>); // Render with BrowserRouter
};

// Test for Sidebar navigation links
describe('Sidebar Component', () => {
    // Test for image
    it('renders image with alt text', () => {
        renderWithRouter(<Sidebar />); // Use renderWithRouter to wrap Sidebar
        const img = screen.getByAltText('Logo') as HTMLImageElement;
        expect(img).toBeInTheDocument();
        expect(img.src).toContain('test-file-stub'); // Match the mocked path, not 'mocked-image-path'
    });

    it('renders sidebar with nav links', () => {
        renderWithRouter(<Sidebar />);

        // Check navigation links
        expect(screen.getByText('Home')).toBeInTheDocument();
        expect(screen.getByText('Organizations')).toBeInTheDocument();
        expect(screen.getByText('Events')).toBeInTheDocument();
        expect(screen.getByText('Photos')).toBeInTheDocument();
    });

    it('renders toggle button', () => {
        renderWithRouter(<Sidebar />);
        const toggle = screen.getByRole('button');
        expect(toggle).toBeInTheDocument();
        expect(toggle).toHaveAttribute('aria-controls', 'responsive-navbar-nav');
    });
});
}

src/components/bars/SideBar/SideBar.tsx:
{
import React from 'react';
import { Navbar, Nav } from 'react-bootstrap';
import * as icon from 'react-bootstrap-icons';
import { NavLink, useParams } from 'react-router-dom';
import logo from '../../../assets/PhotoCompLogo.png';

const Sidebar: React.FC = () => {
    const { id, eid } = useParams();
    return (
        <Navbar
            collapseOnSelect
            data-bs-theme="dark"
            bg="dark"
            variant="dark"
            className="flex-column sidebar"
        >
            <Navbar.Brand className="mx-auto sidebar-brand">
                <img src={logo} alt="Logo" />
            </Navbar.Brand>
            <Navbar.Toggle aria-controls="responsive-navbar-nav" />
            <Navbar.Collapse id="responsive-navbar-nav">
                <Nav className="flex-column">
                    <NavLink
                        to="/"
                        end
                        className={({ isActive }) =>
                            `nav-link d-flex align-items-center gap-2 sidebar-link ${
                                isActive ? 'active' : ''
                            }`
                        }
                    >
                        <icon.HouseDoor /> Home
                    </NavLink>

                    <NavLink
                        to="/organizations"
                        end
                        className={({ isActive }) =>
                            `nav-link d-flex align-items-center gap-2 sidebar-link ${
                                isActive ? 'active' : ''
                            }`
                        }
                    >
                        <icon.Grid3x3Gap /> Organizations
                    </NavLink>

                    <NavLink
                        to="/events"
                        className={({ isActive }) =>
                            `nav-link d-flex align-items-center gap-2 sidebar-link ${
                                isActive ? 'active' : ''
                            }`
                        }
                    >
                        <icon.Window /> Events
                    </NavLink>

                    <NavLink
                        to={`/organizations/${id || `:id`}/events/${eid || `:eid`}/photos`}
                        end
                        className={({ isActive }) =>
                            `nav-link d-flex align-items-center gap-2 sidebar-link ${
                                isActive ? 'active' : ''
                            }`
                        }
                    >
                        <icon.Images /> Photos
                    </NavLink>
                </Nav>
            </Navbar.Collapse>
        </Navbar>
    );
};

export default Sidebar;
}

src/components/bars/TopBar/TopBar.test.tsx:
{
import React from 'react';
import { render, screen } from '@testing-library/react';
import TopBar from './TopBar';

jest.mock('react-bootstrap', () => ({
    Navbar: ({
        children,
        bg,
        variant,
        className,
        'data-bs-theme': theme,
        expand,
    }: {
        children: React.ReactNode;
        bg: string;
        variant: string;
        className: string;
        'data-bs-theme': string;
        expand: string;
    }) => (
        <nav
            data-testid="mock-navbar"
            data-bg={bg}
            data-variant={variant}
            data-theme={theme}
            data-expand={expand}
            className={className}
        >
            {children}
        </nav>
    ),
    Container: ({ children, fluid }: { children: React.ReactNode; fluid: boolean }) => (
        <div data-testid="mock-container" data-fluid={fluid}>
            {children}
        </div>
    ),
    Row: ({ children, className }: { children: React.ReactNode; className: string }) => (
        <div data-testid="mock-row" className={className}>
            {children}
        </div>
    ),
    Col: ({
        children,
        xs,
        md,
        className,
    }: {
        children?: React.ReactNode;
        xs: number;
        md: number;
        className: string;
    }) => (
        <div data-testid="mock-col" data-xs={xs} data-md={md} className={className}>
            {children}
        </div>
    ),
}));

describe('TopBar Component', () => {
    const searchComponent = <div data-testid="search-component">Search Component</div>;
    const rightComponents = <div data-testid="right-components">Right Components</div>;

    test('renders with default props', () => {
        render(<TopBar />);

        const navbar = screen.getByTestId('mock-navbar');
        expect(navbar).toHaveAttribute('data-bg', 'dark');
        expect(navbar).toHaveAttribute('data-variant', 'dark');
        expect(navbar).toHaveAttribute('data-theme', 'dark');
        expect(navbar).toHaveClass('py-2');

        const container = screen.getByTestId('mock-container');
        expect(container).toHaveAttribute('data-fluid', 'true');

        const row = screen.getByTestId('mock-row');
        expect(row).toHaveClass('w-100');
        expect(row).toHaveClass('align-items-center');

        const cols = screen.getAllByTestId('mock-col');
        expect(cols).toHaveLength(2);
        expect(cols[0]).toHaveAttribute('data-xs', '12');
        expect(cols[0]).toHaveAttribute('data-md', '9');
        expect(cols[1]).toHaveAttribute('data-xs', '12');
        expect(cols[1]).toHaveAttribute('data-md', '3');
        expect(cols[1]).toHaveClass('d-flex');
        expect(cols[1]).toHaveClass('justify-content-end');
    });

    test('renders search component', () => {
        render(<TopBar searchComponent={searchComponent} />);

        expect(screen.getByTestId('search-component')).toBeInTheDocument();
    });

    test('renders right components', () => {
        render(<TopBar rightComponents={rightComponents} />);

        expect(screen.getByTestId('right-components')).toBeInTheDocument();
    });

    test('renders both search and right components', () => {
        render(<TopBar searchComponent={searchComponent} rightComponents={rightComponents} />);

        expect(screen.getByTestId('search-component')).toBeInTheDocument();
        expect(screen.getByTestId('right-components')).toBeInTheDocument();
    });

    test('applies custom class name', () => {
        render(<TopBar className="custom-class" />);

        const navbar = screen.getByTestId('mock-navbar');
        expect(navbar).toHaveClass('custom-class');
    });

    test('applies custom background and variant', () => {
        render(<TopBar bg="light" variant="light" />);

        const navbar = screen.getByTestId('mock-navbar');
        expect(navbar).toHaveAttribute('data-bg', 'light');
        expect(navbar).toHaveAttribute('data-variant', 'light');
        expect(navbar).toHaveAttribute('data-theme', 'light');
    });
});
}

src/components/bars/TopBar/TopBar.tsx:
{
import React from 'react';
import { Navbar, Container, Row, Col } from 'react-bootstrap';

interface TopBarProps {
    searchComponent?: React.ReactNode;
    rightComponents?: React.ReactNode;
    className?: string;
    bg?: string;
    variant?: string;
}

const TopBar: React.FC<TopBarProps> = ({
    searchComponent,
    rightComponents,
    className = '',
    bg = 'dark',
    variant = 'dark',
}) => {
    return (
        <Navbar
            bg={bg}
            variant={variant}
            className={`py-2 top-navbar position-sticky ${className}`}
            data-bs-theme={variant}
            expand="lg"
            style={{ top: 0, zIndex: 999 }}
        >
            <Container fluid>
                <Row className="w-100 align-items-center">
                    <Col xs={12} md={9} className="px-0">
                        {searchComponent}
                    </Col>
                    <Col xs={12} md={3} className="px-0 d-flex justify-content-end">
                        {rightComponents}
                    </Col>
                </Row>
            </Container>
        </Navbar>
    );
};

export default TopBar;
}

src/components/cards/galleryCard/GalleryCard.test.tsx:
{
import React from 'react';
import { fireEvent, screen } from '@testing-library/react';
import GalleryCard from './GalleryCard';
import { renderWithRouter } from '../../../utils/test-utils';

jest.mock('react-bootstrap', () => ({
    Card: ({
        children,
        className,
        onClick,
        style,
    }: {
        children: React.ReactNode;
        className: string;
        onClick: () => void;
        style: React.CSSProperties;
    }) => (
        <div data-testid="mock-card" className={className} onClick={onClick} style={style}>
            {children}
        </div>
    ),
}));

const mockNavigate = jest.fn();
jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    useNavigate: () => mockNavigate,
}));

describe('GalleryCard Component', () => {
    beforeEach(() => {
        mockNavigate.mockClear();
    });

    test('renders organization card correctly', () => {
        const organization = {
            id: '123',
            name: 'Test Organization',
            description: 'This is a test organization',
            logoUrl: 'https://example.com/logo.jpg',
            PK: 'ORG#TESTORG',
        };

        renderWithRouter(<GalleryCard item={organization} className="organization-card" orgName={organization.name}/>);

        const card = screen.getByTestId('mock-card');
        expect(card).toHaveClass('organization-card');
        expect(screen.getByText('Test Organization')).toBeInTheDocument();
        expect(screen.getByText('This is a test organization')).toBeInTheDocument();
        expect(card).toHaveStyle(`background-image: url(${organization.logoUrl})`);
    });

    test('navigates to organization page when organization card is clicked', () => {
        const organization = {
            id: '123',
            name: 'Test Organization',
            PK: 'ORG#TESTORG',
            orgName: 'testorg'
        };

        renderWithRouter(<GalleryCard item={organization} className="organization-card" orgName={organization.orgName} />);

        const card = screen.getByTestId('mock-card');
        fireEvent.click(card);

        expect(mockNavigate).toHaveBeenCalledWith('/organizations/testorg/events');
    });

    test('renders event card correctly', () => {
        const event = {
            id: '456',
            title: 'Test Event',
            description: 'This is a test event',
            GSI2PK: 'ORG#TESTORG',
        };

        renderWithRouter(<GalleryCard item={event} className="event" orgName={event.GSI2PK} />);

        const card = screen.getByTestId('mock-card');
        expect(card).toHaveClass('event');
        expect(screen.getByText('Test Event')).toBeInTheDocument();
        expect(screen.getByText('This is a test event')).toBeInTheDocument();

        expect(screen.getByText('TESTORG')).toBeInTheDocument();
    });

    test('navigates to event page when event card is clicked', () => {
        const event = {
            id: '456',
            title: 'Test Event',
            GSI2PK: 'ORG#TESTORG',
            orgName: 'Testorg',
        };

});
}

src/components/cards/galleryCard/GalleryCard.tsx:
{
import React from 'react';
import { Card } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';

interface Organization {
    id: string;
    name: string;
    description?: string;
    logoUrl?: string;
    PK?: string;
}

interface Event {
    id: string;
    title: string;
    description?: string;
    imageUrl?: string;
    date?: string;
    GSI2PK?: string;
    organizationName?: string;
}

interface Photo {
    id: string;
    url: string;
    title?: string;
    GSI2PK?: string;
}

type CardItem = Organization | Event | Photo;

interface GalleryCardProps {
    item: CardItem;
    className: string;
    orgName: string | undefined;
}

const GalleryCard: React.FC<GalleryCardProps> = ({ item, className, orgName }) => {
    const navigate = useNavigate();

    const isOrganization = className.includes('organization');
    const isEvent = className.includes('event');
    const isPhoto = className.includes('photo');

    const isOrganizationItem = (item: CardItem): item is Organization =>
        'name' in item && !('title' in item && !('organizationName' in item));
    const isEventItem = (item: CardItem): item is Event => 'title' in item;
    const isPhotoItem = (item: CardItem): item is Photo => 'url' in item;

    const getBackgroundImage = () => {
        if (isOrganizationItem(item) && item.logoUrl) {
            return item.logoUrl;
        } else if (isEventItem(item) && item.imageUrl) {
            return item.imageUrl;
        } else if (isPhotoItem(item)) {
            return item.url;
        }
        return ``;
    };

    const getTitle = () => {
        if (isOrganizationItem(item)) {
            return item.name;
        } else if (isEventItem(item)) {
            return item.title;
        } else if (isPhotoItem(item) && item.title) {
            return item.title;
        }
        return '';
    };

    const getDescription = () => {
        let description = '';

        if (isOrganizationItem(item) && item.description) {
            description = item.description;
        } else if (isEventItem(item) && item.description) {
            description = item.description;
        }

        if (description.length > 100) {
            return description.substring(0, 97) + '...';
        }

        return description;
    };

    const getOrganizationName = () => {
        if (isEventItem(item)) {
            if (item.organizationName) {
                return item.organizationName;
            } else if (item.GSI2PK) {
                const match = item.GSI2PK.match(/^ORG#(.+)$/);
                return match ? match[1] : '';
            }
        }
        return '';
    };

    const handleCardClick = (orgName: string | undefined) => {
        return () => {
            if(orgName) {
                if (isOrganizationItem(item)) {
                    navigate(`/organizations/${orgName.toLowerCase()}/events`);
                } else if (isEventItem(item)) {
                    navigate(`/organizations/${orgName.toLowerCase().slice(4)}/events/${item.id}/photos`);
                } else if (isPhotoItem(item)) {
                    const eventId = item.GSI2PK ? item.GSI2PK.replace('EVENT#', '').toLowerCase() : '';
                    navigate(`/organizations/${orgName.toLowerCase()}/events/${eventId}/photos/${item.id}`);
                }
            }
            
        } 
    };

    return (
        <Card
            className={`gallery-card ${className}`}
            onClick={handleCardClick(orgName)}
            style={{
                width: '350px',
                height: '250px',
                backgroundImage: `url(${getBackgroundImage()})`,
                backgroundSize: 'cover',
                backgroundPosition: 'center',
                position: 'relative',
                cursor: 'pointer',
            }}
        >
            <div className="card-overlay"></div>

            {isEvent && <div className="organization-badge">{getOrganizationName()}</div>}

            {!isPhoto && (
                <div className="card-content">
                    <h5 className="card-title">{getTitle()}</h5>

                    {getDescription() && <p className="card-description">{getDescription()}</p>}
                </div>
            )}
        </Card>
    );
};

export default GalleryCard;}

src/components/cards/memberCard/MemberCard.tsx:
{
import React from 'react';
import { Card } from 'react-bootstrap';

export interface UserDetails {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
}

export interface Member {
  PK: string;
  SK: string;
  GSI1PK?: string;
  GSI1SK?: string;
  userId: string;
  role: string;
  joinDate: string;
  organizationName: string;
  userDetails: UserDetails;
}

interface MemberCardProps {
  member: Member;
  isSelected: boolean;
  onSelect: (id: string) => void;
}

const MemberCard: React.FC<MemberCardProps> = ({ 
  member, 
  isSelected,
  onSelect
}) => {
  const memberId = member.PK.split('#')[1] || member.userId || member.userDetails.id;
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const { firstName, lastName } = member.userDetails;
  const displayName = `${firstName} ${lastName}`;
  const isAdmin = member.role === 'ADMIN';

  return (
    <Card 
      className={`member-card ${isSelected ? 'selected' : ''} ${isAdmin ? 'admin-card' : 'regular-card'}`}
      onClick={() => onSelect(memberId)}
      style={{ 
        width: '300px', 
        height: '200px',
        position: 'relative',
        cursor: 'pointer',
        backgroundColor: isSelected ? '#4d5154' : '#343a40',
        borderColor: isSelected ? '#fff' : 'transparent',
        borderWidth: isSelected ? '2px' : '1px',
        transition: 'all 0.2s ease-in-out'
      }}
    >
      <div className="card-content text-white p-4 d-flex flex-column justify-content-between h-100">
        <div>
          <h5 className="card-title">{displayName}</h5>
        </div>
        
        <div className="card-footer bg-transparent border-0 text-white-50">
          <small>Member since {formatDate(member.joinDate)}</small>
        </div>
      </div>
    </Card>
  );
};

export default MemberCard;
}

src/components/cards/membershipCard/MembershipCard.test.tsx:
{
}

src/components/cards/membershipCard/MembershipCard.tsx:
{
import React from 'react';
import { Card } from 'react-bootstrap';

export interface UserDetails {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
}

export interface MembershipRequest {
  PK: string;
  SK: string;
  GSI1PK: string;
  GSI1SK: string;
  userId: string;
  status: string;
  requestDate: string;
  organizationName: string;
  type: string;
  message?: string;
  userDetails: UserDetails;
}

interface MembershipCardProps {
  request: MembershipRequest;
  isSelected: boolean;
  onSelect: (id: string) => void;
}

const MembershipCard: React.FC<MembershipCardProps> = ({ 
  request, 
  isSelected,
  onSelect
}) => {
  const requestId = request.SK.split('#')[1] || request.userId;
  
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const { firstName, lastName } = request.userDetails;
  const displayName = `${firstName} ${lastName}`;

  return (
    <Card 
      className={`membership-card ${isSelected ? 'selected' : ''}`}
      onClick={() => onSelect(requestId)}
      style={{ 
        width: '300px', 
        height: '200px',
        position: 'relative',
        cursor: 'pointer',
        backgroundColor: isSelected ? '#4d5154' : '#343a40',
        borderColor: isSelected ? '#fff' : 'transparent',
        borderWidth: isSelected ? '2px' : '1px',
        transition: 'all 0.2s ease-in-out'
      }}
    >
      <div className="card-content text-white p-4 d-flex flex-column justify-content-between h-100">
        <div>
          <h5 className="card-title">{displayName}</h5>
          {request.message && (
            <p className="card-message text-white-50 small">"{request.message}"</p>
          )}
        </div>
        
        <div className="card-footer bg-transparent border-0 text-white-50">
          <small>Requested on {formatDate(request.requestDate)}</small>
        </div>
      </div>
    </Card>
  );
};

export default MembershipCard;
}

src/components/forms/AuthForm/AuthForm.test.tsx:
{
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import AuthForm from './AuthForm';

// Mock react-bootstrap
jest.mock('react-bootstrap', () => ({
    Form: ({ children, onSubmit }: { children: React.ReactNode; onSubmit: any }) => (
        <form data-testid="form" onSubmit={onSubmit}>
            {children}
        </form>
    ),
    Alert: ({ children, variant }: { children: React.ReactNode; variant: string }) => (
        <div data-testid="alert" className={`alert alert-${variant}`}>
            {children}
        </div>
    ),
}));

describe('AuthForm Component', () => {
    const mockProps = {
        title: 'Test Title',
        onSubmit: jest.fn(e => e.preventDefault()),
        error: null,
        children: <div data-testid="form-children">Form fields</div>,
    };

    test('renders the form with title', () => {
        render(<AuthForm {...mockProps} />);

        expect(screen.getByText('Test Title')).toBeInTheDocument();
        expect(screen.getByTestId('form')).toBeInTheDocument();
        expect(screen.getByTestId('form-children')).toBeInTheDocument();
    });

    test('does not render alert when no error', () => {
        render(<AuthForm {...mockProps} />);

        expect(screen.queryByTestId('alert')).not.toBeInTheDocument();
    });

    test('renders alert when error is provided', () => {
        render(<AuthForm {...mockProps} error="Test error message" />);

        const alert = screen.getByTestId('alert');
        expect(alert).toBeInTheDocument();
        expect(alert).toHaveClass('alert-danger');
        expect(alert).toHaveTextContent('Test error message');
    });

    test('calls onSubmit when form is submitted', () => {
        render(<AuthForm {...mockProps} />);

        const form = screen.getByTestId('form');
        fireEvent.submit(form);

        expect(mockProps.onSubmit).toHaveBeenCalledTimes(1);
    });

    test('renders children inside the form', () => {
        const customChildren = <button data-testid="custom-button">Submit</button>;
        render(
            <AuthForm title="Test Form" onSubmit={mockProps.onSubmit} error={null}>
                {customChildren}
            </AuthForm>
        );

        const form = screen.getByTestId('form');
        expect(form).toContainElement(screen.getByTestId('custom-button'));
    });
});
}

src/components/forms/AuthForm/AuthForm.tsx:
{
import React from 'react';
import { Form, Alert } from 'react-bootstrap';

interface AuthFormProps {
    title: string;
    onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;
    error: string | null;
    children: React.ReactNode;
}

const AuthForm: React.FC<AuthFormProps> = ({ title, onSubmit, error, children }) => {
    return (
        <div className="auth-form" style={{ fontFamily: 'CapsuleWeb' }}>
            <h1 className="auth-title">{title}</h1>
            {error && <Alert variant="danger">{error}</Alert>}
            <Form onSubmit={onSubmit}>{children}</Form>
        </div>
    );
};

export default AuthForm;
}

src/components/forms/AuthForm.tsx:
{
import React from 'react';
import { Form, Alert } from 'react-bootstrap';

interface AuthFormProps {
    title: string;
    onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;
    error: string | null;
    children: React.ReactNode;
}

const AuthForm: React.FC<AuthFormProps> = ({ title, onSubmit, error, children }) => {
    return (
        <div className="auth-form">
            <h1 className="auth-title">{title}</h1>
            {error && <Alert variant="danger">{error}</Alert>}
            <Form onSubmit={onSubmit}>{children}</Form>
        </div>
    );
};

export default AuthForm;
}

src/components/forms/FormButton/FormButton.test.tsx:
{
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import FormButton from './FormButton';

// Mock react-bootstrap Button
jest.mock('react-bootstrap', () => ({
    Button: ({
        children,
        variant,
        type,
        className,
        onClick,
    }: {
        children: React.ReactNode;
        variant: string;
        type: 'submit' | 'reset' | 'button' | undefined;
        className: string;
        onClick?: () => void;
    }) => (
        <button
            data-testid="mock-button"
            data-variant={variant}
            type={type}
            className={className}
            onClick={onClick}
        >
            {children}
        </button>
    ),
}));

describe('FormButton Component', () => {
    test('renders with default props', () => {
        render(<FormButton type="button">Click Me</FormButton>);

        const button = screen.getByTestId('mock-button');
        expect(button).toHaveTextContent('Click Me');
        expect(button).toHaveAttribute('data-variant', 'primary');
        expect(button).toHaveAttribute('type', 'button');
        expect(button).toHaveAttribute('class', expect.stringContaining('mb-3'));
    });

    test('applies custom class names', () => {
        render(
            <FormButton type="submit" className="custom-class">
                Submit
            </FormButton>
        );

        const button = screen.getByTestId('mock-button');
        expect(button).toHaveAttribute('class', expect.stringContaining('custom-class'));
        expect(button).toHaveAttribute('class', expect.stringContaining('mb-3'));
    });

    test('applies custom variant', () => {
        render(
            <FormButton type="button" variant="success">
                Success Button
            </FormButton>
        );

        const button = screen.getByTestId('mock-button');
        expect(button).toHaveAttribute('data-variant', 'success');
    });

    test('applies inverted styles', () => {
        render(
            <FormButton type="button" inverted>
                Inverted Button
            </FormButton>
        );

        const button = screen.getByTestId('mock-button');
        expect(button).toHaveAttribute('data-variant', 'light');
        expect(button).toHaveAttribute('class', expect.stringContaining('text-dark'));
    });

    test('calls onClick when clicked', () => {
        const handleClick = jest.fn();
        render(
            <FormButton type="button" onClick={handleClick}>
                Clickable
            </FormButton>
        );

        const button = screen.getByTestId('mock-button');
        fireEvent.click(button);

        expect(handleClick).toHaveBeenCalledTimes(1);
    });

    test('renders as submit button', () => {
        render(<FormButton type="submit">Submit Form</FormButton>);

        const button = screen.getByTestId('mock-button');
        expect(button).toHaveAttribute('type', 'submit');
    });
});
}

src/components/forms/FormButton/FormButton.tsx:
{
import React from 'react';
import { Button } from 'react-bootstrap';

interface FormButtonProps {
    type: 'submit' | 'button' | 'reset';
    className?: string;
    variant?: string;
    onClick?: () => void;
    children: React.ReactNode;
    inverted?: boolean;
}

const FormButton: React.FC<FormButtonProps> = ({
    type,
    className = '',
    variant = 'primary',
    onClick,
    children,
    inverted = false,
}) => {
    // Use inverted styles if specified
    const buttonVariant = inverted ? 'light' : variant;
    const buttonClasses = `${className} ${inverted ? 'text-dark' : ''}`;

    return (
        <Button
            variant={buttonVariant}
            type={type}
            className={`mb-3 ${buttonClasses}`}
            onClick={onClick}
        >
            {children}
        </Button>
    );
};

export default FormButton;
}

src/components/forms/FormButton.tsx:
{
import React from 'react';
import { Button } from 'react-bootstrap';

interface FormButtonProps {
    type: 'submit' | 'button' | 'reset';
    className?: string;
    variant?: string;
    onClick?: () => void;
    children: React.ReactNode;
    inverted?: boolean;
}

const FormButton: React.FC<FormButtonProps> = ({
    type,
    className = '',
    variant = 'primary',
    onClick,
    children,
    inverted = false,
}) => {
    // Use inverted styles if specified
    const buttonVariant = inverted ? 'light' : variant;
    const buttonClasses = `${className} ${inverted ? 'text-dark' : ''}`;

    return (
        <Button
            variant={buttonVariant}
            type={type}
            className={`mb-2 ${buttonClasses}`}
            onClick={onClick}
        >
            {children}
        </Button>
    );
};

export default FormButton;
}

src/components/forms/FormContainer/FormContainer.test.tsx:
{
import React from 'react';
import { render, screen } from '@testing-library/react';
import FormContainer from './FormContainer';

// Mock react-bootstrap components
jest.mock('react-bootstrap', () => ({
    Container: ({
        children,
        fluid,
        className,
    }: {
        children: React.ReactNode;
        fluid: boolean;
        className: string;
    }) => (
        <div data-testid="mock-container" data-fluid={fluid} className={className}>
            {children}
        </div>
    ),
    Row: ({ children, className }: { children: React.ReactNode; className: string }) => (
        <div data-testid="mock-row" className={className}>
            {children}
        </div>
    ),
    Col: ({
        children,
        xs,
        className,
    }: {
        children: React.ReactNode;
        xs: number;
        className: string;
    }) => (
        <div data-testid="mock-col" data-xs={xs} className={className}>
            {children}
        </div>
    ),
}));

describe('FormContainer Component', () => {
    test('renders container with fluid and proper classes', () => {
        const testContent = <div data-testid="test-content">Test Content</div>;
        render(<FormContainer>{testContent}</FormContainer>);

        const container = screen.getByTestId('mock-container');
        expect(container).toHaveAttribute('data-fluid', 'true');
        expect(container).toHaveClass('form-container');
        expect(container).toHaveClass('d-flex');
        expect(container).toHaveClass('align-items-center');
        expect(container).toHaveClass('justify-content-center');
        expect(container).toHaveClass('min-vh-100');
    });

    test('renders row with centered content', () => {
        render(
            <FormContainer>
                <div>Content</div>
            </FormContainer>
        );

        const row = screen.getByTestId('mock-row');
        expect(row).toHaveClass('justify-content-center');
    });

    test('renders column with proper xs value and classes', () => {
        render(
            <FormContainer>
                <div>Content</div>
            </FormContainer>
        );

        const col = screen.getByTestId('mock-col');
        expect(col).toHaveAttribute('data-xs', '12');
        expect(col).toHaveClass('d-flex');
        expect(col).toHaveClass('justify-content-center');
    });

    test('renders children inside the container structure', () => {
        const testContent = <div data-testid="test-content">Test Content</div>;
        render(<FormContainer>{testContent}</FormContainer>);

        expect(screen.getByTestId('test-content')).toBeInTheDocument();
        const col = screen.getByTestId('mock-col');
        expect(col).toContainElement(screen.getByTestId('test-content'));
    });
});
}

src/components/forms/FormContainer/FormContainer.tsx:
{
import React from 'react';
import { Container, Row, Col } from 'react-bootstrap';

interface FormContainerProps {
    children: React.ReactNode;
}

const FormContainer: React.FC<FormContainerProps> = ({ children }) => {
    return (
        <Container
            fluid
            className="form-container d-flex align-items-center justify-content-center min-vh-100 p-0"
        >
            <Row className="justify-content-center">
                <Col xs={12} className="d-flex justify-content-center">
                    {children}
                </Col>
            </Row>
        </Container>
    );
};

export default FormContainer;
}

src/components/forms/FormContainer.tsx:
{
import React from 'react';
import { Container, Row, Col } from 'react-bootstrap';

interface FormContainerProps {
    children: React.ReactNode;
}

const FormContainer: React.FC<FormContainerProps> = ({ children }) => {
    return (
        <Container
            fluid
            className="form-container d-flex align-items-center justify-content-center min-vh-100 p-0"
        >
            <Row className="justify-content-center">
                <Col xs={12} className="d-flex justify-content-center">
                    {children}
                </Col>
            </Row>
        </Container>
    );
};

export default FormContainer;
}

src/components/forms/FormInput/FormInput.test.tsx:
{
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import FormInput from './FormInput';

// Mock react-bootstrap Form components
jest.mock('react-bootstrap', () => ({
    Form: {
        Group: ({
            children,
            controlId,
            className,
        }: {
            children: React.ReactNode;
            controlId: string;
            className: string;
        }) => (
            <div data-testid="form-group" data-control-id={controlId} className={className}>
                {children}
            </div>
        ),
        Control: ({
            type,
            placeholder,
            value,
            onChange,
            required,
            className,
        }: {
            type: string;
            placeholder: string;
            value: string;
            onChange: (e: any) => void;
            required: boolean;
            className: string;
        }) => (
            <input
                data-testid="form-control"
                type={type}
                placeholder={placeholder}
                value={value}
                onChange={onChange}
                required={required}
                className={className}
            />
        ),
    },
}));

describe('FormInput Component', () => {
    const defaultProps = {
        id: 'testInput',
        type: 'text',
        placeholder: 'Enter value',
        value: '',
        onChange: jest.fn(),
    };

    test('renders with default props', () => {
        render(<FormInput {...defaultProps} />);

        const formGroup = screen.getByTestId('form-group');
        const input = screen.getByTestId('form-control');

        expect(formGroup).toHaveAttribute('data-control-id', 'testInput');
        expect(input).toHaveAttribute('type', 'text');
        expect(input).toHaveAttribute('placeholder', 'Enter value');
        expect(input).toHaveAttribute('value', '');
        expect(input).not.toHaveAttribute('required');
        expect(input).toHaveClass('form-input');
    });

    test('renders as required input', () => {
        render(<FormInput {...defaultProps} required />);

        const input = screen.getByTestId('form-control');
        expect(input).toHaveAttribute('required');
    });

    test('applies custom class name', () => {
        render(<FormInput {...defaultProps} className="custom-class" />);

        const formGroup = screen.getByTestId('form-group');
        expect(formGroup).toHaveClass('custom-class');
    });

    test('renders with different input types', () => {
        const { rerender } = render(<FormInput {...defaultProps} type="email" />);

        expect(screen.getByTestId('form-control')).toHaveAttribute('type', 'email');

        rerender(<FormInput {...defaultProps} type="password" />);
        expect(screen.getByTestId('form-control')).toHaveAttribute('type', 'password');
    });

    test('calls onChange when input changes', () => {
        render(<FormInput {...defaultProps} />);

        const input = screen.getByTestId('form-control');
        fireEvent.change(input, { target: { value: 'new value' } });

        expect(defaultProps.onChange).toHaveBeenCalledTimes(1);
    });

    test('displays current value', () => {
        render(<FormInput {...defaultProps} value="current value" />);

        const input = screen.getByTestId('form-control');
        expect(input).toHaveAttribute('value', 'current value');
    });
});
}

src/components/forms/FormInput/FormInput.tsx:
{
import React from 'react';
import { Form } from 'react-bootstrap';

interface FormInputProps {
    id: string;
    type: string;
    placeholder: string;
    value: string;
    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    required?: boolean;
    className?: string;
}

const FormInput: React.FC<FormInputProps> = ({
    id,
    type,
    placeholder,
    value,
    onChange,
    required = false,
    className = '',
}) => {
    return (
        <Form.Group controlId={id} className={`${className}`}>
            <Form.Control
                type={type}
                placeholder={placeholder}
                value={value}
                onChange={onChange}
                required={required}
                className="form-input"
            />
        </Form.Group>
    );
};

export default FormInput;
}

src/components/forms/FormInput.tsx:
{
import React from 'react';
import { Form } from 'react-bootstrap';

interface FormInputProps {
    id: string;
    type: string;
    placeholder: string;
    value: string;
    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    required?: boolean;
}

const FormInput: React.FC<FormInputProps> = ({
    id,
    type,
    placeholder,
    value,
    onChange,
    required = false,
}) => {
    return (
        <Form.Group controlId={id} className="w-100 mb-2">
            <Form.Control
                type={type}
                placeholder={placeholder}
                value={value}
                onChange={onChange}
                required={required}
                className="form-input"
            />
        </Form.Group>
    );
};

export default FormInput;
}

src/components/forms/FormRow/FormRow.test.tsx:
{
import React from 'react';
import { render, screen } from '@testing-library/react';
import FormRow from './FormRow';

// Mock react-bootstrap components
jest.mock('react-bootstrap', () => ({
    Row: ({ children, className }: { children: React.ReactNode; className: string }) => (
        <div data-testid="mock-row" className={className}>
            {children}
        </div>
    ),
    Col: ({ children, className }: { children: React.ReactNode; className: string }) => (
        <div data-testid="mock-col" className={className}>
            {children}
        </div>
    ),
}));

describe('FormRow Component', () => {
    test('renders with proper row classes', () => {
        render(
            <FormRow>
                <div>Child 1</div>
            </FormRow>
        );

        const row = screen.getByTestId('mock-row');
        expect(row).toHaveClass('form-row');
        expect(row).toHaveClass('mb-2');
        expect(row).toHaveClass('w-100');
        expect(row).toHaveClass('mx-0');
    });

    test('wraps each child in a column', () => {
        render(
            <FormRow>
                <div>Child 1</div>
                <div>Child 2</div>
                <div>Child 3</div>
            </FormRow>
        );

        // Check that we have 3 columns
        const cols = screen.getAllByTestId(/mock-col/);
        expect(cols).toHaveLength(3);

        // Check each column has px-0 class
        cols.forEach(col => {
            expect(col).toHaveClass('px-0');
        });
    });

    test('handles single child correctly', () => {
        render(
            <FormRow>
                <div data-testid="single-child">Single Child</div>
            </FormRow>
        );

        const cols = screen.getAllByTestId(/mock-col/);
        expect(cols).toHaveLength(1);
        expect(screen.getByTestId('single-child')).toBeInTheDocument();
    });

    test('renders children correctly', () => {
        render(
            <FormRow>
                <div data-testid="child-1">Child 1</div>
                <div data-testid="child-2">Child 2</div>
            </FormRow>
        );

        expect(screen.getByTestId('child-1')).toBeInTheDocument();
        expect(screen.getByTestId('child-2')).toBeInTheDocument();
    });
});
}

src/components/forms/FormRow/FormRow.tsx:
{
import React from 'react';
import { Row, Col } from 'react-bootstrap';

interface FormRowProps {
    children: React.ReactNode;
}

const FormRow: React.FC<FormRowProps> = ({ children }) => {
    return (
        <Row className="form-row mb-2 w-100 mx-0">
            {React.Children.map(children, (child, index) => (
                <Col className="px-0" key={index}>
                    {child}
                </Col>
            ))}
        </Row>
    );
};

export default FormRow;
}

src/components/Gallery.tsx:
{
import React from 'react';
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import GalleryCard from './cards/galleryCard/GalleryCard';
import OrganizationCard from './OrganizationCard';

interface GalleryProps {
    items: any[];
    type?: 'organization' | 'event' | 'photo';
    useNewCard?: boolean;
}
const Gallery: React.FC<GalleryProps> = ({ items, type = 'organization', useNewCard = true }) => {
    return (
        <Container fluid className="py-4">
            <Row className="g-4">
                {items.map(item => (
                    <Col
                        key={item.id}
                        xs={12}
                        sm={6}
                        md={4}
                        lg={4}
                        className="d-flex justify-content-center"
                    >
                        {useNewCard ? (
                            <GalleryCard item={item} className={`${type}-card`} />
                        ) : (
                            <OrganizationCard index={item.id} />
                        )}
                    </Col>
                ))}
            </Row>
        </Container>
    );
};

export default Gallery;
}

src/components/memberRow/MemberRow.test.tsx:
{
}

src/components/memberRow/MemberRow.tsx:
{
import React, { useState } from 'react';
import { Button } from 'react-bootstrap';
import MemberCard, { Member } from '../cards/memberCard/MemberCard';

interface MemberRowProps {
  title: string;
  members: Member[];
  onAction: (actionType: string, memberId: string) => void;
  actionTypes: string[];
  actionLabels: string[];
}

const MemberRow: React.FC<MemberRowProps> = ({ 
  title, 
  members, 
  onAction,
  actionTypes,
  actionLabels
}) => {
  const [selectedMemberId, setSelectedMemberId] = useState<string | null>(null);
  const [expandedRow, setExpandedRow] = useState<boolean>(false);
  const [displayCount, setDisplayCount] = useState<number>(3);

  const handleSelect = (memberId: string) => {
    setSelectedMemberId(memberId === selectedMemberId ? null : memberId);
  };

  const handleSeeMore = () => {
    setExpandedRow(true);
    setDisplayCount(members.length);
  };

  const handleChange = (actionType: string, selectedMemberId:string) => {
    return () => {
      setSelectedMemberId(null);
      onAction(actionType, selectedMemberId)
    };
  }

  const membersToDisplay = members.slice(0, expandedRow ? members.length : displayCount);

  return (
    <div className="member-row mb-4">
      <h3 className="text-white mb-3">{title}</h3>
      <div
        className={`row-container ${expandedRow ? 'expanded' : ''}`}
        style={{
          overflowX: 'auto',
          display: 'flex',
          gap: '15px',
          paddingBottom: '10px',
          whiteSpace: 'nowrap',
          scrollbarWidth: 'thin',
          msOverflowStyle: 'none',
        }}
      >
        {membersToDisplay.map(member => (
          <div
            key={member.userId}
            style={{
              minWidth: '300px',
              flexShrink: 0,
              display: 'inline-block',
            }}
          >
          
            <MemberCard 
              member={member} 
              isSelected={member.userId === selectedMemberId}
              onSelect={handleSelect}
            />
          </div>
        ))}

        {!expandedRow && members.length > displayCount && (
          <div
            style={{
              minWidth: '100px',
              display: 'inline-flex',
              alignItems: 'center',
              justifyContent: 'center',
              flexShrink: 0,
            }}
          >
            <Button className="p-1" variant="primary" onClick={handleSeeMore}>
              See more
            </Button>
          </div>
        )}
      </div>

      {selectedMemberId && (
        <div className="action-buttons mt-3 mb-4 d-flex gap-3">
          {actionTypes.map((actionType, index) => (
            <Button
              key={actionType}
              variant={actionType.includes('remove') || actionType.includes('demote') ? 'danger' : 'success'}
              onClick={handleChange(actionType, selectedMemberId)}
            >
              {actionLabels[index]}
            </Button>
          ))}
        </div>
      )}
    </div>
  );
};

export default MemberRow;
}

src/components/navButton/NavButton.test.tsx:
{
import React from 'react';
import { fireEvent, screen } from '@testing-library/react';
import NavButton from './NavButton';
import { renderWithRouter } from '../../utils/test-utils';

jest.mock('react-bootstrap', () => ({
    Button: ({
        children,
        variant,
        className,
        onClick,
    }: {
        children: React.ReactNode;
        variant: string;
        className: string;
        onClick: () => void;
    }) => (
        <button
            data-testid="mock-button"
            data-variant={variant}
            className={className}
            onClick={onClick}
        >
            {children}
        </button>
    ),
}));

jest.mock('react-bootstrap-icons', () => ({
    ArrowLeft: () => <span data-testid="arrow-left-icon" />,
}));

const mockNavigate = jest.fn();
jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    useNavigate: () => mockNavigate,
}));

describe('NavButton Component', () => {
    beforeEach(() => {
        mockNavigate.mockClear();
    });

    test('renders with default props', () => {
        renderWithRouter(<NavButton />);

        const button = screen.getByTestId('mock-button');
        expect(button).toHaveTextContent('Back');
        expect(button).toHaveAttribute('data-variant', 'primary custom-create-button');
    });

    test('renders with custom text', () => {
        renderWithRouter(<NavButton>Go Home</NavButton>);

        const button = screen.getByTestId('mock-button');
        expect(button).toHaveTextContent('Go Home');
    });

    test('applies custom class names', () => {
        renderWithRouter(<NavButton className="custom-class">Back</NavButton>);

        const button = screen.getByTestId('mock-button');
        expect(button).toHaveClass('custom-class');
    });

    test('applies custom variant', () => {
        renderWithRouter(<NavButton variant="outline-dark">Back</NavButton>);

        const button = screen.getByTestId('mock-button');
        expect(button).toHaveAttribute('data-variant', 'outline-dark custom-create-button');
    });

    test('navigates to specified route when clicked', () => {
        const { rerender } = renderWithRouter(
            <NavButton to="/dashboard">Back to dashboard</NavButton>
        );

        const button = screen.getByTestId('mock-button');
        fireEvent.click(button);

        expect(mockNavigate).toHaveBeenCalledWith('/dashboard');

        mockNavigate.mockClear();
        rerender(<NavButton>Back</NavButton>);

        const defaultButton = screen.getByTestId('mock-button');
        fireEvent.click(defaultButton);

        expect(mockNavigate).toHaveBeenCalledWith('/');
    });
});
}

src/components/navButton/NavButton.tsx:
{
import React from 'react';
import { Button } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';

interface BackButtonProps {
    to?: string;
    className?: string;
    variant?: string;
    children?: React.ReactNode;
}

const BackButton: React.FC<BackButtonProps> = ({
    to = '/',
    className = '',
    variant = 'primary',
    children,
}) => {
    const navigate = useNavigate();

    const handleClick = () => {
        navigate(to);
    };

    return (
        <Button
            className={`${className}`}
            variant={`${variant} custom-create-button`}
            onClick={handleClick}
        >
            {children || 'Back'}
        </Button>
    );
};

export default BackButton;
}

src/components/OrganizationCard.tsx:
{
import React from 'react';
import Card from 'react-bootstrap/Card';
import Button from 'react-bootstrap/Button';

interface OrgCardProps {
    index: number;
}

const OrganizationCard: React.FC<OrgCardProps> = ({ index }) => {
    return (
        <Card className="mb-3">
            <Card.Img
                variant="top"
                src={`https://picsum.photos/200?random=${index}`}
                alt={`Random ${index}`}
            />
            <Card.Body>
                <Card.Title>Organization {index}</Card.Title>
                <Card.Text>
                    This is a short description of the organization. More details can be added here.
                </Card.Text>
                <Button variant="primary">Learn More</Button>
            </Card.Body>
        </Card>
    );
};

export default OrganizationCard;
}

src/components/organizationRow/OrganizationRow.tsx:
{
import React, { useState, useEffect } from 'react';
import { Button } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import GalleryCard from '../cards/galleryCard/GalleryCard';
import { Organization, Event, getPublicOrganizationEvents } from '../../context/OrgService';

interface OrganizationRowProps {
    organization: Organization;
}

const OrganizationRow: React.FC<OrganizationRowProps> = ({ organization }) => {
    const navigate = useNavigate();
    const [events, setEvents] = useState<Event[]>([]);
    const [displayedEvents, setDisplayedEvents] = useState<number>(3);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const [expandedRow, setExpandedRow] = useState<boolean>(false);

    const orgId = organization.PK.split('#')[1];

    useEffect(() => {
        const fetchEvents = async () => {
            try {
                setLoading(true);
                const response = await getPublicOrganizationEvents(orgId);
                setEvents(response.data.events);
                setLoading(false);
            } catch (err) {
                console.error(`Error fetching events for ${organization.name}:`, err);
                setError(`Currently no events for ${organization.name}`);
                setLoading(false);
            }
        };
        fetchEvents();
    }, [organization, orgId]);

    const handleSeeMore = () => {
        setExpandedRow(true);
        setDisplayedEvents(events.length);
    };

    const handleSeeAll = () => {
        navigate(`/organizations/${orgId.toLowerCase()}`);
    };

    const eventsToDisplay = events.slice(0, displayedEvents);

    return (
        <div className="organization-row mb-4">
            <div
                className={`row-container ${expandedRow ? 'expanded' : ''}`}
                style={{
                    overflowX: 'auto',
                    display: 'flex',
                    gap: '15px',
                    paddingBottom: '10px',
                    whiteSpace: 'nowrap',
                    scrollbarWidth: 'thin',
                    msOverflowStyle: 'none'
                }}
            >
                {/* Organization Card */}
                <div style={{ minWidth: '350px', flexShrink: 0, display: 'inline-block' }}>
                    <GalleryCard item={organization} className="organization-card" orgName={organization.name} />
                </div>

                {/* Event Cards */}
                {loading ? (
                    <div>Loading events...</div>
                ) : error ? (
                    <div className="text-danger">{error}</div>
                ) : (
                    <>
                        {eventsToDisplay.map(event => (
                            <div
                                key={event.id}
                                style={{
                                    minWidth: '350px',
                                    flexShrink: 0,
                                    display: 'inline-block',
                                }}
                            >
                                <GalleryCard item={event} className="event" orgName={event.GSI2PK}/>
                            </div>
                        ))}

                        {!expandedRow && events.length > 3 && (
                            <div
                                style={{
                                    minWidth: '100px',
                                    display: 'inline-flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    flexShrink: 0,
                                }}
                            >
                                <Button className="p-1" variant="primary" onClick={handleSeeMore}>
                                    See more
                                </Button>
                            </div>
                        )}

                        {expandedRow && (
                            <div
                                style={{
                                    minWidth: '100px',
                                    display: 'inline-flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    flexShrink: 0,
                                }}
                            >
                                <Button className="p-1" variant="primary" onClick={handleSeeAll}>
                                    See All
                                </Button>
                            </div>
                        )}
                    </>
                )}
            </div>
        </div>
    );
};

export default OrganizationRow;
}

src/components/routes/ProtectedRoute/ProtectedRoute.test.tsx:
{
import React from 'react';
import { render, screen } from '@testing-library/react';
import { MemoryRouter } from 'react-router-dom';
import ProtectedRoute from './ProtectedRoute';
import AuthContext, { AuthContextType, User } from '../../../context/AuthContext';

// Mock Navigate component
jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    Navigate: ({ to }: { to: string }) => <div data-testid="navigate" data-to={to} />,
}));

const MockChildComponent = () => <div data-testid="protected-child">Protected Content</div>;

describe('ProtectedRoute Component', () => {
    const mockUser: User = {
        id: '1',
        email: 'test@example.com',
        firstName: 'Test',
        lastName: 'User',
        role: 'user',
    };

    const renderComponent = (authContextValue: Partial<AuthContextType>) => {
        return render(
            <MemoryRouter initialEntries={['/']}>
                <AuthContext.Provider value={authContextValue as AuthContextType}>
                    <ProtectedRoute>
                        <MockChildComponent />
                    </ProtectedRoute>
                </AuthContext.Provider>
            </MemoryRouter>
        );
    };

    test('renders child component when user is authenticated', () => {
        const authContextValue: Partial<AuthContextType> = {
            user: mockUser,
            token: 'valid-token',
            setUser: jest.fn(),
            setToken: jest.fn(),
            logout: jest.fn(),
        };

        renderComponent(authContextValue);

        expect(screen.getByTestId('protected-child')).toBeInTheDocument();
        expect(screen.queryByTestId('navigate')).not.toBeInTheDocument();
    });

    test('redirects to login when user is not authenticated', () => {
        const authContextValue: Partial<AuthContextType> = {
            user: null,
            token: null,
            setUser: jest.fn(),
            setToken: jest.fn(),
            logout: jest.fn(),
        };

        renderComponent(authContextValue);

        expect(screen.queryByTestId('protected-child')).not.toBeInTheDocument();
        const navigate = screen.getByTestId('navigate');
        expect(navigate).toBeInTheDocument();
        expect(navigate).toHaveAttribute('data-to', '/login');
    });

    test('redirects to login when token is missing even if user exists', () => {
        const authContextValue: Partial<AuthContextType> = {
            user: mockUser,
            token: null, // Token is missing
            setUser: jest.fn(),
            setToken: jest.fn(),
            logout: jest.fn(),
        };

        renderComponent(authContextValue);

        expect(screen.queryByTestId('protected-child')).not.toBeInTheDocument();
        const navigate = screen.getByTestId('navigate');
        expect(navigate).toBeInTheDocument();
        expect(navigate).toHaveAttribute('data-to', '/login');
    });
});
}

src/components/routes/ProtectedRoute/ProtectedRoute.tsx:
{
import { JSX, useContext } from 'react';
import { Navigate } from 'react-router-dom';
import AuthContext from '../../../context/AuthContext';

interface ProtectedRouteProps {
    children: JSX.Element;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
    const authContext = useContext(AuthContext);

    if (!authContext || !authContext.token) {
        const storedToken = localStorage.getItem('token');
        if (!storedToken) {
            return <Navigate to="/login" replace />;
        }
        console.log('Token found in localStorage but not in context');
    }
    return children;
};

export default ProtectedRoute;
}

src/components/routes/ProtectedRoute.tsx:
{
import { JSX, useContext } from 'react';
import { Navigate } from 'react-router-dom';
import AuthContext from '../../context/AuthContext';

interface ProtectedRouteProps {
    children: JSX.Element;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
    const authContext = useContext(AuthContext);

    if (!authContext?.token) {
        // Redirect to login if there is no token
        return <Navigate to="/login" replace />;
    }

    return children;
};

export default ProtectedRoute;
}

src/context/AuthContext.tsx:
{
import { createContext } from 'react';

export interface User {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
    role: string;
}

export interface AuthContextType {
    user: User | null;
    token: string | null;
    setUser: (user: User | null) => void;
    setToken: (token: string | null) => void;
    logout: () => void;
}

// Create a default value for the context to avoid null checks
const defaultContext: AuthContextType = {
    user: null,
    token: null,
    setUser: () => {},
    setToken: () => {},
    logout: () => {},
};

const AuthContext = createContext<AuthContextType>(defaultContext);

export default AuthContext;
}

src/context/AuthProvider.tsx:
{
import { useState, useEffect, ReactNode } from 'react';
import AuthContext, { User } from './AuthContext';

const AuthProvider = ({ children }: { children: ReactNode }) => {
    const [user, setUser] = useState<User | null>(null);
    const [token, setToken] = useState<string | null>(null);
    const [isInitialized, setIsInitialized] = useState(false);

    useEffect(() => {
        const initializeAuth = () => {
            const storedUser = localStorage.getItem('user');
            const storedToken = localStorage.getItem('token');

            if (storedUser && storedToken) {
                try {
                    setUser(JSON.parse(storedUser));
                    setToken(storedToken);
                } catch (error) {
                    console.error('Error parsing stored user data:', error);
                    localStorage.removeItem('user');
                    localStorage.removeItem('token');
                }
            }

            setIsInitialized(true);
        };

        initializeAuth();
    }, []);

    const updateUser = (newUser: User | null) => {
        setUser(newUser);
        if (newUser) {
            localStorage.setItem('user', JSON.stringify(newUser));
        } else {
            localStorage.removeItem('user');
        }
    };

    const updateToken = (newToken: string | null) => {
        setToken(newToken);
        if (newToken) {
            localStorage.setItem('token', newToken);
        } else {
            localStorage.removeItem('token');
        }
    };

    const logout = () => {
        setUser(null);
        setToken(null);
        localStorage.removeItem('user');
        localStorage.removeItem('token');
    };

    if (!isInitialized) {
        // TODO: Add some loading state (?)
        return null;
    }

    return (
        <AuthContext.Provider
            value={{
                user,
                token,
                setUser: updateUser,
                setToken: updateToken,
                logout,
            }}
        >
            {children}
        </AuthContext.Provider>
    );
};

export default AuthProvider;
}

src/context/AuthService.tsx:
{
import axiosInstance, { noAuthInstance } from '../utils/axios';

export const registerUser = async (data: {
    email: string;
    password: string;
    firstName: string;
    lastName: string;
}) => {
    return noAuthInstance.post('/api/auth/register', data);
};

export const loginUser = async (data: { email: string; password: string }) => {
    return noAuthInstance.post('/api/auth/login', data);
};

/**
 * Change user password
 * @param currentPassword Current password for verification
 * @param newPassword New password to set
 * @returns Promise with success response
 */
export const changePassword = async (currentPassword: string, newPassword: string) => {
    return axiosInstance.patch('/api/auth/password', {
        currentPassword,
        newPassword,
    });
};

/**
 * Delete user account
 * @param userId User ID to delete
 * @returns Promise with success response
 */
export const deleteAccount = async (userId: string) => {
    return axiosInstance.delete(`/api/auth/users/${userId}`);
  };

interface UserOrgRelationship {
    GSI1PK: string;
    joinedAt: string;
    role: string;
    updatedAt: string;
    userId: string;
    SK: string;
    GSI1SK: string;
    PK: string;
    organizationName: string;
    type: string;
}

export const isMemberOfOrg = async (userId: string, orgId:string):Promise<{status:string, data: {data:{membership:UserOrgRelationship}}}> => {
  return axiosInstance.get(`/users/${userId}/members/${orgId}`);
}

}

src/context/MemberService.tsx:
{
import axiosInstance from '../utils/axios';
import { Member } from '../components/cards/memberCard/MemberCard';

interface MemberResponse {
  status: string;
  data: {
    members: Member[];
  };
}

export enum Role {
  Admin="ADMIN",
  Member="MEMBER",
}

export const getOrganizationMembers = async (organizationId: string) => {
  try {
    const response = await axiosInstance.get<MemberResponse>(
      `/organizations/${organizationId}/members`
    );
    return response.data;
  } catch (error) {
    console.error(`Error fetching members for organization ${organizationId}:`, error);
    throw error;
  }
};

export const updateMember = async (organizationId: string, memberId: string, role: Role) => {
  try {
    const response = await axiosInstance.patch(
      `/organizations/${organizationId}/members/${memberId}`, {
        role: role
      }
    );
    return response.data;
  } catch (error) {
    console.error(`Error promoting member ${memberId}:`, error);
    throw error;
  }
};

export const removeMember = async (organizationId: string, memberId: string) => {
  try {
    const response = await axiosInstance.delete(
      `/organizations/${organizationId}/members/${memberId}`
    );
    return response.data;
  } catch (error) {
    console.error(`Error removing member ${memberId}:`, error);
    throw error;
  }
};
}

src/context/MembershipService.tsx:
{
import axiosInstance from '../utils/axios';
import { MembershipRequest } from '../components/cards/membershipCard/MembershipCard';

interface MembershipResponse {
  status: string;
  data: {
    requests: MembershipRequest[];
  };
}

export const getOrganizationMembershipRequests = async (organizationId: string) => {
  try {
    const response = await axiosInstance.get<MembershipResponse>(
      `/organizations/${organizationId}/requests`
    );
    return response.data;
  } catch (error) {
    console.error(`Error fetching membership requests for organization ${organizationId}:`, error);
    throw error;
  }
};

export const acceptMembershipRequest = async (organizationId: string, requestId: string) => {
  try {
    const response = await axiosInstance.put(
      `/organizations/${organizationId}/requests/${requestId}`
    );
    return response.data;
  } catch (error) {
    console.error(`Error accepting membership request ${requestId}:`, error);
    throw error;
  }
};

export const denyMembershipRequest = async (organizationId: string, requestId: string) => {
  try {
    const response = await axiosInstance.delete(
      `/organizations/${organizationId}/requests/${requestId}`
    );
    return response.data;
  } catch (error) {
    console.error(`Error denying membership request ${requestId}:`, error);
    throw error;
  }
};
}

src/context/OrgService.tsx:
{
import axiosInstance, { noAuthInstance } from '../utils/axios';

export interface Organization {
    id: string;
    name: string;
    description?: string;
    logoUrl?: string;
    PK: string;
    isPublic: boolean;
    createdAt: string;
    updatedAt: string;
    GSI1PK: string;
    GSI1SK: string;
    SK: string;
    createdBy: string;
    type: string;
}

export interface OrganizationsResponse {
    message: string;
    data: {
        organizations: Organization[];
    };
    lastEvaluatedKey: string | null;
}

export interface Event {
    id: string;
    title: string;
    description?: string;
    GSI2PK: string;
    GSI2SK: string;
    PK: string;
    SK: string;
    date: string;
    isPublic: boolean;
    createdAt: string;
    updatedAt: string;
    imageUrl?: string;
}

export interface EventsResponse {
    status: string;
    data: {
        events: Event[];
    };
    lastEvaluatedKey: string | null;
}


export const getPublicOrganizations = async (lastEvaluatedKey?: string, limit: number = 9) => {
    try {
        const response = await noAuthInstance.get<OrganizationsResponse>('/guests', {
            params: {
                lastEvaluatedKey: lastEvaluatedKey ? JSON.stringify(lastEvaluatedKey) : undefined,
                limit,
            },
        });
        return response.data;
    } catch (error) {
        console.error('Error fetching public organizations:', error);
        throw error;
    }
};

// Get public events for an organization
export const getPublicOrganizationEvents = async (
    organizationId: string,
    lastEvaluatedKey?: string,
    limit: number = 9
) => {
    try {
        const response = await noAuthInstance.get<EventsResponse>(
            `/guests/organizations/${organizationId}/events`,
            {
                params: {
                    lastEvaluatedKey,
                    limit,
                },
            }
        );
        return response.data;
    } catch (error) {
        console.error(`Error fetching events for organization ${organizationId}:`, error);
        throw error;
    }
};

// Create a new organization
export const createOrganization = async (formData: FormData) => {
    try {
        const response = await axiosInstance.post('/organizations', formData, {
            headers: {
                'Content-Type': 'multipart/form-data'
            }
        });
        return response.data;
    } catch (error) {
        console.error('Error creating organization:', error);
        throw error;
    }
};

// Create a new event for an organization
export const createEvent = async (orgId: string, eventData: { title: string; description: string; date: string }) => {
    try {
        const response = await axiosInstance.post(`/organizations/${orgId}/events`, eventData, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        return response.data;
    } catch (error) {
        console.error(`Error creating event for organization ${orgId}:`, error);
        throw error;
    }
};

// Update an existing organization
export const updateOrganization = async (organizationId: string, formData: FormData) => {
    try {
        const response = await axiosInstance.put(`/organizations/${organizationId}`, formData, {
            headers: {
                'Content-Type': 'multipart/form-data'
            }
        });
        return response.data;
    } catch (error) {
        console.error(`Error updating organization ${organizationId}:`, error);
        throw error;
    }
};

// Delete an organization
export const deleteOrganization = async (organizationId: string) => {
    try {
        const response = await axiosInstance.delete(`/organizations/${organizationId}`);
        return response.data;
    } catch (error) {
        console.error(`Error deleting organization ${organizationId}:`, error);
        throw error;
    }
};

// Get events for an organization (for authenticated users)
export const getOrganizationEvents = async (orgId: string) => {
    try {
        const response = await axiosInstance.get<EventsResponse>(`/organizations/${orgId}/events`);
        return response.data;
    } catch (error) {
        console.error('Error fetching organization events:', error);
        throw error;
    }
};

// Get user's own organizations
export const getUserOrganizations = async () => {
    try {
        const response = await axiosInstance.get('/organizations');
        return response.data;
    } catch (error) {
        console.error('Error fetching user organizations:', error);
        throw error;
    }
};}

src/context/PhotoService.tsx:
{
import axiosInstance from '../utils/axios';


export interface Photo {
    PK: string;
    SK: string;
    id: string;
    eventId: string;
    url: string;
    createdAt: string;
    updatedAt: string;
    uploadedBy: string;
    metadata?: {
        title?: string;
        description?: string;
        size?: number;
        mimeType?: string;
        s3Key?: string;
    };
    GSI2PK: string;
    GSI2SK: string;
}

export interface PhotosResponse {
    status: string;
    data: {
        photos: Photo[];
    };
}

export interface PhotoUploadResponse {
    status: string;
    data: {
        photo: Photo;
    };
}

/**
 * Gets all photos for an event
 * @param orgName The organization name
 * @param eventId The ID of the event
 * @returns Promise with the response data
 */
export const getAllPhotos = async (orgName: string, eventId: string): Promise<PhotosResponse> => {
    try {
        const response = await axiosInstance.get<PhotosResponse>(`/organizations/${orgName}/events/${eventId}/photos`);
        return response.data;
    } catch (error) {
        console.error('Error fetching photos of an event:', error);
        throw error;
    }
};

/**
 * Uploads a photo to an event
 * @param eventId The ID of the event
 * @param formData FormData containing the photo file and metadata
 * @returns Promise with the response data
 */
export const uploadEventPhoto = async (orgId: string, eventId: string, formData: FormData): Promise<PhotoUploadResponse> => {
    try {
        const response = await axiosInstance.post<PhotoUploadResponse>(
            `/organizations/${orgId}/events/${eventId}/photos`,
            formData,
            {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            }
        );
        return response.data;
    } catch (error) {
        console.error('Error uploading photo to event:', error);
        throw error;
    }
};


}

src/main.tsx:
{
import 'bootstrap/dist/css/bootstrap.css';
import 'bootstrap-icons/font/bootstrap-icons.css';
import './styles/global.css';
import './styles/footer.css';
import './styles/auth.css';
import './styles/organizationRow.css';
import './styles/galleryCard.css';
import './styles/SideBar.css';
import './styles/layout.css';
import './styles/navBarButton.css';
import './styles/accountSettings.css';
import './styles/createOrganization.css';
import './styles/membership.css';
import './styles/member.css';

import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';

import AuthProvider from './context/AuthProvider';

createRoot(document.getElementById('root')!).render(
    <StrictMode>
        <BrowserRouter>
            <AuthProvider>
                <App />
            </AuthProvider>
        </BrowserRouter>
    </StrictMode>
);
}

src/pages/AccountSettings/AccountSettings.test.tsx:
{
import React from 'react';
import { fireEvent, screen, waitFor } from '@testing-library/react';
import { renderWithRouter } from '../../utils/test-utils';
import AccountSettings from './AccountSettings';
import { changePassword, deleteAccount } from '../../context/AuthService';

// Mock the AuthService functions
jest.mock('../../context/AuthService', () => ({
    changePassword: jest.fn(),
    deleteAccount: jest.fn(),
}));

// Mock user for AuthContext
const mockUser = {
    id: '123',
    email: 'test@example.com',
    firstName: 'Test',
    lastName: 'User',
    role: 'user',
};

// Mock AuthContext with user data
const mockAuthContext = {
    user: mockUser,
    token: 'test-token',
    setUser: jest.fn(),
    setToken: jest.fn(),
    logout: jest.fn(),
};

// Mock useNavigate
const mockNavigate = jest.fn();
jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    useNavigate: () => mockNavigate,
}));

describe('AccountSettings Component', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });

    test('renders account information correctly', () => {
        renderWithRouter(<AccountSettings />, { authContext: mockAuthContext });

        expect(screen.getByText(/Account Settings/i)).toBeInTheDocument();
        expect(screen.getByText(/Personal Information/i)).toBeInTheDocument();

        // Check user info is displayed
        expect(screen.getByText(/Account name: Test User/i)).toBeInTheDocument();
        expect(screen.getByText(/Account Email: test@example.com/i)).toBeInTheDocument();
        expect(screen.getByText(/Account Type: user/i)).toBeInTheDocument();
    });

    test('renders password change form', () => {
        renderWithRouter(<AccountSettings />, { authContext: mockAuthContext });

        expect(screen.getByLabelText(/Current Password:/i)).toBeInTheDocument();
        expect(screen.getByLabelText(/New Password:/i)).toBeInTheDocument();
        expect(screen.getByLabelText(/Confirm Password:/i)).toBeInTheDocument();

        expect(screen.getByRole('button', { name: /Cancel/i })).toBeInTheDocument();
        expect(screen.getByRole('button', { name: /Save Changes/i })).toBeInTheDocument();
    });

    test('validates password change form', async () => {
        renderWithRouter(<AccountSettings />, { authContext: mockAuthContext });

        // Submit with empty fields
        fireEvent.click(screen.getByRole('button', { name: /Save Changes/i }));

        await waitFor(() => {
            expect(screen.getByText(/Current password is required/i)).toBeInTheDocument();
        });

        // Fill current password but leave new passwords empty
        fireEvent.change(screen.getByLabelText(/Current Password:/i), {
            target: { value: 'password123' },
        });

        fireEvent.click(screen.getByRole('button', { name: /Save Changes/i }));

        await waitFor(() => {
            expect(screen.getByText(/New password is required/i)).toBeInTheDocument();
        });

        // Fill non-matching passwords
        fireEvent.change(screen.getByLabelText(/New Password:/i), {
            target: { value: 'newpassword123' },
        });

        fireEvent.change(screen.getByLabelText(/Confirm Password:/i), {
            target: { value: 'differentpassword' },
        });

        fireEvent.click(screen.getByRole('button', { name: /Save Changes/i }));

        await waitFor(() => {
            expect(screen.getByText(/New passwords do not match/i)).toBeInTheDocument();
        });
    });

    test('successfully changes password', async () => {
        (changePassword as jest.Mock).mockResolvedValue({ data: { status: 'success' } });

        renderWithRouter(<AccountSettings />, { authContext: mockAuthContext });

        // Fill out form with valid data
        fireEvent.change(screen.getByLabelText(/Current Password:/i), {
            target: { value: 'password123' },
        });

        fireEvent.change(screen.getByLabelText(/New Password:/i), {
            target: { value: 'newpassword123' },
        });

        fireEvent.change(screen.getByLabelText(/Confirm Password:/i), {
            target: { value: 'newpassword123' },
        });

        fireEvent.click(screen.getByRole('button', { name: /Save Changes/i }));

        await waitFor(() => {
            expect(changePassword).toHaveBeenCalledWith('password123', 'newpassword123');
            expect(screen.getByText(/Password successfully updated/i)).toBeInTheDocument();
        });

        // Check form is reset
        expect(screen.getByLabelText(/Current Password:/i)).toHaveValue('');
        expect(screen.getByLabelText(/New Password:/i)).toHaveValue('');
        expect(screen.getByLabelText(/Confirm Password:/i)).toHaveValue('');
    });

    test('handles password change API error', async () => {
        (changePassword as jest.Mock).mockRejectedValue({
            response: { data: { message: 'Current password is incorrect' } },
        });

        renderWithRouter(<AccountSettings />, { authContext: mockAuthContext });

        // Fill out form
        fireEvent.change(screen.getByLabelText(/Current Password:/i), {
            target: { value: 'wrongpassword' },
        });

        fireEvent.change(screen.getByLabelText(/New Password:/i), {
            target: { value: 'newpassword123' },
        });

        fireEvent.change(screen.getByLabelText(/Confirm Password:/i), {
            target: { value: 'newpassword123' },
        });

        fireEvent.click(screen.getByRole('button', { name: /Save Changes/i }));

        await waitFor(() => {
            expect(changePassword).toHaveBeenCalledWith('wrongpassword', 'newpassword123');
            expect(screen.getByText(/Current password is incorrect/i)).toBeInTheDocument();
        });
    });

    test('validates delete account confirmation', async () => {
        renderWithRouter(<AccountSettings />, { authContext: mockAuthContext });

        const deleteButton = screen.getByRole('button', { name: /Delete Account/i });
        expect(deleteButton).toBeDisabled();

        // Use getAllByLabelText instead of getByLabelText to handle multiple elements
        const confirmationInputs = screen.getAllByLabelText(/Type "Delete" to confirm:/i);

        // Type incorrect confirmation in the first input (desktop version)
        fireEvent.change(confirmationInputs[0], {
            target: { value: 'delete' }, // lowercase, shouldn't work
        });

        expect(deleteButton).toBeDisabled();

        // Type correct confirmation
        fireEvent.change(confirmationInputs[0], {
            target: { value: 'Delete' },
        });

        expect(deleteButton).not.toBeDisabled();
    });

    test('successfully deletes account', async () => {
        (deleteAccount as jest.Mock).mockResolvedValue({ data: { status: 'success' } });

        renderWithRouter(<AccountSettings />, { authContext: mockAuthContext });

        // Get all confirmation inputs and use the first one (desktop version)
        const confirmationInputs = screen.getAllByLabelText(/Type "Delete" to confirm:/i);

        // Type correct confirmation
        fireEvent.change(confirmationInputs[0], {
            target: { value: 'Delete' },
        });

        // Click delete button
        fireEvent.click(screen.getByRole('button', { name: /Delete Account/i }));

        await waitFor(() => {
            // Check if API was called with user ID
            expect(deleteAccount).toHaveBeenCalledWith('123');
            // Check if logout and navigate are called
            expect(mockAuthContext.logout).toHaveBeenCalledTimes(1);
            expect(mockNavigate).toHaveBeenCalledWith('/login');
        });
    });

    test('handles delete account API error', async () => {
        (deleteAccount as jest.Mock).mockRejectedValue({
            response: { data: { message: 'Failed to delete account' } },
        });

        renderWithRouter(<AccountSettings />, { authContext: mockAuthContext });

        // Get all confirmation inputs and use the first one (desktop version)
        const confirmationInputs = screen.getAllByLabelText(/Type "Delete" to confirm:/i);

        // Type correct confirmation
        fireEvent.change(confirmationInputs[0], {
            target: { value: 'Delete' },
        });

        // Click delete button
        fireEvent.click(screen.getByRole('button', { name: /Delete Account/i }));

        await waitFor(() => {
            expect(deleteAccount).toHaveBeenCalledWith('123');
            expect(screen.getByText(/Failed to delete account/i)).toBeInTheDocument();
            // Should not navigate away on error
            expect(mockNavigate).not.toHaveBeenCalled();
        });
    });

    test('cancel button resets form fields', () => {
        renderWithRouter(<AccountSettings />, { authContext: mockAuthContext });

        // Fill form fields
        fireEvent.change(screen.getByLabelText(/Current Password:/i), {
            target: { value: 'password123' },
        });

        fireEvent.change(screen.getByLabelText(/New Password:/i), {
            target: { value: 'newpassword123' },
        });

        fireEvent.change(screen.getByLabelText(/Confirm Password:/i), {
            target: { value: 'newpassword123' },
        });

        // Click cancel
        fireEvent.click(screen.getByRole('button', { name: /Cancel/i }));

        // Check if fields are cleared
        expect(screen.getByLabelText(/Current Password:/i)).toHaveValue('');
        expect(screen.getByLabelText(/New Password:/i)).toHaveValue('');
        expect(screen.getByLabelText(/Confirm Password:/i)).toHaveValue('');
    });
});
}

src/pages/AccountSettings/AccountSettings.tsx:
{
import React, { useState, useContext } from 'react';
import { Container, Row, Col, Form, Button, InputGroup } from 'react-bootstrap';
import { ArrowLeft, BoxArrowRight } from 'react-bootstrap-icons';
import { useNavigate, NavLink } from 'react-router-dom';
import AuthContext from '../../context/AuthContext';
import NavButton from '../../components/navButton/NavButton';
import FormInput from '../../components/forms/FormInput/FormInput';
import { changePassword, deleteAccount } from '../../context/AuthService';

interface AccountSettingsProps {
    className?: string;
}

const AccountSettings: React.FC<AccountSettingsProps> = ({ className = '' }) => {
    const navigate = useNavigate();
    const { user, logout } = useContext(AuthContext);

    // Form states
    const [currentPassword, setCurrentPassword] = useState('');
    const [newPassword, setNewPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [deleteConfirmation, setDeleteConfirmation] = useState('');
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(false);

    // Handle password change
    const handlePasswordChange = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();

        // Validation
        if (!currentPassword) {
            setError('Current password is required');
            return;
        }

        if (!newPassword) {
            setError('New password is required');
            return;
        }

        if (newPassword !== confirmPassword) {
            setError('New passwords do not match');
            return;
        }

        if (newPassword.length < 8) {
            setError('Password must be at least 8 characters long');
            return;
        }

        setError(null);
        setIsLoading(true);

        try {
            // Call the API to change password
            await changePassword(currentPassword, newPassword);

            // Set success message and reset form
            setSuccess('Password successfully updated');

            // Reset form
            setCurrentPassword('');
            setNewPassword('');
            setConfirmPassword('');
        } catch (err: any) {
            console.error('Failed to update password:', err);
            // Check if the error has a specific message about incorrect password
            if (err.response && err.response.data && err.response.data.message) {
                setError(err.response.data.message);
            } else {
                setError('Failed to update password. Please try again.');
            }
        } finally {
            setIsLoading(false);
        }
    };

    // Handle account deletion
    const handleDeleteAccount = async () => {
        if (deleteConfirmation !== 'Delete') {
            setError('Please type "Delete" to confirm account deletion');
            return;
        }

        setError(null);
        setIsLoading(true);

        try {
            // Call the API to delete account
            if (user && user.id) {
                await deleteAccount(user.id);

                // Log out and redirect
                logout();
                navigate('/login');
            } else {
                throw new Error('User ID not found');
            }
        } catch (err: any) {
            console.error('Failed to delete account:', err);
            // Check if the error has a specific message
            if (err.response && err.response.data && err.response.data.message) {
                setError(err.response.data.message);
            } else {
                setError('Failed to delete account. Please try again.');
            }
        } finally {
            setIsLoading(false);
        }
    };

    // Cancel changes
    const handleCancel = () => {
        setCurrentPassword('');
        setNewPassword('');
        setConfirmPassword('');
        setDeleteConfirmation('');
        setError(null);
        setSuccess(null);
    };

    return (
        <div className={`account-settings bg-dark text-light min-vh-100 ${className}`}>
            {/* Header - No border */}
            <div className="py-3">
                <Container fluid>
                    <Row className="align-items-center">
                        <Col xs={3} className="d-flex align-items-center">
                            <NavLink to="/" className="text-light text-decoration-none">
                                <ArrowLeft className="me-2" />
                                Back to Home
                            </NavLink>
                        </Col>
                        <Col xs={6} className="text-center">
                            <h2 className="mb-0">Account Settings</h2>
                        </Col>
                        <Col xs={3} className="text-end">
                            <NavLink to="/logout" className="text-light">
                                <BoxArrowRight size={24} />
                            </NavLink>
                        </Col>
                    </Row>
                </Container>
            </div>

            {/* Main Content */}
            <Container fluid className="py-3">
                {/* Account Info Section */}
                <Row className="justify-content-center mb-5">
                    <Col xs={12} md={8} lg={6}>
                        <h3 className="text-center mb-3">Personal Information</h3>

                        {/* Display user information */}
                        <div className="user-info mb-5">
                            <p className="text-center mb-3" style={{ fontSize: '1.50rem' }}>
                                Account name: {user?.firstName} {user?.lastName}
                            </p>
                            <p className="text-center mb-3" style={{ fontSize: '1.50rem' }}>
                                Account Email: {user?.email}
                            </p>
                            <p className="text-center mb-5" style={{ fontSize: '1.50rem' }}>
                                Account Type:{' '}
                                {user?.role
                                    ? user.role.charAt(0).toUpperCase() +
                                      user.role.slice(1).toLowerCase()
                                    : 'User'}
                            </p>
                        </div>

                        {/* Combined form for both password change and delete account to avoid separation */}
                        <div className="account-actions">
                            {error && (
                                <div className="alert alert-danger" role="alert">
                                    {error}
                                </div>
                            )}

                            {success && (
                                <div className="alert alert-success" role="alert">
                                    {success}
                                </div>
                            )}

                            {/* Password change section */}
                            <div className="password-change mb-5">
                                <Form.Group className="mb-4" controlId="currentPassword">
                                    <Form.Label>Current Password:</Form.Label>
                                    <Form.Control
                                        type="password"
                                        placeholder="Enter current password"
                                        value={currentPassword}
                                        onChange={e => setCurrentPassword(e.target.value)}
                                        className="bg-white text-dark border-secondary"
                                    />
                                </Form.Group>

                                <Form.Group className="mb-4" controlId="newPassword">
                                    <Form.Label>New Password:</Form.Label>
                                    <Form.Control
                                        type="password"
                                        placeholder="Enter new password"
                                        value={newPassword}
                                        onChange={e => setNewPassword(e.target.value)}
                                        className="bg-white text-dark border-secondary"
                                    />
                                </Form.Group>

                                <Form.Group className="mb-4" controlId="confirmPassword">
                                    <Form.Label>Confirm Password:</Form.Label>
                                    <Form.Control
                                        type="password"
                                        placeholder="Confirm new password"
                                        value={confirmPassword}
                                        onChange={e => setConfirmPassword(e.target.value)}
                                        className="bg-white text-dark border-secondary"
                                    />
                                </Form.Group>

                                {/* Password change buttons */}
                                <div className="d-flex justify-content-between mb-5">
                                    <Button
                                        variant="secondary"
                                        onClick={handleCancel}
                                        disabled={isLoading}
                                        style={{
                                            minWidth: '160px',
                                            height: '35px',
                                            fontSize: '14px',
                                            whiteSpace: 'nowrap',
                                            paddingLeft: '8px',
                                            paddingRight: '8px',
                                            marginLeft: '-50px', // Move button LEFT by 50px
                                        }}
                                    >
                                        Cancel
                                    </Button>
                                    <Button
                                        variant="secondary"
                                        onClick={e => {
                                            e.preventDefault();
                                            handlePasswordChange(e as any);
                                        }}
                                        disabled={isLoading}
                                        style={{
                                            minWidth: '160px',
                                            height: '35px',
                                            fontSize: '14px',
                                            whiteSpace: 'nowrap',
                                            paddingLeft: '8px',
                                            paddingRight: '8px',
                                            marginRight: '-50px', // Move button RIGHT by 50px
                                        }}
                                    >
                                        {isLoading ? 'Processing...' : 'Save Changes'}
                                    </Button>
                                </div>
                            </div>

                            {/* Delete Account Section - No border or margin that would create a line, with space between heading and content */}
                            <div
                                className="delete-section"
                                style={{ borderTop: 'none', marginTop: '-20px' }}
                            >
                                <h4 className="text-center mb-4 fs-5">Delete Account?</h4>

                                {/* For medium screens and up - inline display */}
                                <div className="d-none d-md-flex align-items-center justify-content-center">
                                    <Form.Label htmlFor="deleteConfirmation" className="me-3 mb-0">
                                        Type "Delete" to confirm:
                                    </Form.Label>
                                    <Form.Control
                                        id="deleteConfirmation"
                                        type="text"
                                        placeholder="Type 'Delete'"
                                        value={deleteConfirmation}
                                        onChange={e => setDeleteConfirmation(e.target.value)}
                                        className="bg-white text-dark border-secondary me-3"
                                        style={{ width: '150px' }}
                                    />
                                    <Button
                                        variant="danger"
                                        onClick={handleDeleteAccount}
                                        disabled={deleteConfirmation !== 'Delete' || isLoading}
                                        className="px-3 py-1"
                                        size="sm"
                                    >
                                        {isLoading ? 'Processing...' : 'Delete Account'}
                                    </Button>
                                </div>

                                {/* For small screens - stacked display with smaller text */}
                                <div className="d-flex d-md-none flex-column align-items-center">
                                    <Form.Label
                                        htmlFor="deleteConfirmationMobile"
                                        className="mb-1 small"
                                    >
                                        Type "Delete" to confirm:
                                    </Form.Label>
                                    <div className="d-flex mb-2 align-items-center">
                                        <Form.Control
                                            id="deleteConfirmationMobile"
                                            type="text"
                                            placeholder="Type 'Delete'"
                                            value={deleteConfirmation}
                                            onChange={e => setDeleteConfirmation(e.target.value)}
                                            className="bg-white text-dark border-secondary me-2"
                                            style={{ width: '120px' }}
                                            size="sm"
                                        />
                                        <Button
                                            variant="danger"
                                            onClick={handleDeleteAccount}
                                            disabled={deleteConfirmation !== 'Delete' || isLoading}
                                            className="px-2 py-1"
                                            size="sm"
                                        >
                                            {isLoading ? '...' : 'Delete'}
                                        </Button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </Col>
                </Row>
            </Container>
        </div>
    );
};

export default AccountSettings;
}

src/pages/Events/CreateEvent.tsx:
{
import React, { useState, useContext } from 'react';
import { Container, Form, Button, Row, Col, Alert } from 'react-bootstrap';
import { useNavigate, useParams } from 'react-router-dom';
import AuthContext from '../../context/AuthContext';
import * as icon from 'react-bootstrap-icons';
import { createEvent } from '../../context/OrgService';

// Import components
import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import { NavLink } from 'react-router-dom';

interface EventData {
  title: string;
  description: string;
  date: string;
}

const CreateEvent: React.FC = () => {
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const { user, token } = useContext(AuthContext);
  const [eventData, setEventData] = useState<EventData>({
    title: '',
    description: '',
    date: ''
  });
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');

  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEventData({
      ...eventData,
      title: e.target.value
    });
  };

  const handleDescriptionChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setEventData({
      ...eventData,
      description: e.target.value
    });
  };

  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEventData({
      ...eventData,
      date: e.target.value
    });
  };

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };

  const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
  };

  /* Components to be injected into the TopBar*/
  const searchComponent = (
    <SearchBar
      value={searchTerm}
      onChange={handleSearchChange}
      onSubmit={handleSearchSubmit}
      placeholder="Search events..."
      className="ms-3"
    />
  );

  /* Components to be injected into the TopBar*/
  const rightComponents = (
    <>
      <div className="d-flex align-items-center gap-3">
        {user && token ? (
          <>
            <NavLink to="/account-settings" className="text-light top-bar-element">
              <icon.GearFill size={24} />
            </NavLink>
            <NavLink to="/logout" className="text-light top-bar-element">
              <icon.BoxArrowRight size={24} />
            </NavLink>
          </>
        ) : (
          <>
            <NavButton to='/register' variant="outline-light" className="mx-1 top-bar-element">
              Register
            </NavButton>
            <NavButton to='/login' variant="outline-light" className="top-bar-element">
              Login
            </NavButton>
          </>
        )}
      </div>
    </>
  );

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    
    // Form validation
    if (!eventData.title.trim()) {
      setError('Event title is required');
      return;
    }

    if (!eventData.description.trim()) {
      setError('Event description is required');
      return;
    }

    if (!eventData.date) {
      setError('Event date is required');
      return;
    }
    
    if (!id) {
      setError('Organization ID is missing');
      return;
    }
    
    setIsSubmitting(true);
    setError(null);
    
    try {
      // Make API call to create event
      const response = await createEvent(id, eventData);
      
      console.log('Event created successfully:', response);
      setSuccess('Event created successfully!');
      
      // Redirect back to events page after a short delay
      setTimeout(() => {
        navigate(`/organizations/${id}/events`);
      }, 1500);
    } catch (error: any) {
      console.error('Error creating event:', error);
      
      // Handle specific error messages from the API
      if (error.response && error.response.data && error.response.data.message) {
        setError(error.response.data.message);
      } else {
        setError('Failed to create event. Please try again.');
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <>
      <Row className="g-0">
        <Col md="auto" className="sidebar-container">
          <Sidebar />
        </Col>
        <Col className="main-content p-0">
          <div className="sticky-top bg-dark z-3">
            <Row>
              <TopBar
                searchComponent={searchComponent}
                rightComponents={rightComponents}
              />
            </Row>
          </div>
          <div className="create-event-page bg-dark text-light min-vh-100">
            {/* Main Content */}
            <Container fluid className="px-4 pt-4">
              <Row className="justify-content-center">
                <Col xs={12} md={8} lg={6}>
                  <h1 className="text-center mb-5" style={{ fontFamily: 'Michroma, sans-serif' }}>Events</h1>
                  
                  <div className="text-center mb-5">
                    <h2 className="fs-1" style={{ fontFamily: 'Michroma, sans-serif' }}>
                      Create a New Event
                    </h2>
                  </div>

                  {error && (
                    <Alert variant="danger" className="my-3">
                      {error}
                    </Alert>
                  )}

                  {success && (
                    <Alert variant="success" className="my-3">
                      {success}
                    </Alert>
                  )}

                  <Form onSubmit={handleSubmit}>
                    <Form.Group className="mb-4" controlId="eventTitle">
                      <Form.Label style={{ fontFamily: 'Michroma, sans-serif' }} className="fs-4">
                        Event Title
                      </Form.Label>
                      <Form.Control
                        type="text"
                        placeholder="Enter event title"
                        value={eventData.title}
                        onChange={handleTitleChange}
                        className="bg-white border-secondary py-3"
                        required
                      />
                    </Form.Group>

                    <Form.Group className="mb-4" controlId="eventDescription">
                      <Form.Label style={{ fontFamily: 'Michroma, sans-serif' }} className="fs-4">
                        Event Description
                      </Form.Label>
                      <Form.Control
                        as="textarea"
                        rows={5}
                        placeholder="Enter event description"
                        value={eventData.description}
                        onChange={handleDescriptionChange}
                        className="bg-white border-secondary py-3"
                        required
                      />
                    </Form.Group>

                    <Form.Group className="mb-4" controlId="eventDate">
                      <Form.Label style={{ fontFamily: 'Michroma, sans-serif' }} className="fs-4">
                        Event Date
                      </Form.Label>
                      <Form.Control
                        type="date"
                        value={eventData.date}
                        onChange={handleDateChange}
                        className="bg-white border-secondary py-3"
                        required
                      />
                    </Form.Group>

                    <div className="position-relative mt-5 pt-5" style={{ height: "250px" }}>
                      <div className="position-absolute" style={{ left: "-200px", top: "200px" }}>
                        <Button
                          variant="secondary"
                          onClick={() => navigate(`/organizations/${id}/events`)}
                          disabled={isSubmitting}
                          className="py-2 px-4"
                        >
                          Cancel
                        </Button>
                      </div>
                      
                      <div className="position-absolute" style={{ right: "-200px", top: "200px" }}>
                        <Button
                          variant="secondary"
                          type="submit"
                          disabled={isSubmitting}
                          className="py-2 px-4"
                        >
                          {isSubmitting ? 'Creating...' : 'Create Event'}
                        </Button>
                      </div>
                    </div>
                  </Form>
                </Col>
              </Row>
            </Container>
          </div>
        </Col>
      </Row>
    </>
  );
};

export default CreateEvent;}

src/pages/Events/SingleEvents.tsx:
{
import React, { useState, useEffect, useContext } from 'react';
import { Button, Col, Row, Alert, Container } from 'react-bootstrap';
import * as icon from 'react-bootstrap-icons';
import { NavLink, useParams, useNavigate } from 'react-router-dom';

import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import GalleryCard from '../../components/cards/galleryCard/GalleryCard';
import { isMemberOfOrg } from '../../context/AuthService';
import { Event, getPublicOrganizationEvents, getOrganizationEvents } from '../../context/OrgService';
import AuthContext from '../../context/AuthContext';

const SingleEvents: React.FC = () => {
    const navigate = useNavigate();
    const { id } = useParams<{ id: string }>();
    const { user, token } = useContext(AuthContext);
    const [searchTerm, setSearchTerm] = useState('');

    const [memberRole, setMemberRole] = useState<string | null>(null);
    const [events, setEvents] = useState<Event[]>([]);
    const [filteredEvents, setFilteredEvents] = useState<Event[]>([]);

    const [lastEvaluatedKey, setLastEvaluatedKey] = useState<string | null>(null);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const [hasMore, setHasMore] = useState<boolean>(true);

    useEffect(() => {
        if (!id) return;

        const fetchEvents = async () => {
            let response; 
            try {
                setLoading(true);
                setError(null);
                
                if (!user || !token) { 
                    response = await getPublicOrganizationEvents(id);
                } else {
                    try {
                        const reply = await isMemberOfOrg(user.id, id);
                        const userRelationRecord = reply.data.data;
                        setMemberRole(userRelationRecord.membership.role);
                        response = await getOrganizationEvents(id);
                    } catch (membershipError) {
                        console.error(`Error checking membership status: ${membershipError}`);
                        response = await getPublicOrganizationEvents(id);
                    }
                }
                
                setEvents(response.data.events);
                setFilteredEvents(response.data.events);
                setLastEvaluatedKey(response.lastEvaluatedKey);
                setHasMore(response.lastEvaluatedKey !== null);
                setLoading(false);
            } catch (err) {
                console.error(`Error fetching events for organization ${id}:`, err);
                setError(`Failed to load events for this organization. Please try again later.`);
                setLoading(false);
            }
        };

        fetchEvents();
    }, [id, user, token]);

    useEffect(() => {
        if (searchTerm.trim() === '') {
            setFilteredEvents(events);
        } else {
            const filtered = events.filter(event => {
                const titleMatch = event.title.toLowerCase().includes(searchTerm.toLowerCase());
                const descMatch = event.description?.toLowerCase().includes(searchTerm.toLowerCase()) || false;
                return titleMatch || descMatch;
            });
            setFilteredEvents(filtered);
        }
    }, [events, searchTerm]);

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
    };

    const handleLoadMore = async () => {
        if (loading || !hasMore || !id) return;
        
        try {
            setLoading(true);
            const response = await getPublicOrganizationEvents(id, lastEvaluatedKey ?? undefined);
            const existingEventIds = new Map(events.map(event => [event.id, true]));
            
            const newEvents = response.data.events.filter(event => !existingEventIds.has(event.id));
            
            if (newEvents.length > 0) {
                setEvents(prev => [...prev, ...newEvents]);
            }
            
            setLastEvaluatedKey(response.lastEvaluatedKey);
            setHasMore(response.lastEvaluatedKey !== null);
            setLoading(false);
        } catch (err) {
            console.error(`Error loading more events for organization ${id}:`, err);
            setError('Failed to load more events. Please try again.');
            setLoading(false);
        }
    };

    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search events..."
            className="ms-3"
        />
    );
    
    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        {/* Create Event should only appear when an admin user is logged in */}
                        {memberRole === 'ADMIN' && (
                            <NavButton
                                to={`/organizations/${id}/events/create`}
                                variant="outline-light"
                                className="mx-1 top-bar-element"
                            >
                                Create Event
                            </NavButton>
                        )}

                        <NavLink to="/account-settings" className="text-light top-bar-element">
                            <icon.GearFill size={24} />
                        </NavLink>
                        <NavLink to="/logout" className="text-light top-bar-element">
                            <icon.BoxArrowRight size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    const pageActionComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        {/* Only show Members link if user is a member or admin */}
                        {memberRole === 'ADMIN' && (
                            <NavLink to={`/organizations/${id}/members`} className="text-light top-bar-element">
                                <icon.PersonLinesFill size={24} />
                            </NavLink>
                        )}
                        <NavLink to={`/organizations/${id}/details`} className="text-light top-bar-element">
                            <icon.ListUl size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <div className="sticky-top bg-dark z-3">
                        <Row>
                            <TopBar
                                searchComponent={searchComponent}
                                rightComponents={rightComponents}
                            />
                        </Row>
                    </div>
                    <div className="p-3 bg-dark text-white">
                        <Row className="align-items-center mb-4">
                            <Col>
                                <h1 className="mb-4">Events for {id && id.charAt(0).toUpperCase() + id.slice(1)}</h1>
                            </Col>
                            
                            <Col xs="auto" className="ms-auto me-5">
                                {pageActionComponents}
                            </Col>
                        </Row>
                        <Row>
                            {error && (
                                <div className="alert alert-danger">{error}</div>
                            )}

                            {loading && events.length === 0 ? (
                                <div className="text-center p-5">Loading events...</div>
                            ) : filteredEvents.length === 0 ? (
                                <div className="text-center p-5">
                                    {searchTerm ? 'No matching events found.' : 'No events for this organization.'}
                                    
                                    {user && token && memberRole === 'ADMIN' && (
                                        <div className="mt-4">
                                            <Button 
                                                variant="primary" 
                                                onClick={() => navigate(`/organizations/${id}/events/create`)}
                                            >
                                                Create Your First Event
                                            </Button>
                                        </div>
                                    )}
                                </div>
                            ) : (
                                <div className="d-flex flex-wrap gap-4">
                                    {filteredEvents.map(event => (
                                        <div key={event.id}>
                                            <GalleryCard
                                                item={event}
                                                className="event"
                                                orgName={event.GSI2PK}
                                            />
                                        </div>
                                    ))}
                                </div>
                            )}

                            {hasMore && filteredEvents.length > 0 && !searchTerm && (
                                <div className="text-center mt-4 mb-4">
                                    <Button
                                        onClick={handleLoadMore}
                                        disabled={loading}
                                        variant="primary"
                                    >
                                        {loading ? 'Loading...' : 'Load More'}
                                    </Button>
                                </div>
                            )}
                        </Row>
                    </div>
                </Col>
            </Row>
        </>
    );
};

export default SingleEvents;}

src/pages/Events/UploadEventPhoto.tsx:
{
import React, { useState, useContext } from 'react';
import { Container, Form, Button, Row, Col } from 'react-bootstrap';
import { useNavigate, useParams } from 'react-router-dom';
import AuthContext from '../../context/AuthContext';
import * as icon from 'react-bootstrap-icons';

import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import { NavLink } from 'react-router-dom';

import { uploadEventPhoto } from '../../context/PhotoService';

interface PhotoData {
  title: string;
  description: string;
  photo: File | null;
}

const UploadEventPhoto: React.FC = () => {
  const navigate = useNavigate();
  const { id, eid } = useParams();
  const { user, token } = useContext(AuthContext);
  const [photoData, setPhotoData] = useState<PhotoData>({
    title: '',
    description: '',
    photo: null
  });
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');

  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setPhotoData({
      ...photoData,
      title: e.target.value
    });
  };

  const handleDescriptionChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setPhotoData({
      ...photoData,
      description: e.target.value
    });
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      
      // Check file type
      if (!file.type.match('image.*')) {
        setError('Please select an image file');
        return;
      }
      
      // Check file size (e.g., limit to 5MB)
      if (file.size > 5 * 1024 * 1024) {
        setError('File size should not exceed 5MB');
        return;
      }

      setPhotoData({
        ...photoData,
        photo: file
      });
      
      // Create preview URL
      const reader = new FileReader();
      reader.onload = () => {
        setPreviewUrl(reader.result as string);
      };
      reader.readAsDataURL(file);
      
      setError(null);
    }
  };

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };

  const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    console.log('Search submitted:', searchTerm);
    // Implement search logic
  };

  /* Components to be injected into the TopBar*/
  const searchComponent = (
    <SearchBar
      value={searchTerm}
      onChange={handleSearchChange}
      onSubmit={handleSearchSubmit}
      placeholder="Search photos..."
      className="ms-3"
    />
  );

  /* Components to be injected into the TopBar*/
  const rightComponents = (
    <>
      <div className="d-flex align-items-center gap-3">
        {user && token ? (
          <>
            <NavLink to="/account-settings" className="text-light top-bar-element">
              <icon.GearFill size={24} />
            </NavLink>
            <NavLink to="/logout" className="text-light top-bar-element">
              <icon.BoxArrowRight size={24} />
            </NavLink>
          </>
        ) : (
          <>
            <NavButton to='/register' variant="outline-light" className="mx-1 top-bar-element">
              Register
            </NavButton>
            <NavButton to='/login' variant="outline-light" className="top-bar-element">
              Login
            </NavButton>
          </>
        )}
      </div>
    </>
  );

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    
    // Form validation
    if (!eid) {
      setError('Event ID is missing');
      return;
    }

    if (!photoData.photo) {
      setError('Please select a photo to upload');
      return;
    }
    
    setIsSubmitting(true);
    setError(null);
    
    // Create form data for file upload
    const formData = new FormData();
    
    if (photoData.title) {
      formData.append('title', photoData.title);
    }
    
    if (photoData.description) {
      formData.append('description', photoData.description);
    }
    
    if (photoData.photo) {
      formData.append('photo', photoData.photo);
    }
    
    try {
      // Make API call to upload photo
      await uploadEventPhoto(id as string, eid as string, formData);
      console.log('Photo uploaded successfully');
      
      // Redirect back to event photos page
      navigate(`/organizations/${id}/events/${eid}/photos`);
    } catch (error: any) {
      console.error('Error uploading photo:', error);
      
      // Handle specific error messages from the API
      if (error.response && error.response.data && error.response.data.message) {
        setError(error.response.data.message);
      } else {
        setError('Failed to upload photo. Please try again.');
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <>
      <Row className="g-0">
        <Col md="auto" className="sidebar-container">
          <Sidebar />
        </Col>
        <Col className="main-content p-0">
          <div className="sticky-top bg-dark z-3">
            <Row>
              <TopBar
                searchComponent={searchComponent}
                rightComponents={rightComponents}
              />
            </Row>
          </div>
          <div className="upload-photo-page bg-dark text-light min-vh-100">
            {/* Main Content */}
            <Container fluid className="px-4 pt-4">
              <Row className="justify-content-center">
                <Col xs={12} md={8} lg={6}>
                  <h1 className="text-center mb-5" style={{ fontFamily: 'Michroma, sans-serif' }}>Photos</h1>
                  
                  <div className="text-center mb-5">
                    <h2 className="fs-1" style={{ fontFamily: 'Michroma, sans-serif' }}>
                      Upload your Event Photos below!
                    </h2>
                  </div>

                  {error && (
                    <div className="alert alert-danger my-3" role="alert">
                      {error}
                    </div>
                  )}

                  <Form onSubmit={handleSubmit}>
                    <Form.Group className="mb-4" controlId="photoTitle">
                      <Form.Label style={{ fontFamily: 'Michroma, sans-serif' }} className="fs-4">
                        Photo Title (Optional)
                      </Form.Label>
                      <Form.Control
                        type="text"
                        placeholder="Enter photo title"
                        value={photoData.title}
                        onChange={handleTitleChange}
                        className="bg-white border-secondary py-3"
                      />
                    </Form.Group>

                    <Form.Group className="mb-4" controlId="photoDescription">
                      <Form.Label style={{ fontFamily: 'Michroma, sans-serif' }} className="fs-4">
                        Photo Description (Optional)
                      </Form.Label>
                      <Form.Control
                        type="text"
                        placeholder="Enter photo description"
                        value={photoData.description}
                        onChange={handleDescriptionChange}
                        className="bg-white border-secondary py-3"
                      />
                    </Form.Group>

                    <Form.Group className="mb-4" controlId="photoFile">
                      <Form.Label style={{ fontFamily: 'Michroma, sans-serif' }} className="fs-4">
                        Upload your Photos
                      </Form.Label>
                      
                      {previewUrl && (
                        <div className="mb-3 text-center">
                          <img 
                            src={previewUrl} 
                            alt="Photo preview" 
                            style={{ maxHeight: '200px', maxWidth: '100%' }} 
                            className="border rounded"
                          />
                        </div>
                      )}
                      
                      {/* File upload wrapper with controlled width */}
                      <div>
                        <div style={{ width: '66.7%' }}> {/* This makes it 2/3 width */}
                          <Form.Control
                            type="file"
                            onChange={handleFileChange}
                            accept="image/*"
                            className="bg-white text-dark border-secondary rounded-3"
                          />
                        </div>
                      </div>
                    </Form.Group>

                    <div className="position-relative mt-5 pt-5" style={{ height: "250px" }}>
                      <div className="position-absolute" style={{ left: "-200px", top: "200px" }}>
                        <Button
                          variant="secondary"
                          onClick={() => navigate(`/organizations/${id}/events/${eid}/photos`)}
                          disabled={isSubmitting}
                          className="py-2 px-4"
                        >
                          Cancel
                        </Button>
                      </div>
                      
                      <div className="position-absolute" style={{ right: "-200px", top: "200px" }}>
                        <Button
                          variant="secondary"
                          type="submit"
                          disabled={isSubmitting}
                          className="py-2 px-4"
                        >
                          {isSubmitting ? 'Uploading...' : 'Upload Photos'}
                        </Button>
                      </div>
                    </div>
                  </Form>
                </Col>
              </Row>
            </Container>
          </div>
        </Col>
      </Row>
    </>
  );
};

export default UploadEventPhoto;}

src/pages/Events/ViewEvents.tsx:
{
import React, { useState, useEffect, useRef, useContext } from 'react';
import { Button, Col, Row, Alert } from 'react-bootstrap';
import * as icon from 'react-bootstrap-icons';
import { NavLink, useParams, useNavigate } from 'react-router-dom';

import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import GalleryCard from '../../components/cards/galleryCard/GalleryCard';
import { getPublicOrganizationEvents } from '../../context/OrgService';
import AuthContext from '../../context/AuthContext';

const Events: React.FC = () => {
    const navigate = useNavigate();
    const { id } = useParams<{ id: string }>();
    const { user, token } = useContext(AuthContext);
    const [searchTerm, setSearchTerm] = useState('');
    const [events, setEvents] = useState<any[]>([]);
    const [filteredEvents, setFilteredEvents] = useState<any[]>([]);
    const [lastEvaluatedKey, setLastEvaluatedKey] = useState<string | null>(null);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const [hasMore, setHasMore] = useState<boolean>(true);
    const fetchedRef = useRef(false);

    // Function to handle search input changes
    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    // Function to handle search form submission
    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
    };

    // Components to be injected into the TopBar
    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search events..."
            className="ms-3"
        />
    );

    // Components to be injected into the TopBar
    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        {/* Create Event button for users */}
                        <NavButton
                            to={`/organizations/${id}/events/create`}
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Create Event
                        </NavButton>

                        <NavLink to="/account-settings" className="text-light top-bar-element">
                            <icon.GearFill size={24} />
                        </NavLink>
                        <NavLink to="/logout" className="text-light top-bar-element">
                            <icon.BoxArrowRight size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    // Additional action components for the page
    const pageActionComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        {/* PersonLinesFill icon should only appear when an admin user of an org is logged in */}
                        <NavLink
                            to={`/organizations/${id}/members`}
                            className="text-light top-bar-element"
                        >
                            <icon.PersonLinesFill size={24} />
                        </NavLink>
                        <NavLink
                            to={`/organizations/${id}/details`}
                            className="text-light top-bar-element"
                        >
                            <icon.ListUl size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    // Effect to fetch events when component mounts or when id changes
    useEffect(() => {
        // Reset state when organization ID changes
        setEvents([]);
        setFilteredEvents([]);
        setLoading(true);
        setError(null);
        fetchedRef.current = false;
        
        // Now fetch events for this specific organization
        fetchEventsForOrganization();
    }, [id]); // Depend on the id parameter

    // Effect to filter events based on search term
    useEffect(() => {
        if (searchTerm.trim() === '') {
            setFilteredEvents(events);
        } else {
            const filtered = events.filter(event => {
                const titleMatch = event.title.toLowerCase().includes(searchTerm.toLowerCase());
                const descMatch = event.description?.toLowerCase().includes(searchTerm.toLowerCase()) || false;
                return titleMatch || descMatch;
            });
            setFilteredEvents(filtered);
        }
    }, [events, searchTerm]);

    // Function to fetch events for an organization
    const fetchEventsForOrganization = async () => {
        if (!id) {
            setError('Organization ID is missing');
            setLoading(false);
            return;
        }

        if (fetchedRef.current) return;
        fetchedRef.current = true;

        try {
            setLoading(true);
            const response = await getPublicOrganizationEvents(id);
            
            if (response.data && response.data.events) {
                setEvents(response.data.events);
                setFilteredEvents(response.data.events);
                setLastEvaluatedKey(response.lastEvaluatedKey);
                setHasMore(response.lastEvaluatedKey !== null);
            } else {
                // No events found, but that's ok - just show empty state
                setEvents([]);
                setFilteredEvents([]);
                setHasMore(false);
            }
        } catch (err) {
            console.error(`Error fetching events for organization ${id}:`, err);
            setError('Failed to fetch events.');
        } finally {
            setLoading(false);
        }
    };

    // Function to load more events
    const loadMore = async () => {
        if (loading || !hasMore || !id) return;
        
        setLoading(true);
        try {
            const response = await getPublicOrganizationEvents(id, lastEvaluatedKey || undefined);
            
            if (response.data && response.data.events) {
                setEvents(prev => [...prev, ...response.data.events]);
                setLastEvaluatedKey(response.lastEvaluatedKey);
                setHasMore(response.lastEvaluatedKey !== null);
            }
        } catch (err) {
            console.error(`Error fetching more events for organization ${id}:`, err);
            setError('Failed to load more events.');
        } finally {
            setLoading(false);
        }
    };

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <div className="sticky-top bg-dark z-3">
                        <Row>
                            <TopBar
                                searchComponent={searchComponent}
                                rightComponents={rightComponents}
                            />
                        </Row>
                    </div>
                    <div className="p-3 bg-dark text-white">
                        <Row className="align-items-center mb-4">
                            <Col>
                                <h1 className="mb-4">Events for {id && (id.charAt(0).toUpperCase() + id.slice(1))}</h1>
                            </Col>

                            <Col xs="auto" className="ms-auto me-5">
                                {pageActionComponents}
                            </Col>
                        </Row>
                        <Row>
                            {error && <Alert variant="danger">{error}</Alert>}

                            {loading && events.length === 0 ? (
                                <div className="text-center p-5">
                                    <p>Loading events...</p>
                                </div>
                            ) : filteredEvents.length === 0 ? (
                                <div className="text-center p-5">
                                    <p>No events found for this organization.</p>
                                    {user && token && (
                                        <Button 
                                            variant="primary" 
                                            onClick={() => navigate(`/organizations/${id}/events/create`)}
                                            className="mt-3"
                                        >
                                            Create Your First Event
                                        </Button>
                                    )}
                                </div>
                            ) : (
                                <div className="d-flex flex-wrap gap-4">
                                    {filteredEvents.map(event => (
                                        <div key={event.id}>
                                            <GalleryCard
                                                item={event}
                                                className="event"
                                                orgName={event.GSI2PK}
                                            />
                                        </div>
                                    ))}
                                </div>
                            )}
                            
                            {hasMore && events.length > 0 && (
                                <div className="text-center mt-4 mb-4">
                                    <Button
                                        onClick={loadMore}
                                        disabled={loading}
                                        variant="primary"
                                    >
                                        {loading ? 'Loading...' : 'Load More'}
                                    </Button>
                                </div>
                            )}
                        </Row>
                    </div>
                </Col>
            </Row>
        </>
    );
};

export default Events;}

src/pages/Home/Home.test.tsx:
{
import React from 'react';
import { screen, fireEvent, waitFor, act } from '@testing-library/react';
import Home from './Home';
import { renderWithRouter } from '../../utils/test-utils';
import { getPublicOrganizations } from '../../context/OrgService';

jest.mock('../../context/OrgService', () => ({
    getPublicOrganizations: jest.fn(),
    getPublicOrganizationEvents: jest.fn(),
}));

jest.mock('../../components/navButton/NavButton', () => ({
    __esModule: true,
    default: ({ children, to, className, variant }: any) => (
        <button data-testid="mock-nav-button" data-to={to} className={className} data-variant={variant}>
            {children}
        </button>
    ),
}));


jest.mock('../../components/bars/TopBar/TopBar', () => ({
    __esModule: true,
    default: ({ searchComponent, rightComponents }: any) => (
        <div data-testid="mock-top-bar">
            <div data-testid="search-component-container">{searchComponent}</div>
            <div data-testid="right-components-container">{rightComponents}</div>
        </div>
    ),
}));


jest.mock('../../components/bars/SideBar/SideBar', () => ({
    __esModule: true,
    default: () => <div data-testid="mock-sidebar">Sidebar Content</div>,
}));

jest.mock('../../components/organizationRow/OrganizationRow', () => ({
    __esModule: true,
    default: ({ organization }: any) => (
        <div data-testid="mock-organization-row" data-organization-id={organization.id}>
            {organization.name}
        </div>
    ),
}));

describe('Home Component', () => {
    beforeEach(() => {
        
        jest.clearAllMocks();
        
        (getPublicOrganizations as jest.Mock).mockResolvedValue({
            data: {
                organizations: [
                    {
                        id: '1',
                        name: 'Test Organization 1',
                        description: 'Test Description 1',
                        logoUrl: 'https://example.com/logo1.jpg',
                        PK: 'ORG#TEST1',
                    },
                    {
                        id: '2',
                        name: 'Test Organization 2',
                        description: 'Test Description 2',
                        logoUrl: 'https://example.com/logo2.jpg',
                        PK: 'ORG#TEST2',
                    },
                    {
                        id: '3',
                        name: 'Test Organization 3',
                        description: 'Test Description 3',
                        logoUrl: 'https://example.com/logo3.jpg',
                        PK: 'ORG#TEST3',
                    },
                ],
            },
            lastEvaluatedKey: null,
        });
    });

    test('renders the page structure correctly', async () => {
        await act(async () => {
            renderWithRouter(<Home />);
        });
        
        expect(screen.getByTestId('mock-sidebar')).toBeInTheDocument();
        expect(screen.getByTestId('mock-top-bar')).toBeInTheDocument();
        expect(screen.getByText('Organizations & Event')).toBeInTheDocument();
        
        await waitFor(() => {
            expect(screen.queryByText('Loading organizations...')).not.toBeInTheDocument();
            expect(screen.getAllByTestId('mock-organization-row')).toHaveLength(3);
        });
    });

    test('calls getPublicOrganizations on initial render', async () => {
        await act(async () => {
            renderWithRouter(<Home />);
        });
        
        expect(getPublicOrganizations).toHaveBeenCalledTimes(1);
        
        
        await waitFor(() => {
            expect(screen.getAllByTestId('mock-organization-row')).toHaveLength(3);
        });
    });

    test('displays login and register buttons when not authenticated', async () => {
        await act(async () => {
            renderWithRouter(<Home />);
        });
        
        const rightComponentsContainer = screen.getByTestId('right-components-container');
        const registerButton = screen.getByText('Register');
        const loginButton = screen.getByText('Login');
        
        expect(rightComponentsContainer).toContainElement(registerButton);
        expect(rightComponentsContainer).toContainElement(loginButton);
        
        expect(registerButton.closest('[data-to]')).toHaveAttribute('data-to', '/register');
        expect(loginButton.closest('[data-to]')).toHaveAttribute('data-to', '/login');
    });

    test('does not display login and register buttons when authenticated', async () => {
        const authContext = {
            user: { id: '1', email: 'test@example.com', firstName: 'Test', lastName: 'User', role: 'user' },
            token: 'valid-token',
            setUser: jest.fn(),
            setToken: jest.fn(),
            logout: jest.fn(),
        };
        
        await act(async () => {
            renderWithRouter(<Home />, { authContext });
        });
        
        expect(screen.queryByText('Register')).not.toBeInTheDocument();
        expect(screen.queryByText('Login')).not.toBeInTheDocument();
    });

    test('shows search bar that responds to input', async () => {
        await act(async () => {
            renderWithRouter(<Home />);
        });
        
        const searchInput = screen.getByPlaceholderText('Search organizations...');
        expect(searchInput).toBeInTheDocument();
        await act(async () => {
            fireEvent.change(searchInput, { target: { value: 'Test Search' } });
        });
        
        expect(searchInput).toHaveValue('Test Search');
    });

    test('handles search submission', async () => {
        await act(async () => {
            renderWithRouter(<Home />);
        });
        
        const originalConsoleLog = console.log;
        const mockConsoleLog = jest.fn();
        console.log = mockConsoleLog;
        
        const searchInput = screen.getByPlaceholderText('Search organizations...');
        await act(async () => {
            fireEvent.change(searchInput, { target: { value: 'Test Search' } });
        });
        
        
        const form = searchInput.closest('form');
        await act(async () => {
            fireEvent.submit(form!);
        });
        
        expect(mockConsoleLog).toHaveBeenCalledWith('Search submitted:', 'Test Search');
        console.log = originalConsoleLog;
    });

    test('displays load more button and loads more organizations when clicked', async () => {
        const additionalOrgs = {
            data: {
                organizations: [
                    {
                        id: '4',
                        name: 'Test Organization 4',
                        description: 'Test Description 4',
                        logoUrl: 'https://example.com/logo4.jpg',
                        PK: 'ORG#TEST4',
                    },
                    {
                        id: '5',
                        name: 'Test Organization 5',
                        description: 'Test Description 5',
                        logoUrl: 'https://example.com/logo5.jpg',
                        PK: 'ORG#TEST5',
                    },
                ],
            },
            lastEvaluatedKey: null,
        };
        
        
        (getPublicOrganizations as jest.Mock).mockClear();
        (getPublicOrganizations as jest.Mock).mockResolvedValueOnce({
            data: {
                organizations: [
                    {
                        id: '1',
                        name: 'Test Organization 1',
                        description: 'Test Description 1',
                        logoUrl: 'https://example.com/logo1.jpg',
                        PK: 'ORG#TEST1',
                    },
                    {
                        id: '2',
                        name: 'Test Organization 2',
                        description: 'Test Description 2',
                        logoUrl: 'https://example.com/logo2.jpg',
                        PK: 'ORG#TEST2',
                    },
                    {
                        id: '3',
                        name: 'Test Organization 3',
                        description: 'Test Description 3',
                        logoUrl: 'https://example.com/logo3.jpg',
                        PK: 'ORG#TEST3',
                    },
                ],
            },
            lastEvaluatedKey: 'last-key',
        });
        
        
        (getPublicOrganizations as jest.Mock).mockResolvedValueOnce(additionalOrgs);
        await act(async () => {
            renderWithRouter(<Home />);
        });

        await waitFor(() => {
            expect(screen.getAllByTestId('mock-organization-row')).toHaveLength(3);
        });
        
        
        const loadMoreButton = screen.getByText('Load More');
        expect(loadMoreButton).toBeInTheDocument();
        await act(async () => {
            fireEvent.click(loadMoreButton);
        });
        
        expect(getPublicOrganizations).toHaveBeenCalledTimes(2);
        expect(getPublicOrganizations).toHaveBeenLastCalledWith('last-key');
        
        await waitFor(() => {
            expect(screen.getAllByTestId('mock-organization-row')).toHaveLength(5);
        });
    });

    test('handles error when fetching organizations fails', async () => {
        
        (getPublicOrganizations as jest.Mock).mockClear();
        (getPublicOrganizations as jest.Mock).mockRejectedValueOnce(new Error('Failed to fetch'));
        const originalConsoleError = console.error;
        console.error = jest.fn();
        
        await act(async () => {
            renderWithRouter(<Home />);
        });
        
        
        await waitFor(() => {
            expect(screen.getByText('Failed to load organizations. Please try again later.')).toBeInTheDocument();
        });
        
        
        console.error = originalConsoleError;
    });

    test('renders empty state when no organizations are returned', async () => {
        
        (getPublicOrganizations as jest.Mock).mockClear();
        (getPublicOrganizations as jest.Mock).mockResolvedValueOnce({
            data: {
                organizations: [],
            },
            lastEvaluatedKey: null,
        });
        
        await act(async () => {
            renderWithRouter(<Home />);
        });
        
        await waitFor(() => {
            expect(screen.getByText('No organizations found.')).toBeInTheDocument();
        });
    });
});
}

src/pages/Home/Home.tsx:
{
import React, { useState, useEffect, useContext } from 'react';
import AuthContext from '../../context/AuthContext';
import { Col, Row, Button, Container } from 'react-bootstrap';
import * as icon from 'react-bootstrap-icons';

import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import { NavLink } from 'react-router-dom';
import OrganizationRow from '../../components/organizationRow/OrganizationRow';
import { Organization, getPublicOrganizations } from '../../context/OrgService';

const Home = () => {
    const { user, token } = useContext(AuthContext);
    const [searchTerm, setSearchTerm] = useState('');
    const [organizations, setOrganizations] = useState<Organization[]>([]);
    const [displayCount, setDisplayCount] = useState<number>(3); // Start with 3 rows
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const [lastEvaluatedKey, setLastEvaluatedKey] = useState<string | null>(null);
    const [allOrganizationsLoaded, setAllOrganizationsLoaded] = useState<boolean>(false);

    const fetchOrganizations = async (key: string | undefined = undefined) => {
        try {
            setLoading(true);

            const response = await getPublicOrganizations(key);

            if (key) {
                setOrganizations(prev => [...prev, ...response.data.organizations]);
            } else {
                setOrganizations(response.data.organizations);
            }

            setLastEvaluatedKey(response.lastEvaluatedKey);
            setAllOrganizationsLoaded(response.lastEvaluatedKey === null);
            setLoading(false);
        } catch (err) {
            console.error('Error fetching organizations:', err);
            setError('Failed to load organizations. Please try again later.');
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchOrganizations();
    }, []);

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        console.log('Search submitted:', searchTerm);
        // searching
    };

    const handleLoadMore = () => {
        if (displayCount >= organizations.length) {
            if (lastEvaluatedKey) {
                fetchOrganizations(lastEvaluatedKey);
            }
        }
        setDisplayCount(prev => prev + 3);
    };

    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search organizations..."
            className="ms-2"
        />
    );

    /* Components to be injected into the TopBar*/
    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        <NavLink to="/account-settings" className="text-light top-bar-element">
                            <icon.GearFill size={24} />
                        </NavLink>
                        <NavLink to="/logout" className="text-light top-bar-element">
                            <icon.BoxArrowRight size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    const displayedOrganizations = organizations.slice(0, displayCount);

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <TopBar searchComponent={searchComponent} rightComponents={rightComponents} />

                    <Container fluid className="px-4 py-3">
                        <h1 className="mb-4 page-title">Organizations & Event</h1>

                        {loading && organizations.length === 0 ? (
                            <div className="text-center p-5">Loading organizations...</div>
                        ) : error ? (
                            <div className="alert alert-danger">{error}</div>
                        ) : organizations.length === 0 ? (
                            <div className="text-center p-5">No organizations found.</div>
                        ) : (
                            <>
                                {/* Organization Rows */}
                                {displayedOrganizations.map(org => (
                                    <OrganizationRow key={org.id} organization={org} />
                                ))}

                                {/* Load More Button - show if more orgs to display or more to fetch */}
                                {(displayCount < organizations.length ||
                                    !allOrganizationsLoaded) && (
                                    <div className="text-center mt-4 mb-4">
                                        <Button
                                            variant="primary"
                                            onClick={handleLoadMore}
                                            disabled={loading}
                                        >
                                            {loading ? 'Loading...' : 'Load More'}
                                        </Button>
                                    </div>
                                )}
                            </>
                        )}
                    </Container>
                </Col>
            </Row>
        </>
    );
};

export default Home;
}

src/pages/Login/Login.test.tsx:
{
import { fireEvent, screen, waitFor } from '@testing-library/react';
import Login from './Login';
import { loginUser } from '../../context/AuthService';
import { renderWithRouter } from '../../utils/test-utils';

// Mock AuthService
jest.mock('../../context/AuthService', () => ({
    loginUser: jest.fn(),
}));

// Mock Form components to expose the error state
jest.mock('../../components/forms/AuthForm/AuthForm', () => {
    return function MockAuthForm({ title, onSubmit, error, children }: any) {
        return (
            <div className="auth-form">
                <h1 className="auth-title">{title}</h1>
                {error && <div data-testid="error-message">{error}</div>}
                <form role="form" onSubmit={onSubmit}>
                    {children}
                </form>
            </div>
        );
    };
});

// Mock useNavigate
const mockNavigate = jest.fn();
jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    useNavigate: () => mockNavigate,
}));

describe('Login Component', () => {
    let consoleErrorMock: jest.SpyInstance;

    beforeEach(() => {
        consoleErrorMock = jest.spyOn(console, 'error').mockImplementation(() => {});
        mockNavigate.mockClear();
    });

    afterEach(() => {
        consoleErrorMock.mockRestore();
        jest.clearAllMocks();
    });

    test('renders form fields', () => {
        renderWithRouter(<Login />);

        expect(screen.getByPlaceholderText(/email/i)).toBeInTheDocument();
        expect(screen.getByPlaceholderText(/password/i)).toBeInTheDocument();
        expect(screen.getByRole('button', { name: /login/i })).toBeInTheDocument();
    });

    test('shows an error when fields are empty', async () => {
        renderWithRouter(<Login />);

        // Need to prevent the default form submission to allow the error check to work
        const form = screen.getByRole('form');
        fireEvent.submit(form);

        // Use waitFor instead of findByText to allow time for state updates
        await waitFor(() => {
            expect(screen.getByText(/please fill in all fields/i)).toBeInTheDocument();
        });
    });

    test('calls loginUser api on form submit', async () => {
        const mockResponse = {
            data: {
                data: {
                    token: 'test-token',
                    user: { id: 1, email: 'test@example.com' },
                },
            },
        };

        (loginUser as jest.Mock).mockResolvedValue(mockResponse);

        renderWithRouter(<Login />);
        const email = 'test@example.com';
        const password = '1234567890';

        // Mock the input fields
        const emailInput = screen.getByPlaceholderText(/email/i);
        const passwordInput = screen.getByPlaceholderText(/password/i);

        fireEvent.change(emailInput, { target: { value: email } });
        fireEvent.change(passwordInput, { target: { value: password } });

        // Submit the form directly
        const form = screen.getByRole('form');
        fireEvent.submit(form);

        await waitFor(() => {
            expect(loginUser).toHaveBeenCalledWith({
                email: email,
                password: password,
            });
        });

        await waitFor(() => {
            expect(mockNavigate).toHaveBeenCalledWith('/');
        });
    });

    test('shows error message on failed login', async () => {
        (loginUser as jest.Mock).mockRejectedValue(new Error('mocked error'));

        renderWithRouter(<Login />);

        const email = 'test@example.com';
        const password = '1234567890';

        // Mock the input fields
        const emailInput = screen.getByPlaceholderText(/email/i);
        const passwordInput = screen.getByPlaceholderText(/password/i);

        fireEvent.change(emailInput, { target: { value: email } });
        fireEvent.change(passwordInput, { target: { value: password } });

        // Submit the form directly
        const form = screen.getByRole('form');
        fireEvent.submit(form);

        await waitFor(() => {
            expect(screen.getByTestId('error-message')).toHaveTextContent(/login failed/i);
        });
    });
});
}

src/pages/Login/Login.tsx:
{
// import '../../styles/auth.css';
import AuthContext from '../../context/AuthContext';
import { useState, useContext } from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import { loginUser } from '../../context/AuthService';
import { ArrowLeft } from 'react-bootstrap-icons';

import FormContainer from '../../components/forms/FormContainer/FormContainer';
import AuthForm from '../../components/forms/AuthForm/AuthForm';
import FormInput from '../../components/forms/FormInput/FormInput';
import FormButton from '../../components/forms/FormButton/FormButton';
import NavButton from '../../components/navButton/NavButton';

const Login: React.FC = () => {
    const context = useContext(AuthContext);
    const navigate = useNavigate();

    const [credentials, setCredentials] = useState({
        email: '',
        password: '',
    });

    const [error, setError] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { id, value } = e.target;
        setCredentials(prev => ({
            ...prev,
            [id.replace('form', '').toLowerCase()]: value,
        }));
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        const { email, password } = credentials;

        if (!email || !password) {
            setError('Please fill in all fields');
            return;
        }
        setError(null);

        try {
            const response = await loginUser({ email, password });
            const token = response.data.data.token;
            const user = response.data.data.user;

            localStorage.setItem('token', token);
            localStorage.setItem('user', JSON.stringify(user));

            context?.setToken(token);
            context?.setUser(user);
            navigate('/');
        } catch (error) {
            console.error(error);
            setError('Login Failed.');
        }
    };

    return (
        <FormContainer>
            <NavLink to="/" className="back-button text-white">
                <ArrowLeft className="me-1" />
                Back to home
            </NavLink>
            <AuthForm title="PHOTOCOMP" onSubmit={handleSubmit} error={error}>
                <FormInput
                    id="formEmail"
                    type="email"
                    placeholder="Email"
                    value={credentials.email}
                    onChange={handleChange}
                    className="w-100 mb-3"
                    required
                />

                <FormInput
                    id="formPassword"
                    type="password"
                    placeholder="Password"
                    value={credentials.password}
                    onChange={handleChange}
                    className="w-100 mb-3"
                    required
                />

                <FormButton type="submit" variant="light">
                    Login
                </FormButton>

                <FormButton type="button" onClick={() => navigate('/register')}>
                    Don't have an account? Register
                </FormButton>
            </AuthForm>
        </FormContainer>
    );
};

export default Login;
}

src/pages/Login.tsx:
{
import '../styles/auth.css';
import AuthContext from '../context/AuthContext';
import { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { loginUser } from '../context/AuthService';

import FormContainer from '../components/forms/FormContainer';
import AuthForm from '../components/forms/AuthForm';
import FormInput from '../components/forms/FormInput';
import FormButton from '../components/forms/FormButton';

const Login: React.FC = () => {
    const context = useContext(AuthContext);
    const navigate = useNavigate();

    const [credentials, setCredentials] = useState({
        email: '',
        password: '',
    });

    const [error, setError] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { id, value } = e.target;
        setCredentials(prev => ({
            ...prev,
            [id.replace('form', '').toLowerCase()]: value,
        }));
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        const { email, password } = credentials;

        if (!email || !password) {
            setError('Please fill in all fields');
            return;
        }
        setError(null);

        try {
            const response = await loginUser({ email, password });
            const token = response.data.data.token;
            const user = response.data.data.user;

            localStorage.setItem('token', token);
            localStorage.setItem('user', JSON.stringify(user));

            context?.setToken(token);
            context?.setUser(user);
            navigate('/');
        } catch (error) {
            console.error(error);
            setError('Login Failed.');
        }
    };

    return (
        <FormContainer>
            <AuthForm title="PHOTOCOMP" onSubmit={handleSubmit} error={error}>
                <FormInput
                    id="formEmail"
                    type="email"
                    placeholder="Email"
                    value={credentials.email}
                    onChange={handleChange}
                    required
                />

                <FormInput
                    id="formPassword"
                    type="password"
                    placeholder="Password"
                    value={credentials.password}
                    onChange={handleChange}
                    required
                />

                <FormButton type="submit" variant="light">
                    Login
                </FormButton>

                <FormButton type="button" onClick={() => navigate('/register')}>
                    Don't have an account? Register
                </FormButton>
            </AuthForm>
        </FormContainer>
    );
};

export default Login;
}

src/pages/Logout.tsx:
{
import { useEffect, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import AuthContext from '../context/AuthContext';

const Logout: React.FC = () => {
  const { logout } = useContext(AuthContext);
  const navigate = useNavigate();

  useEffect(() => {
    logout();
    
    navigate('/login');
  }, [logout, navigate]);

  return null;
};

export default Logout;
}

src/pages/Members/Members.tsx:
{
import React, { useState, useEffect, useContext } from 'react';
import { NavLink, useParams } from 'react-router-dom';
import { Col, Row, Container, Alert } from 'react-bootstrap';
import AuthContext from '../../context/AuthContext';
import * as icon from 'react-bootstrap-icons';

import NavButton from '../../components/navButton/NavButton'
import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import MemberRow from '../../components/memberRow/MemberRow';
import { Member } from '../../components/cards/memberCard/MemberCard';
import { 
  getOrganizationMembers,
  updateMember,
  removeMember,
  Role
} from '../../context/MemberService';

const Members: React.FC = () => {
  const { user, token } = useContext(AuthContext);
  const { orgId } = useParams<{ orgId: string }>();

  const [searchTerm, setSearchTerm] = useState('');

  const [members, setMembers] = useState<Member[]>([]);
  const [filteredMembers, setFilteredMembers] = useState<Member[]>([]);

  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [actionSuccess, setActionSuccess] = useState<string | null>(null);

  const [processingAction, setProcessingAction] = useState<boolean>(false); // Setting a quasi mutex 

  useEffect(() => {
    if (!orgId) return;
    
    const fetchMembers = async () => {
      try {
        setLoading(true);
        setError(null);
        const response = await getOrganizationMembers(orgId);
        setMembers(response.data.members);
        setFilteredMembers(response.data.members); 

        setLoading(false);
      } catch (err) {
        console.error('Error fetching organization members:', err);
        setError('Failed to load organization members. Please try again later.');
        setLoading(false);
      }
    };

    fetchMembers();
  }, [orgId]);

  useEffect(() => {
    if (searchTerm.trim() === '') {
      setFilteredMembers(members);
    } else {
      const filtered = members.filter(member => {
        const { firstName, lastName, email } = member.userDetails;
        const fullName = `${firstName} ${lastName}`.toLowerCase();
        const username = email.split('@')[0].toLowerCase();
        const emailLower = email.toLowerCase();
        const search = searchTerm.toLowerCase();
        
        return fullName.includes(search) || 
               username.includes(search) || 
               emailLower.includes(search);
      });
      setFilteredMembers(filtered);
    }
  }, [members, searchTerm]);

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };

  const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
  };

  const adminMembers = filteredMembers.filter(member => member.role === 'ADMIN');
  const regularMembers = filteredMembers.filter(member => member.role === 'MEMBER');

  const handleUpdateMember = async (actionType: string, memberId: string) => {
    if (!orgId) return;
    
    try {
      setProcessingAction(true);
      setError(null);
      const organizationId = orgId.toLowerCase();
      
      if (actionType === 'promote') {
        await updateMember(organizationId, memberId, Role.Admin);
        setActionSuccess('Member successfully promoted to admin.');
        
        setMembers(prevMembers => 
          prevMembers.map(member => {
            if (member.userId === memberId) {
              return { ...member, role: Role.Admin };
            }
            return member;
          })
        );

      } else if (actionType === 'demote') {
        await updateMember(organizationId, memberId, Role.Member);
        setActionSuccess('Admin successfully demoted to member.');
        
        setMembers(prevMembers => 
          prevMembers.map(member => {
            if (member.userId === memberId) {
              return { ...member, role: Role.Member }; 
            }
            return member;
          })
        );

      } else if (actionType === 'remove') {
        await removeMember(organizationId, memberId);
        setActionSuccess('Member successfully removed from organization.');
        setMembers(prevMembers => prevMembers.filter(member => member.userId !== memberId));
      } 

      setProcessingAction(false);
    } catch (err) {
      console.error(`Error performing action ${actionType} on member ${memberId}:`, err);
      setError(`Failed to ${actionType} member. Please try again.`);
      setProcessingAction(false);
    }
  };

  const searchComponent = (
    <SearchBar
      value={searchTerm}
      onChange={handleSearchChange}
      onSubmit={handleSearchSubmit}
      placeholder="Search members..."
    />
  );

  /* Components to be injected into the TopBar*/
  const rightComponents = (
      <>
          <div className="d-flex align-items-center gap-3">
              {user && token ? (
                  <>
                      <NavLink to="/account-settings" className="text-light top-bar-element">
                          <icon.GearFill size={24} />
                      </NavLink>
                      <NavLink to="/logout" className="text-light top-bar-element">
                          <icon.BoxArrowRight size={24} />
                      </NavLink>
                  </>
              ) : (
                  <>
                      <NavButton
                          to="/register"
                          variant="outline-light"
                          className="mx-1 top-bar-element"
                      >
                          Register
                      </NavButton>
                      <NavButton to="/login" variant="outline-light" className="top-bar-element">
                          Login
                      </NavButton>
                  </>
              )}
          </div>
      </>
  );

  return (
    <>
      <Row className="g-0">
        <Col md="auto" className="sidebar-container">
          <Sidebar />
        </Col>
        <Col className="main-content p-0">
          <TopBar 
            searchComponent={searchComponent}
            rightComponents={rightComponents}
          />

          <Container fluid className="px-4 py-3">
            <div className="row-title">
              <h1 className="mb-4 page-title">Members: {orgId && orgId.charAt(0).toUpperCase() + orgId.slice(1)}</h1>
              <NavButton className="requests-button" to={`/organizations/${orgId}/members/requests`}> Go to Requests </NavButton>
            </div>

            {error && (
              <Alert variant="danger" dismissible onClose={() => setError(null)}>
                {error}
              </Alert>
            )}

            {actionSuccess && (
              <Alert variant="success" dismissible onClose={() => setActionSuccess(null)}>
                {actionSuccess}
              </Alert>
            )}

            {loading ? (
              <div className="text-center p-5 text-white">Loading organization members...</div>
            ) : filteredMembers.length === 0 ? (
              <div className="text-center p-5 text-white">
                {searchTerm ? 'No matching members found.' : 'No members in this organization.'}
              </div>
            ) : (
              <>
                {/* Admin Members Row */}
                {adminMembers.length > 0 && (
                  <MemberRow 
                    title="Admin Members"
                    members={adminMembers}
                    onAction={handleUpdateMember}
                    actionTypes={['demote']}
                    actionLabels={['Demote to Member']}
                  />
                )}
                
                {/* Regular Members Row */}
                {regularMembers.length > 0 && (
                  <MemberRow 
                    title="Members"
                    members={regularMembers}
                    onAction={handleUpdateMember}
                    actionTypes={['remove','promote']}
                    actionLabels={['Remove Member', 'Promote to Admin']}
                  />
                )}
              </>
            )}
          </Container>
        </Col>
      </Row>
    </>
  );
};

export default Members;
}

src/pages/Membership/Membership.test.tsx:
{
import React from 'react';
import { screen, fireEvent, waitFor, act } from '@testing-library/react';
import Membership from './Membership';
import { renderWithRouter } from '../../utils/test-utils';
import { 
  getOrganizationMembershipRequests, 
  acceptMembershipRequest, 
  denyMembershipRequest 
} from '../../context/MembershipService';
import { MembershipRequest } from '../../components/cards/membershipCard/MembershipCard';


jest.mock('../../context/MembershipService', () => ({
  getOrganizationMembershipRequests: jest.fn(),
  acceptMembershipRequest: jest.fn(),
  denyMembershipRequest: jest.fn(),
}));

jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useParams: () => ({ orgId: 'test-org' }),
}));

jest.mock('../../components/cards/membershipCard/MembershipCard', () => {
  const MembershipCard = ({ 
    request, 
    isSelected, 
    onSelect 
  }: { 
    request: any, 
    isSelected: boolean, 
    onSelect: (id: string) => void
  }) => (
    <div 
      data-testid="mock-membership-card" 
      data-request-id={request.id}
      data-selected={isSelected}
      onClick={() => onSelect(request.id)}
    >
      {request.firstName} {request.lastName} ({request.userName})
    </div>
  );
  
  return {
    __esModule: true,
    default: MembershipCard,
  };
});


jest.mock('../../components/bars/TopBar/TopBar', () => ({
  __esModule: true,
  default: ({ searchComponent, rightComponents }: any) => (
    <div data-testid="mock-top-bar">
      <div data-testid="search-component-container">{searchComponent}</div>
      <div data-testid="right-components-container">{rightComponents}</div>
    </div>
  ),
}));

jest.mock('../../components/bars/SideBar/SideBar', () => ({
  __esModule: true,
  default: () => <div data-testid="mock-sidebar">Sidebar Content</div>,
}));

describe('Membership Component', () => {
  const mockRequests: MembershipRequest[] = [
    {
      id: '1',
      userId: 'user1',
      userName: 'johndoe',
      organizationId: 'test-org',
      requestDate: '2023-12-01T10:00:00Z',
      status: 'pending',
      firstName: 'John',
      lastName: 'Doe'
    },
    {
      id: '2',
      userId: 'user2',
      userName: 'janesmith',
      organizationId: 'test-org',
      requestDate: '2023-12-02T11:00:00Z',
      status: 'pending',
      firstName: 'Jane',
      lastName: 'Smith'
    }
  ];

  beforeEach(() => {
    jest.clearAllMocks();
    
    (getOrganizationMembershipRequests as jest.Mock).mockResolvedValue({
      data: {
        requests: mockRequests
      }
    });
    
    (acceptMembershipRequest as jest.Mock).mockResolvedValue({ 
      status: 'success' 
    });
    
    (denyMembershipRequest as jest.Mock).mockResolvedValue({ 
      status: 'success' 
    });
  });

  test('renders the page and fetches membership requests', async () => {
    await act(async () => {
      renderWithRouter(<Membership />);
    });
    
    expect(screen.getByTestId('mock-sidebar')).toBeInTheDocument();
    expect(screen.getByTestId('mock-top-bar')).toBeInTheDocument();
    expect(screen.getByText('Membership Requests')).toBeInTheDocument();
    
    expect(getOrganizationMembershipRequests).toHaveBeenCalledWith('test-org');
    
    await waitFor(() => {
      expect(screen.queryByText('Loading membership requests...')).not.toBeInTheDocument();
      expect(screen.getAllByTestId('mock-membership-card')).toHaveLength(2);
    });
  });

  test('displays an error message when fetching requests fails', async () => {
    (getOrganizationMembershipRequests as jest.Mock).mockRejectedValueOnce(
      new Error('Failed to fetch')
    );
    
    await act(async () => {
      renderWithRouter(<Membership />);
    });
    
    await waitFor(() => {
      expect(screen.getByText('Failed to load membership requests. Please try again later.')).toBeInTheDocument();
    });
  });

  test('allows selecting a membership card', async () => {
    await act(async () => {
      renderWithRouter(<Membership />);
    });
    
    await waitFor(() => {
      expect(screen.getAllByTestId('mock-membership-card')).toHaveLength(2);
    });
    
    const card = screen.getAllByTestId('mock-membership-card')[0];
    
    await act(async () => {
      fireEvent.click(card);
    });
    
    expect(card).toHaveAttribute('data-selected', 'true');
    
    
    expect(screen.getByText('Accept Request')).toBeInTheDocument();
    expect(screen.getByText('Deny Request')).toBeInTheDocument();
  });

  test('accepts a membership request', async () => {
    await act(async () => {
      renderWithRouter(<Membership />);
    });
    
    await waitFor(() => {
      expect(screen.getAllByTestId('mock-membership-card')).toHaveLength(2);
    });
    
    
    const card = screen.getAllByTestId('mock-membership-card')[0];
    await act(async () => {
      fireEvent.click(card);
    });
    
    
    const acceptButton = screen.getByText('Accept Request');
    await act(async () => {
      fireEvent.click(acceptButton);
    });
    
    expect(acceptMembershipRequest).toHaveBeenCalledWith('test-org', '1');
    
    await waitFor(() => {
      expect(screen.getByText('Membership request accepted successfully.')).toBeInTheDocument();
      
      expect(screen.getAllByTestId('mock-membership-card')).toHaveLength(1);
    });
  });

  test('denies a membership request', async () => {
    await act(async () => {
      renderWithRouter(<Membership />);
    });
    
    await waitFor(() => {
      expect(screen.getAllByTestId('mock-membership-card')).toHaveLength(2);
    });
    
    
    const card = screen.getAllByTestId('mock-membership-card')[0];
    await act(async () => {
      fireEvent.click(card);
    });
    
    
    const denyButton = screen.getByText('Deny Request');
    await act(async () => {
      fireEvent.click(denyButton);
    });
    
    expect(denyMembershipRequest).toHaveBeenCalledWith('test-org', '1');
    
    await waitFor(() => {
      expect(screen.getByText('Membership request denied successfully.')).toBeInTheDocument();
      
      expect(screen.getAllByTestId('mock-membership-card')).toHaveLength(1);
    });
  });

  test('filters requests based on search term', async () => {
    await act(async () => {
      renderWithRouter(<Membership />);
    });
    
    await waitFor(() => {
      expect(screen.getAllByTestId('mock-membership-card')).toHaveLength(2);
    });
    
    const searchInput = screen.getByPlaceholderText('Search membership requests...');
    
    await act(async () => {
      fireEvent.change(searchInput, { target: { value: 'Jane' } });
    });
    
    expect(screen.getAllByTestId('mock-membership-card')).toHaveLength(1);
    expect(screen.getByText('Jane Smith (janesmith)')).toBeInTheDocument();
    expect(screen.queryByText('John Doe (johndoe)')).not.toBeInTheDocument();
    
    await act(async () => {
      fireEvent.change(searchInput, { target: { value: '' } });
    });
    
    expect(screen.getAllByTestId('mock-membership-card')).toHaveLength(2);
  });
});
}

src/pages/Membership/Membership.tsx:
{
import React, { useState, useEffect, useContext } from 'react';
import { useParams, NavLink } from 'react-router-dom';
import { Col, Row, Container, Button, Alert } from 'react-bootstrap';
import * as icon from 'react-bootstrap-icons';
import AuthContext from '../../context/AuthContext';
import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import MembershipCard, { MembershipRequest } from '../../components/cards/membershipCard/MembershipCard';
import { 
  getOrganizationMembershipRequests, 
  acceptMembershipRequest, 
  denyMembershipRequest
} from '../../context/MembershipService';

const Membership: React.FC = () => {
  const {user , token} = useContext(AuthContext)
  const { orgId } = useParams<{ orgId: string }>();
  const [searchTerm, setSearchTerm] = useState('');
  const [requests, setRequests] = useState<MembershipRequest[]>([]);
  const [filteredRequests, setFilteredRequests] = useState<MembershipRequest[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedRequestId, setSelectedRequestId] = useState<string | null>(null);
  const [processingRequest, setProcessingRequest] = useState<boolean>(false);
  const [actionSuccess, setActionSuccess] = useState<string | null>(null);

  useEffect(() => {
    if (!orgId) return;
    
    const fetchRequests = async () => {
      try {
        setLoading(true);
        setError(null);
        const response = await getOrganizationMembershipRequests(orgId);
        setRequests(response.data.requests);
        setLoading(false);
      } catch (err) {
        console.error('Error fetching membership requests:', err);
        setError('Failed to load membership requests. Please try again later.');
        setLoading(false);
      }
    };

    fetchRequests();
  }, [orgId]);

  useEffect(() => {
    if (searchTerm.trim() === '') {
      setFilteredRequests(requests);
    } else {
      const filtered = requests.filter(request => {
        const { firstName, lastName, email } = request.userDetails;
        const fullName = `${firstName} ${lastName}`.toLowerCase();
        const emailLower = email.toLowerCase();
        const search = searchTerm.toLowerCase();
        
        return fullName.includes(search) || 
               emailLower.includes(search) ||
               (request.message && request.message.toLowerCase().includes(search));
      });
      setFilteredRequests(filtered);
    }
  }, [requests, searchTerm]);

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };

  const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
  };

  const handleSelectRequest = (requestId: string) => {
    setSelectedRequestId(requestId === selectedRequestId ? null : requestId);
    setActionSuccess(null);
  };

  const handleAcceptRequest = async () => {
    if (!selectedRequestId || !orgId) return;
    
    try {
      setProcessingRequest(true);
      const organizationId = orgId.toLowerCase();
      await acceptMembershipRequest(organizationId, selectedRequestId);
      
      setRequests(prevRequests => 
        prevRequests.filter(request => {
          const requestUserId = request.SK.split('#')[1] || request.userId;
          return requestUserId !== selectedRequestId;
        })
      );
      
      setSelectedRequestId(null);
      setActionSuccess('Membership request accepted successfully.');
      setProcessingRequest(false);
    } catch (err) {
      console.error('Error accepting request:', err);
      setError('Failed to accept membership request. Please try again.');
      setProcessingRequest(false);
    }
  };

  const handleDenyRequest = async () => {
    if (!selectedRequestId || !orgId) return;
    
    try {
      setProcessingRequest(true);
      const organizationId = orgId.toLowerCase();
      await denyMembershipRequest(organizationId, selectedRequestId);
      
      setRequests(prevRequests => 
        prevRequests.filter(request => {
          const requestUserId = request.SK.split('#')[1] || request.userId;
          return requestUserId !== selectedRequestId;
        })
      );
      
      setSelectedRequestId(null);
      setActionSuccess('Membership request denied successfully.');
      setProcessingRequest(false);
    } catch (err) {
      console.error('Error denying request:', err);
      setError('Failed to deny membership request. Please try again.');
      setProcessingRequest(false);
    }
  };

  const searchComponent = (
    <SearchBar
      value={searchTerm}
      onChange={handleSearchChange}
      onSubmit={handleSearchSubmit}
      placeholder="Search membership requests..."
    />
  );

  const rightComponents = (
      <>
          <div className="d-flex align-items-center gap-3">
              {user && token ? (
                  <>
                      <NavLink to="/account-settings" className="text-light top-bar-element">
                          <icon.GearFill size={24} />
                      </NavLink>
                      <NavLink to="/logout" className="text-light top-bar-element">
                          <icon.BoxArrowRight size={24} />
                      </NavLink>
                  </>
              ) : (
                  <>
                      <NavButton
                          to="/register"
                          variant="outline-light"
                          className="mx-1 top-bar-element"
                      >
                          Register
                      </NavButton>
                      <NavButton to="/login" variant="outline-light" className="top-bar-element">
                          Login
                      </NavButton>
                  </>
              )}
          </div>
      </>
  );

  return (
    <>
      <Row className="g-0">
        <Col md="auto" className="sidebar-container">
          <Sidebar />
        </Col>
        <Col className="main-content p-0">
          <TopBar 
            searchComponent={searchComponent}
            rightComponents={rightComponents}
          />

          <Container fluid className="px-4 py-3">
            <div className="row-title">
              <h1 className="mb-4 page-title">Requests: {orgId && orgId.charAt(0).toUpperCase() + orgId.slice(1)}</h1>
              <NavButton className="members-button" to={`/organizations/${orgId}/members`}> Go to Members </NavButton>
            </div>

            {error && (
              <Alert variant="danger" dismissible onClose={() => setError(null)}>
                {error}
              </Alert>
            )}

            {actionSuccess && (
              <Alert variant="success" dismissible onClose={() => setActionSuccess(null)}>
                {actionSuccess}
              </Alert>
            )}

            {loading ? (
              <div className="text-center p-5 text-white">Loading membership requests...</div>
            ) : filteredRequests.length === 0 ? (
              <div className="text-center p-5 text-white">
                {searchTerm ? 'No matching requests found.' : 'No pending membership requests.'}
              </div>
            ) : (
              <>
                <div className="d-flex flex-wrap gap-4 mb-4">
                  {filteredRequests.map(request => (
                    <MembershipCard 
                      key={request.userId} 
                      request={request}
                      isSelected={selectedRequestId === request.userId}
                      onSelect={handleSelectRequest}
                    />
                  ))}
                </div>

                {selectedRequestId && (
                  <div className="action-buttons mt-3 d-flex gap-3">
                    <Button 
                      variant="success" 
                      onClick={handleAcceptRequest}
                      disabled={processingRequest}
                    >
                      {processingRequest ? 'Processing...' : 'Accept Request'}
                    </Button>
                    <Button 
                      variant="danger" 
                      onClick={handleDenyRequest}
                      disabled={processingRequest}
                    >
                      {processingRequest ? 'Processing...' : 'Deny Request'}
                    </Button>
                  </div>
                )}
              </>
            )}
          </Container>
        </Col>
      </Row>
    </>
  );
};

export default Membership;
}

src/pages/Organizations/CreateOrganization/CreateOrganization.test.tsx:
{
import React from 'react';
import { fireEvent, screen, waitFor } from '@testing-library/react';
import { renderWithRouter } from '../../../utils/test-utils';
import CreateOrganization from './CreateOrganization';

// Mock functions
const mockNavigate = jest.fn();
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: () => mockNavigate,
}));

// Mock createOrganization API call
jest.mock('../../context/OrganizationService', () => ({
  createOrganization: jest.fn().mockResolvedValue({ data: { id: '123', name: 'Test Org' } }),
}));

describe('CreateOrganization Component', () => {
  beforeEach(() => {
    // Clear mocks between tests
    mockNavigate.mockClear();
  });

  test('renders form elements correctly', () => {
    renderWithRouter(<CreateOrganization />);

    // Check if title and instructions are rendered
    expect(screen.getByText('Organizations')).toBeInTheDocument();
    expect(screen.getByText('Start to create your Organization below!')).toBeInTheDocument();
    
    // Check for form elements
    expect(screen.getByLabelText(/Organization Name/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/Upload your Organization logo/i)).toBeInTheDocument();
    
    // Check for buttons
    expect(screen.getByRole('button', { name: /Cancel/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /Create Organization/i })).toBeInTheDocument();
  });

  test('validates organization name on submission', async () => {
    renderWithRouter(<CreateOrganization />);
    
    // Try to submit the form without entering a name
    fireEvent.click(screen.getByRole('button', { name: /Create Organization/i }));
    
    // Check for validation error
    await waitFor(() => {
      expect(screen.getByText('Organization name is required')).toBeInTheDocument();
    });
  });

  test('handles file upload correctly', async () => {
    renderWithRouter(<CreateOrganization />);
    
    // Create a mock file
    const file = new File(['test'], 'test-logo.png', { type: 'image/png' });
    
    // Upload the file
    const fileInput = screen.getByLabelText(/Upload your Organization logo/i);
    fireEvent.change(fileInput, { target: { files: [file] } });
    
    // There's no visible change in the DOM for the file input value, 
    // but we can check that the file is accepted (no error messages)
    await waitFor(() => {
      expect(screen.queryByText(/Please select an image file/i)).not.toBeInTheDocument();
    });
  });

  test('rejects non-image files', async () => {
    renderWithRouter(<CreateOrganization />);
    
    // Create a mock non-image file
    const file = new File(['test'], 'test-doc.pdf', { type: 'application/pdf' });
    
    // Upload the file
    const fileInput = screen.getByLabelText(/Upload your Organization logo/i);
    fireEvent.change(fileInput, { target: { files: [file] } });
    
    // Check for error message
    await waitFor(() => {
      expect(screen.getByText('Please select an image file')).toBeInTheDocument();
    });
  });

  test('navigates back when cancel button is clicked', () => {
    renderWithRouter(<CreateOrganization />);
    
    // Click cancel button
    fireEvent.click(screen.getByRole('button', { name: /Cancel/i }));
    
    // Check if navigation was called
    expect(mockNavigate).toHaveBeenCalledWith('/organizations');
  });

  test('submits form with valid data', async () => {
    renderWithRouter(<CreateOrganization />);
    
    // Fill in organization name
    const nameInput = screen.getByLabelText(/Organization Name/i);
    fireEvent.change(nameInput, { target: { value: 'Test Organization' } });
    
    // Create a mock file
    const file = new File(['test'], 'test-logo.png', { type: 'image/png' });
    
    // Upload the file
    const fileInput = screen.getByLabelText(/Upload your Organization logo/i);
    fireEvent.change(fileInput, { target: { files: [file] } });
    
    // Submit the form
    fireEvent.click(screen.getByRole('button', { name: /Create Organization/i }));
    
    // Check if navigation was called after successful submission
    await waitFor(() => {
      expect(mockNavigate).toHaveBeenCalledWith('/organizations');
    });
  });
});}

src/pages/Organizations/CreateOrganization/CreateOrganization.tsx:
{
import React, { useState, useContext } from 'react';
import { Container, Form, Button, Row, Col, Alert } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { createOrganization } from '../../../context/OrgService';
import AuthContext from '../../../context/AuthContext';
import * as icon from 'react-bootstrap-icons';

// Import components
import Sidebar from '../../../components/bars/SideBar/SideBar';
import TopBar from '../../../components/bars/TopBar/TopBar';
import SearchBar from '../../../components/bars/SearchBar/SearchBar';
import NavButton from '../../../components/navButton/NavButton';
import { NavLink } from 'react-router-dom';

interface OrganizationData {
  name: string;
  description?: string;
  logo: File | null;
}

const CreateOrganization: React.FC = () => {
  const navigate = useNavigate();
  const { user, token } = useContext(AuthContext);
  const [organizationData, setOrganizationData] = useState<OrganizationData>({
    name: '',
    description: '',
    logo: null
  });
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');

  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setOrganizationData({
      ...organizationData,
      name: e.target.value
    });
  };

  const handleDescriptionChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setOrganizationData({
      ...organizationData,
      description: e.target.value
    });
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      
      // Check file type
      if (!file.type.match('image.*')) {
        setError('Please select an image file');
        return;
      }
      
      // Check file size (e.g., limit to 5MB)
      if (file.size > 5 * 1024 * 1024) {
        setError('File size should not exceed 5MB');
        return;
      }

      setOrganizationData({
        ...organizationData,
        logo: file
      });
      
      // Create preview URL
      const reader = new FileReader();
      reader.onload = () => {
        setPreviewUrl(reader.result as string);
      };
      reader.readAsDataURL(file);
      
      setError(null);
    }
  };

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };

  const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
  };

  /* Components to be injected into the TopBar*/
  const searchComponent = (
    <SearchBar
      value={searchTerm}
      onChange={handleSearchChange}
      onSubmit={handleSearchSubmit}
      placeholder="Search organizations..."
      className="ms-3"
    />
  );

  /* Components to be injected into the TopBar*/
  const rightComponents = (
    <>
      <div className="d-flex align-items-center gap-3">
        {user && token ? (
          <>
            <NavLink to="/account-settings" className="text-light top-bar-element">
              <icon.GearFill size={24} />
            </NavLink>
            <NavLink to="/logout" className="text-light top-bar-element">
              <icon.BoxArrowRight size={24} />
            </NavLink>
          </>
        ) : (
          <>
            <NavButton to='/register' variant="outline-light" className="mx-1 top-bar-element">
              Register
            </NavButton>
            <NavButton to='/login' variant="outline-light" className="top-bar-element">
              Login
            </NavButton>
          </>
        )}
      </div>
    </>
  );

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    
    // Form validation
    if (!organizationData.name.trim()) {
      setError('Organization name is required');
      return;
    }

    if (!organizationData.logo) {
      setError('Organization logo is required');
      return;
    }
    
    setIsSubmitting(true);
    setError(null);
    
    // Create form data for file upload
    const formData = new FormData();
    formData.append('name', organizationData.name);
    
    if (organizationData.description) {
      formData.append('description', organizationData.description);
    }
    
    if (organizationData.logo) {
      formData.append('logo', organizationData.logo);
    }
    
    try {
      // Make API call to create organization
      const response = await createOrganization(formData);
      console.log('Organization created successfully:', response);
      
      setSuccess('Organization created successfully!');
      
      // Redirect to organizations page after a short delay
      setTimeout(() => {
        navigate('/organizations');
      }, 1500);
    } catch (error: any) {
      console.error('Error creating organization:', error);
      
      // Handle specific error messages from the API
      if (error.response && error.response.data && error.response.data.message) {
        setError(error.response.data.message);
      } else {
        setError('Failed to create organization. Please try again.');
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <>
      <Row className="g-0">
        <Col md="auto" className="sidebar-container">
          <Sidebar />
        </Col>
        <Col className="main-content p-0">
          <div className="sticky-top bg-dark z-3">
            <Row>
              <TopBar
                searchComponent={searchComponent}
                rightComponents={rightComponents}
              />
            </Row>
          </div>
          <div className="create-organization-page bg-dark text-light min-vh-100">
            {/* Main Content */}
            <Container fluid className="px-4 pt-4">
              <Row className="justify-content-center">
                <Col xs={12} md={8} lg={6}>
                  <h1 className="text-center mb-5" style={{ fontFamily: 'Michroma, sans-serif' }}>Organizations</h1>
                  
                  <div className="text-center mb-5">
                    <h2 className="fs-1" style={{ fontFamily: 'Michroma, sans-serif' }}>
                      Start to create your Organization below!
                    </h2>
                  </div>

                  {error && (
                    <Alert variant="danger" className="my-3">
                      {error}
                    </Alert>
                  )}

                  {success && (
                    <Alert variant="success" className="my-3">
                      {success}
                    </Alert>
                  )}

                  <Form onSubmit={handleSubmit}>
                    <Form.Group className="mb-4" controlId="organizationName">
                      <Form.Label style={{ fontFamily: 'Michroma, sans-serif' }} className="fs-4">
                        Organization Name
                      </Form.Label>
                      <Form.Control
                        type="text"
                        placeholder="Enter organization name"
                        value={organizationData.name}
                        onChange={handleNameChange}
                        className="bg-white border-secondary py-3"
                        required
                      />
                    </Form.Group>

                    <Form.Group className="mb-4" controlId="organizationDescription">
                      <Form.Label style={{ fontFamily: 'Michroma, sans-serif' }} className="fs-4">
                        Organization Description
                      </Form.Label>
                      <Form.Control
                        as="textarea"
                        rows={4}
                        placeholder="Enter organization description"
                        value={organizationData.description}
                        onChange={handleDescriptionChange}
                        className="bg-white border-secondary py-3"
                      />
                    </Form.Group>

                    <Form.Group className="mb-4" controlId="organizationLogo">
                      <Form.Label style={{ fontFamily: 'Michroma, sans-serif' }} className="fs-4">
                        Upload your Organization logo
                      </Form.Label>
                      
                      {previewUrl && (
                        <div className="mb-3 text-center">
                          <img 
                            src={previewUrl} 
                            alt="Logo preview" 
                            style={{ maxHeight: '200px', maxWidth: '100%' }} 
                            className="border rounded"
                          />
                        </div>
                      )}
                      
                      {/* File upload wrapper with controlled width */}
                      <div>
                        <div style={{ width: '66.7%' }}> {/* This makes it 2/3 width */}
                          <Form.Control
                            type="file"
                            onChange={handleFileChange}
                            accept="image/*"
                            className="bg-white text-dark border-secondary rounded-3"
                            required
                          />
                        </div>
                      </div>
                    </Form.Group>

                    <div className="position-relative mt-5 pt-5" style={{ height: "250px" }}>
                      <div className="position-absolute" style={{ left: "-200px", top: "200px" }}>
                        <Button
                          variant="secondary"
                          onClick={() => navigate('/organizations')}
                          disabled={isSubmitting}
                          className="py-2 px-4"
                        >
                          Cancel
                        </Button>
                      </div>
                      
                      <div className="position-absolute" style={{ right: "-200px", top: "200px" }}>
                        <Button
                          variant="secondary"
                          type="submit"
                          disabled={isSubmitting}
                          className="py-2 px-4"
                        >
                          {isSubmitting ? 'Creating...' : 'Create Organization'}
                        </Button>
                      </div>
                    </div>
                  </Form>
                </Col>
              </Row>
            </Container>
          </div>
        </Col>
      </Row>
    </>
  );
};

export default CreateOrganization;}

src/pages/Organizations/ViewOrganizations.tsx:
{
import React, { useState, useEffect, useRef, useContext } from 'react';
import { Button, Col, Row, Container, Alert } from 'react-bootstrap';
import * as icon from 'react-bootstrap-icons';
import { NavLink } from 'react-router-dom';

import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import GalleryCard from '../../components/cards/galleryCard/GalleryCard';
import { Organization, getPublicOrganizations } from '../../context/OrgService';
import AuthContext from '../../context/AuthContext';

const Organizations: React.FC = () => {
    const { user, token } = useContext(AuthContext);
    const [searchTerm, setSearchTerm] = useState('');
    const [organizations, setOrganizations] = useState<Organization[]>([]);
    const [filteredOrganizations, setFilteredOrganizations] = useState<Organization[]>([]);
    const [lastEvaluatedKey, setLastEvaluatedKey] = useState<string | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    const [hasMore, setHasMore] = useState<boolean>(true);
    const fetchedRef = useRef(false);

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
    };

    /* Components to be injected into the TopBar*/
    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search organizations..."
            className="ms-3"
        />
    );

    /* Components to be injected into the TopBar*/
    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        {/* Create Organization should only appear when a user is logged in */}
                        <NavButton
                            to="/organizations/create"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Create Organization
                        </NavButton>

                        <NavLink to="/account-settings" className="text-light top-bar-element">
                            <icon.GearFill size={24} />
                        </NavLink>
                        <NavLink to="/logout" className="text-light top-bar-element">
                            <icon.BoxArrowRight size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    const fetchOrganizations = async (key: string | undefined = undefined) => {
        setLoading(true);
        try {
            const orgs = await getPublicOrganizations(key);
            if (key) {
                setOrganizations(prev => [...prev, ...orgs.data.organizations]);
            } else {
                setOrganizations(orgs.data.organizations);
            }
            setLastEvaluatedKey(orgs.lastEvaluatedKey); // update for next fetch
            setHasMore(orgs.lastEvaluatedKey !== null); // if there's no more key, no more data
            setLoading(false);
        } catch (err) {
            setError('Failed to fetch organizations');
            setLoading(false);
        }
    };

    useEffect(() => {
        if (fetchedRef.current) return;
        fetchedRef.current = true;
        fetchOrganizations();
    }, []);

    useEffect(() => {
        if (searchTerm.trim() === '') {
            setFilteredOrganizations(organizations);
        } else {
            const filtered = organizations.filter(org => {
                const nameMatch = org.name.toLowerCase().includes(searchTerm.toLowerCase());
                const descMatch = org.description?.toLowerCase().includes(searchTerm.toLowerCase()) || false;
                return nameMatch || descMatch;
            });
            setFilteredOrganizations(filtered);
        }
    }, [organizations, searchTerm]);

    const handleLoadMore = () => {
        if (!loading && hasMore) {
            fetchOrganizations(lastEvaluatedKey ?? undefined);
        }
    };

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <div className="sticky-top bg-dark z-3">
                        <Row>
                            <TopBar
                                searchComponent={searchComponent}
                                rightComponents={rightComponents}
                            />
                        </Row>
                    </div>
                    <div className="p-3 bg-dark text-white">
                        <Container fluid>
                            <Row>
                                <Col>
                                    <h1 className="mb-4">Organizations</h1>
                                </Col>
                            </Row>
                            
                            {error && (
                                <Alert variant="danger">{error}</Alert>
                            )}
                            
                            <Row>
                                {loading && organizations.length === 0 ? (
                                    <div className="text-center p-5">Loading organizations...</div>
                                ) : filteredOrganizations.length === 0 ? (
                                    <div className="text-center p-5">
                                        {searchTerm 
                                            ? 'No matching organizations found.' 
                                            : 'No organizations available.'
                                        }
                                        
                                        {user && token && (
                                            <div className="mt-4">
                                                <Button 
                                                    variant="primary" 
                                                    as={NavLink} 
                                                    to="/organizations/create"
                                                >
                                                    Create Your First Organization
                                                </Button>
                                            </div>
                                        )}
                                    </div>
                                ) : (
                                    <div className="d-flex flex-wrap gap-4">
                                        {filteredOrganizations.map(org => (
                                            <div key={org.id}>
                                                <GalleryCard
                                                    item={org}
                                                    className="organization-card"
                                                    orgName={org.name}
                                                />
                                            </div>
                                        ))}
                                    </div>
                                )}
                            </Row>
                            
                            {hasMore && organizations.length > 0 && (
                                <Row className="mt-4">
                                    <Col className="text-center">
                                        <Button
                                            onClick={handleLoadMore}
                                            disabled={loading}
                                            variant="primary"
                                        >
                                            {loading ? 'Loading...' : 'Load More'}
                                        </Button>
                                    </Col>
                                </Row>
                            )}
                        </Container>
                    </div>
                </Col>
            </Row>
        </>
    );
};

export default Organizations;}

src/pages/Organizations.tsx:
{
import React, { useState } from 'react';
import { Col, Row, Container } from 'react-bootstrap';
import { BellFill, PersonCircle } from 'react-bootstrap-icons';

import Sidebar from '../components/bars/SideBar/SideBar';
import TopBar from '../components/bars/TopBar/TopBar';
import SearchBar from '../components/bars/SearchBar/SearchBar';
import NavButton from '../components/navButton/NavButton';
import Gallery from '../components/Gallery';

const items = [
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
];

const Organizations = () => {
    const [searchTerm, setSearchTerm] = useState('');

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        console.log('Search submitted:', searchTerm);
        // searching
    };

    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search organizations..."
        />
    );

    const rightComponents = (
        <>
            <NavButton to="/register" variant="outline-light" className="mx-2 top-bar-element">
                Register
            </NavButton>
            <NavButton to="/login" variant="outline-light" className="top-bar-element">
                Login
            </NavButton>
            <BellFill className="text-light m-2 top-bar-element" size={24} />
            <PersonCircle className="text-light m-2 top-bar-element" size={24} />
        </>
    );

    return (
        <>
            <Row className="g-0">
                <Col md="auto">
                    <Sidebar />
                </Col>
                <Col>
                    <TopBar searchComponent={searchComponent} rightComponents={rightComponents} />

                    <Container fluid className="px-4 py-3">
                        <h1 className="mb-4">Organizations</h1>
                        <Gallery items={items} useNewCard={true} />
                    </Container>
                </Col>
            </Row>
        </>
    );
};

export default Organizations;
}

src/pages/Photos/viewPhotos.tsx:
{
import React, { useState, useEffect, useRef } from 'react';
import { Col, Row } from 'react-bootstrap';
import * as icon from 'react-bootstrap-icons';
import { NavLink, useParams } from 'react-router-dom';

import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import GalleryCard from '../../components/cards/galleryCard/GalleryCard';
import { getAllPhotos } from '../../context/PhotoService';

const Photos: React.FC = () => {
    const [searchTerm, setSearchTerm] = useState('');
    const [photos, setPhotos] = useState<any[]>([]);
    const [error, setError] = useState<string | null>(null);
    const fetchedRef = useRef(false);
    const { id, eid } = useParams();

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        console.log('Search submitted:', searchTerm);
        // Implement your search logic here photos
    };

    /* Components to be injected into the TopBar*/
    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search Photos..."
            className="ms-3"
        />
    );

    /* Components to be injected into the TopBar*/
    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {/* Create Organization should only appear when an Admin is logged in */}
                <NavButton
                    to={`/organizations/${id}/events/${eid}/photos/upload`}
                    variant="outline-light"
                    className="mx-1 top-bar-element"
                >
                    Upload Photos
                </NavButton>
                <NavLink to="/account-settings" className="text-light top-bar-element">
                    <icon.GearFill size={24} />
                </NavLink>
                <NavLink to="/logout" className="text-light top-bar-element">
                    <icon.BoxArrowRight size={24} />
                </NavLink>
            </div>
        </>
    );

    const pageActionComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {/* Attend Event should only appear when an user has to yet to attend the event that is logged in */}
                <NavButton
                    to={`/organizations/${id}/events/${eid}/apply`}
                    variant="outline-light"
                    className="mx-1 top-bar-element"
                >
                    Attend Event
                </NavButton>

                {/* need to change the NavLink into just an icon when it is a user.
                    NavLink = Admin (logic of event privacy)
                    just button = Member */}
                <NavLink to={`/organizations/${id}/members`} className="text-light top-bar-element">
                    {/* change logic icon when private or public
                        unlock = public
                        lock = private */}
                    <icon.UnlockFill size={24} />
                </NavLink>
                <NavLink
                    to={`/organizations/${id}/events/${eid}/details`}
                    className="text-light top-bar-element"
                >
                    <icon.ListUl size={24} />
                </NavLink>
            </div>
        </>
    );

    useEffect(() => {
        if (fetchedRef.current) return;
        fetchedRef.current = true;
        fetchPhotos();
    }, []);

    const fetchPhotos = async () => {
        if (id && eid) {
            try {
                const photos = await getAllPhotos(id, eid);
                console.log(photos);
                setPhotos(prev => [...prev, ...photos.data.photos]);
            } catch (err) {
                setError('Failed to fetch photos.');
            }
        } else {
            setError('Org name or EventId is empty.');
        }
    };

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <div className="sticky-top bg-dark z-3">
                        <Row>
                            <TopBar
                                searchComponent={searchComponent}
                                rightComponents={rightComponents}
                            />
                        </Row>
                    </div>
                    <div className="p-3 bg-dark text-white">
                        <Row className="align-items-center mb-4">
                            <Col>
                                <h1 className="mb-4">Photos</h1>
                            </Col>

                            <Col xs="auto" className="ms-auto me-5">
                                {pageActionComponents}
                            </Col>
                        </Row>
                        <Row>
                            {error && <p className="text-red-500">{error}</p>}

                            {photos.map(photo => (
                                <Col>
                                    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-4">
                                    <div className="gallery-card photo card-image">
                                    {/* <div className="gallery-card photo"> */}
                                        <GalleryCard
                                            key={photo.id}
                                            item={photo}
                                            className={`photo-card`}
                                            orgName={id}
                                        />
                                        </div>
                                    </div>
                                </Col>
                            ))}
                        </Row>
                    </div>
                </Col>
            </Row>
        </>
    );
};

export default Photos;
}

src/pages/Register/Register.test.tsx:
{
import { fireEvent, screen, waitFor } from '@testing-library/react';
import Register from './Register';
import { registerUser } from '../../context/AuthService';
import { renderWithRouter } from '../../utils/test-utils';

jest.mock('../../context/AuthService', () => ({
    registerUser: jest.fn(),
}));

// Mock Form components to expose the error state
jest.mock('../../components/forms/AuthForm/AuthForm', () => {
    return function MockAuthForm({ title, onSubmit, error, children }: any) {
        return (
            <div className="auth-form">
                <h1 className="auth-title">{title}</h1>
                {error && <div data-testid="error-message">{error}</div>}
                <form role="form" onSubmit={onSubmit}>
                    {children}
                </form>
            </div>
        );
    };
});

const mockNavigate = jest.fn();
jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    useNavigate: () => mockNavigate,
}));

describe('Register Component', () => {
    let consoleErrorMock: jest.SpyInstance;

    beforeEach(() => {
        consoleErrorMock = jest.spyOn(console, 'error').mockImplementation(() => {});
        mockNavigate.mockClear();
    });

    afterEach(() => {
        consoleErrorMock.mockRestore();
        jest.clearAllMocks();
    });

    test('renders form fields', () => {
        renderWithRouter(<Register />);

        expect(screen.getByPlaceholderText(/email/i)).toBeInTheDocument();
        expect(screen.getByPlaceholderText(/password/i)).toBeInTheDocument();
        expect(screen.getByPlaceholderText(/first name/i)).toBeInTheDocument();
        expect(screen.getByPlaceholderText(/last name/i)).toBeInTheDocument();
        expect(screen.getByRole('button', { name: /register/i })).toBeInTheDocument();
    });

    test('shows an error when fields are empty', async () => {
        renderWithRouter(<Register />);

        // Submit the form directly
        const form = screen.getByRole('form');
        fireEvent.submit(form);

        await waitFor(() => {
            expect(screen.getByTestId('error-message')).toHaveTextContent(
                /please fill in all fields/i
            );
        });
    });

    test('calls registerUser api on form submit', async () => {
        const mockResponse = {
            data: {
                data: {
                    token: 'test-token',
                    user: { id: 1, email: 'test@example.com' },
                },
            },
        };

        (registerUser as jest.Mock).mockResolvedValue(mockResponse);

        renderWithRouter(<Register />);
        const email = 'test@example.com';
        const password = '1234567890';
        const firstName = 'John';
        const lastName = 'Doe';

        fireEvent.change(screen.getByPlaceholderText(/email/i), { target: { value: email } });
        fireEvent.change(screen.getByPlaceholderText(/password/i), { target: { value: password } });
        fireEvent.change(screen.getByPlaceholderText(/first name/i), {
            target: { value: firstName },
        });
        fireEvent.change(screen.getByPlaceholderText(/last name/i), {
            target: { value: lastName },
        });

        // Submit the form directly
        const form = screen.getByRole('form');
        fireEvent.submit(form);

        await waitFor(() => {
            expect(registerUser).toHaveBeenCalledWith({
                email: email,
                password: password,
                firstName: firstName,
                lastName: lastName,
            });
        });

        await waitFor(() => {
            expect(mockNavigate).toHaveBeenCalledWith('/');
        });
    });

    test('shows error message on failed registration', async () => {
        (registerUser as jest.Mock).mockRejectedValue(new Error('mocked error'));

        renderWithRouter(<Register />);

        const email = 'test@example.com';
        const password = '1234567890';
        const firstName = 'John';
        const lastName = 'Doe';

        fireEvent.change(screen.getByPlaceholderText(/email/i), { target: { value: email } });
        fireEvent.change(screen.getByPlaceholderText(/password/i), { target: { value: password } });
        fireEvent.change(screen.getByPlaceholderText(/first name/i), {
            target: { value: firstName },
        });
        fireEvent.change(screen.getByPlaceholderText(/last name/i), {
            target: { value: lastName },
        });

        // Submit the form directly
        const form = screen.getByRole('form');
        fireEvent.submit(form);

        await waitFor(() => {
            expect(screen.getByTestId('error-message')).toHaveTextContent(/registration failed/i);
        });
    });
});
}

src/pages/Register/Register.tsx:
{
// import '../../styles/auth.css';
import AuthContext from '../../context/AuthContext';
import { useState, useContext } from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import { registerUser } from '../../context/AuthService';
import { ArrowLeft } from 'react-bootstrap-icons';

import FormContainer from '../../components/forms/FormContainer/FormContainer';
import AuthForm from '../../components/forms/AuthForm/AuthForm';
import FormInput from '../../components/forms/FormInput/FormInput';
import FormButton from '../../components/forms/FormButton/FormButton';
import FormRow from '../../components/forms/FormRow/FormRow';
import NavButton from '../../components/navButton/NavButton';

const Register: React.FC = () => {
    const context = useContext(AuthContext);
    const navigate = useNavigate();

    const [userData, setUserData] = useState({
        email: '',
        password: '',
        firstName: '',
        lastName: '',
    });

    const [error, setError] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { id, value } = e.target;
        setUserData(prev => ({
            ...prev,
            [id.replace('form', '')]: value,
        }));
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        const { email, password, firstName, lastName } = userData;

        if (!email || !password || !firstName || !lastName) {
            setError('Please fill in all fields');
            return;
        }
        setError(null);

        try {
            const response = await registerUser({ email, password, firstName, lastName });
            const token = response.data.data.token;
            const user = response.data.data.user;

            localStorage.setItem('token', token);
            localStorage.setItem('user', JSON.stringify(user));

            context?.setToken(token);
            context?.setUser(user);
            navigate('/');
        } catch (error) {
            console.error(error);
            setError('Registration Failed.');
        }
    };

    return (
        <FormContainer>
            <NavLink to="/" className="back-button text-white">
                <ArrowLeft className="me-1" />
                Back to home
            </NavLink>
            <AuthForm title="PHOTOCOMP" onSubmit={handleSubmit} error={error}>
                <FormRow>
                    <FormInput
                        id="formfirstName"
                        type="text"
                        placeholder="First Name"
                        value={userData.firstName}
                        onChange={handleChange}
                        required
                        className="mb-2"
                    />
                    <FormInput
                        id="formlastName"
                        type="text"
                        placeholder="Last Name"
                        value={userData.lastName}
                        onChange={handleChange}
                        required
                        className="mb-2"
                    />
                </FormRow>

                <FormInput
                    id="formemail"
                    type="email"
                    placeholder="Email"
                    value={userData.email}
                    onChange={handleChange}
                    required
                    className="w-100 mb-3"
                />

                <FormInput
                    id="formpassword"
                    type="password"
                    placeholder="Password"
                    value={userData.password}
                    onChange={handleChange}
                    required
                    className="w-100 mb-3"
                />

                <FormButton type="submit" variant="light" className="w-100">
                    Register
                </FormButton>

                <FormButton type="button" onClick={() => navigate('/login')} className="w-100">
                    Already have an account? Login
                </FormButton>
            </AuthForm>
        </FormContainer>
    );
};

export default Register;
}

src/pages/Register.tsx:
{
import '../styles/auth.css';
import AuthContext from '../context/AuthContext';
import { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { registerUser } from '../context/AuthService';

// Import our custom components
import FormContainer from '../components/forms/FormContainer';
import AuthForm from '../components/forms/AuthForm';
import FormInput from '../components/forms/FormInput';
import FormButton from '../components/forms/FormButton';

const Register: React.FC = () => {
    const context = useContext(AuthContext);
    const navigate = useNavigate();

    const [userData, setUserData] = useState({
        email: '',
        password: '',
        username: '',
        firstName: '',
        lastName: '',
    });

    const [error, setError] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { id, value } = e.target;
        setUserData(prev => ({
            ...prev,
            [id.replace('form', '').toLowerCase()]: value,
        }));
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        const { email, password, username, firstName, lastName } = userData;

        if (!email || !password || !username || !firstName || !lastName) {
            setError('Please fill in all fields');
            return;
        }
        setError(null);

        try {
            const response = await registerUser({ email, password, username, firstName, lastName });
            const token = response.data.data.token;
            const user = response.data.data.user;

            localStorage.setItem('token', token);
            localStorage.setItem('user', JSON.stringify(user));

            context?.setToken(token);
            context?.setUser(user);
            navigate('/');
        } catch (error) {
            console.error(error);
            setError('Registration Failed.');
        }
    };

    return (
        <FormContainer>
            <AuthForm title="PHOTOCOMP" onSubmit={handleSubmit} error={error}>
                <FormInput
                    id="formEmail"
                    type="email"
                    placeholder="Email"
                    value={userData.email}
                    onChange={handleChange}
                    required
                />

                <FormInput
                    id="formPassword"
                    type="password"
                    placeholder="Password"
                    value={userData.password}
                    onChange={handleChange}
                    required
                />

                <FormInput
                    id="formUsername"
                    type="text"
                    placeholder="Username"
                    value={userData.username}
                    onChange={handleChange}
                    required
                />

                <FormInput
                    id="formFirstName"
                    type="text"
                    placeholder="First Name"
                    value={userData.firstName}
                    onChange={handleChange}
                    required
                />

                <FormInput
                    id="formLastName"
                    type="text"
                    placeholder="Last Name"
                    value={userData.lastName}
                    onChange={handleChange}
                    required
                />

                <FormButton type="submit" variant="light">
                    Register
                </FormButton>

                <FormButton type="button" onClick={() => navigate('/login')}>
                    Already have an account? Login
                </FormButton>
            </AuthForm>
        </FormContainer>
    );
};

export default Register;
}

src/types/images.d.ts:
{
// src/types/images.d.ts
declare module '*.png' {
    const value: string;
    export default value;
}
}

src/utils/axios.tsx:
{
import axios from 'axios';

const AXIOS_DEFAULTS = {
    baseURL: 'http://localhost:3000',
    headers: {
        'Content-Type': 'application/json',
    },
};

export const noAuthInstance = axios.create(AXIOS_DEFAULTS);

const axiosInstance = axios.create(AXIOS_DEFAULTS);

axiosInstance.interceptors.request.use(
    config => {
        const token = localStorage.getItem('token');
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
    },
    error => Promise.reject(error)
);

axiosInstance.interceptors.response.use(
    response => response,
    error => {
        console.error('API error:', error);
        return Promise.reject(error);
    }
);

export default axiosInstance;
}

src/utils/test-utils.tsx:
{
import React, { ReactElement } from 'react';
import { render, RenderOptions } from '@testing-library/react';
import { MemoryRouter } from 'react-router-dom';

// Mock AuthContext
import AuthContext, { AuthContextType } from '../context/AuthContext';

interface MockAuthContext{
  user: any;
  token: any;
  setUser: any;
  setToken: any;
  logout: any;
}

const mockAuthContext:MockAuthContext = {
    user: null,
    token: null,
    setUser: jest.fn(),
    setToken: jest.fn(),
    logout: jest.fn(),
};

interface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {
    route?: string;
    authContext?: AuthContextType; // Update to use the explicit type
}

/**
 * Custom render function that wraps components with MemoryRouter and AuthContext
 *
 * Used to allow components to route in the tests in the case a component uses
 * react-router-dom with some auth context (protected routes).
 *
 */
export function renderWithRouter(
    ui: ReactElement,
    { route = '/', authContext = mockAuthContext, ...renderOptions }: CustomRenderOptions = {}
) {
    return render(
        <MemoryRouter initialEntries={[route]}>
            <AuthContext.Provider value={authContext}>{ui}</AuthContext.Provider>
        </MemoryRouter>,
        renderOptions
    );
}
}

src/vite-env.d.ts:
{
/// <reference types="vite/client" />
declare module '*.png';
}

